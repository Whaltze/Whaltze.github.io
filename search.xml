<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【课设】DELTA机器人</title>
      <link href="/2025/04/29/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2025/04/29/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为笔者大二下学期 机械原理 课程设计 DELTA 上位机开发过程</p></blockquote><h1 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h1><p>使用本教程前 请确保 已正确配置 ubuntu22.04物理机 以及 Anaconda3 环境</p><h1 id="Vscode-方法"><a href="#Vscode-方法" class="headerlink" title="Vscode 方法"></a>Vscode 方法</h1><blockquote><p>参考文献 <a href="https://blog.csdn.net/qq_38089394/article/details/136578957">ubuntu22.04 pyside6 vscode 安装与配置</a></p></blockquote><h2 id="创建-DELTA-ROBOT-工作空间-安装-pyside6-designer"><a href="#创建-DELTA-ROBOT-工作空间-安装-pyside6-designer" class="headerlink" title="创建 DELTA-ROBOT 工作空间 安装 pyside6-designer"></a>创建 DELTA-ROBOT 工作空间 安装 pyside6-designer</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conda --v</span><br><span class="line">conda info --envs</span><br><span class="line">conda create --name delta_robot python=3.8</span><br><span class="line">conda activate delta_robot</span><br><span class="line"></span><br><span class="line">pip install pyside6</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> pip3 install pyside6</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> pip3 install pyside6 -i https://pypi.tuna.tsinghua.edu.cn/simple</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda deactivate</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda remove --name delta_robot --all</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如有报错 安装以下依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y libxcb-cursor0 libxcb1-dev libx11-xcb1</span><br></pre></td></tr></table></figure><h2 id="启动-pyside6-designer"><a href="#启动-pyside6-designer" class="headerlink" title="启动 pyside6-designer"></a>启动 pyside6-designer</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyside6-designer</span><br></pre></td></tr></table></figure><h2 id="vscode-插件安装"><a href="#vscode-插件安装" class="headerlink" title="vscode 插件安装"></a>vscode 插件安装</h2><ul><li>Python</li><li>Python debugger，</li><li>Pylance</li><li>PYQT Integration</li></ul><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image.png" alt=" "></p><h2 id="配置PYQT-Integration插件"><a href="#配置PYQT-Integration插件" class="headerlink" title="配置PYQT Integration插件"></a>配置PYQT Integration插件</h2><p>进入<code>PYQT Integration插件 </code>的设置</p><p>配置以下四项</p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-1.png" alt=" "></p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-2.png" alt=" "></p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-3.png" alt=" "></p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-4.png" alt=" "></p><p>具体配置信息都是具体文件的全路径，除了最后的Path，其他都有默认的，都是pyqt5的，pyside6都换了名字，具体是：</p><ul><li>pylupdate：pyside6-lupdate</li><li>pyrcc：pyside6-rcc </li><li>pyuic：pyside6-uic</li><li>qtdesigner：pyside6-designer</li></ul><blockquote><p>使用  <code>whereis</code> 指令查找真实路径后填入，使用  <code>Ctrl+Shift+C</code> 复制终端里的文本</p></blockquote><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-5.png" alt=" "></p><p>填入设置中相对应的位置</p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-6.png" alt=" "></p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-7.png" alt=" "></p><blockquote><p>参数解释   </p></blockquote><ul><li>pyside6-rcc  编译资源文件的，可以改后面的Filepath配置来修改转换后的文件名，笔者这里没改</li><li>pyside6-uic  将UI界面编译成python代码的，改界面后必须编译一次更新的，可以修改后面的Filpath配置修改转换后的文件名，这里没改，<br>默认编译后为 Ui_&lt;ui文件名&gt;.py</li></ul><p>测试效果如图</p><p><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-8.png" alt=" "></p><h2 id="安装-Python3-打包程序"><a href="#安装-Python3-打包程序" class="headerlink" title="安装 Python3 打包程序"></a>安装 Python3 打包程序</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>两种打包方式</p><ul><li>pyinstaller xxx.py，生成执行文件，附带一个文件夹</li><li>pyinstaller -F xxx.py， 合成一个，单个文件在其他机器上可运行</li></ul><p>打包后，将源码打包成一个完整的可执行文件    </p><blockquote><p>注意 pyinstaller只是将代码打包成本平台的执行文件，不会交叉编译成其他平台程序的。有的blog写的ubuntu打包成exe，但这就是一个说法，不是真的打包成windows平台的.exe文件</p></blockquote><p>打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F test.py </span><br></pre></td></tr></table></figure><p>效果如图<br><img src="/images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91DELTA%E6%9C%BA%E5%99%A8%E4%BA%BA/image-9.png" alt=" "></p><h2 id="安装部分包指令"><a href="#安装部分包指令" class="headerlink" title="安装部分包指令"></a>安装部分包指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pip install pyserial</span><br><span class="line">pip install numpy</span><br><span class="line">pip install scipy</span><br><span class="line">pip install opencv-python</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">[插入背景图](https://blog.csdn.net/m0_46657126/article/details/124460022)</span><br><span class="line"></span><br><span class="line">[插入摄像头](https://blog.csdn.net/WYKB_Mr_Q/article/details/129827685)</span><br><span class="line"></span><br><span class="line">直接编写UI.py文件 </span><br><span class="line"></span><br><span class="line">位置坐标 左上角为原点</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">self.pushButton.setGeometry(QRect(x，y，lenth，high))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实机调试</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 串口通信</span></span></span><br><span class="line"></span><br><span class="line">插入CH340 ubuntu中不显示 ttyUSB接口</span><br><span class="line"></span><br><span class="line">排查发现 brltty（盲文终端服务） 占用 影响串口识别</span><br><span class="line"></span><br><span class="line">手动暂停服务 无果后选择删除</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止当前服务</span></span><br><span class="line">sudo systemctl stop brltty-udev.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用开机自启</span></span><br><span class="line">sudo systemctl disable brltty-udev.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除brltty软件包（可选）</span></span><br><span class="line">sudo apt remove brltty</span><br></pre></td></tr></table></figure><p>重新拔插串口线，成功识别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /dev/ttyUSB*</span><br></pre></td></tr></table></figure><h1 id="Pycharm-方法"><a href="#Pycharm-方法" class="headerlink" title="Pycharm 方法"></a>Pycharm 方法</h1><h2 id="创建-DELTA-ROBOT-工作空间-安装-PYQT5"><a href="#创建-DELTA-ROBOT-工作空间-安装-PYQT5" class="headerlink" title="创建 DELTA-ROBOT 工作空间 安装 PYQT5"></a>创建 DELTA-ROBOT 工作空间 安装 PYQT5</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">conda --v</span><br><span class="line">conda info --envs</span><br><span class="line">conda create --name delta_robot python=3.8</span><br><span class="line">conda activate delta_robot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 pyqt5</span></span><br><span class="line">pip install pyqt5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">网络问题可用(笔者这里已经连接不上豆瓣了)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip install PyQt5 -i https://pypi.douban.com/simple</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装常用的工具包</span></span><br><span class="line">pip install PyQt5-tools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip install PyQt5-tools -i https://pypi.douban.com/simple</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda deactivate</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda remove --name delta_robot --all</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在-Pycharm-中配置-QtDesigner"><a href="#在-Pycharm-中配置-QtDesigner" class="headerlink" title="在 Pycharm 中配置 QtDesigner"></a>在 Pycharm 中配置 QtDesigner</h2><blockquote><p>虚拟环境中下载的库，都在这个路径下</p></blockquote><p><code>/home/whale/anaconda3/envs/delta_robot/lib/python3.8/site-packages</code></p><p>然后，刚刚安装的工具包中，就有 QtDesigner，路径如下</p><p><code>/home/whale/anaconda3/envs/delta_robot/lib/python3.8/site-packages/qt5_applications/Qt/bin/designer</code></p><p>QtDesigner 可以帮助我们设计界面，并保存为 ui 文件</p><p>打开 Pycharm 新建一个项目 delta_robot</p><p>文件 → 设置 → 工具 → 外部工具 → 点击 + 号</p><h1 id="导出-导入环境"><a href="#导出-导入环境" class="headerlink" title="导出 导入环境"></a>导出 导入环境</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导出</span></span><br><span class="line">conda env export &gt; delta_robot.yaml</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入</span></span><br><span class="line">conda env create -f delta_robot.yaml</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 课设 </tag>
            
            <tag> DELTA </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法组第三次培训</title>
      <link href="/2025/03/02/%E7%AE%97%E6%B3%95%E7%BB%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
      <url>/2025/03/02/%E7%AE%97%E6%B3%95%E7%BB%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为2024年福州大学robomatser浮舟湿地战队视觉组培训文档,如有错误请联系<strong>2260274457(QQ)</strong></p></blockquote><h1 id="算法组第三次培训"><a href="#算法组第三次培训" class="headerlink" title="算法组第三次培训"></a>算法组第三次培训</h1><blockquote><p>本节课主要讲解 <code>OpenCV</code> 的使用 方面同学们快速入门 搭建环境(众所周知,好的环境是成功的一半) 为校赛准备(校赛允许能力强的同学上 <code>YOLO</code>, 可自行学习 本结课将略带而过 为后期大作业作铺垫)</p></blockquote><hr><h2 id="What-is-OpenCV"><a href="#What-is-OpenCV" class="headerlink" title="What is OpenCV"></a>What is OpenCV</h2><p><code>OpenCV</code> 全称 <code>Open Source Computer Vision Library</code> 是世界上著名的开源计算机视觉软件库。在图像处理和计算机视觉以及机器学习等方面发挥着重要作用, OpenCV主要由C函数和少量C++类构成，但同时提供Python、Java和MATLAB等多种语言的接口, 广泛被大众使用 </p><blockquote><p>在 RoboMaster 竞技中 主要通过 OpenCV 亦或是 YOLO 实现对 装甲板的识别 实现自瞄</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libopencv-dev</span><br></pre></td></tr></table></figure><p>怕麻烦的可以一键安装 自动获取OpenCV4所需的库文件 大概2个小时 </p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><p>进入 <a href="https://opencv.org/releases/">opencv官网</a>，下载Sources压缩包</p><h4 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev  libtiff5-dev libopenexr-dev libtbb-dev</span><br><span class="line">sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev pkg-config</span><br></pre></td></tr></table></figure><p>其实依赖还有很多, 对目前比赛项目来说 这些足够</p><h4 id="cmake-make"><a href="#cmake-make" class="headerlink" title="cmake &amp;&amp; make"></a>cmake &amp;&amp; make</h4><p>将源代码解压到home目录下，创建build文件夹，用cmake检查依赖项是否安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd opencv-4.5.4/  # 此处为自己安装的版本</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/lib/opencv4.5.4 -D OPENCV_GENERATE_PKGCONFIG=ON</span><br></pre></td></tr></table></figure><ul><li><p><code>CMAKE_INSTALL_PREFIX</code> 是 opencv 的安装地址。为便于后续开发 opencv 多版本共存，将 opencv 不同版本安放在不同的文件夹中（编译其他版本时把 opencv4.5.4 改成相应的版本名即可），目的是分开使用 opencv 各版本</p></li><li><p><code>OPENCV_GENERATE_PKGCONFIG</code> 强烈建议设置为ON。<br>opencv4 默认不生成 .pc 文件，所以加上这句用于生成 opencv4.pc 文件，支持 <code>pkg-config --modversion opencv4</code> 命令，从而可以搜索到 opencv 版本。</p></li></ul><p>cmake检查完成，就会显示配置和生成已结束 然后我们用 <code>make</code>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8</span><br></pre></td></tr></table></figure><blockquote><p>-j8就是开启8线程进行编译（-j后面的参数就是使用的线程数量），加快编译速度。这个过程相对比较漫长，中间可能会出现各种warning的提示，但只要最后100%就OK 根据自己电脑情况合理选择</p></blockquote><p>编译成功后运行 make install安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>修改 <code>~/.bashrc</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc </span><br></pre></td></tr></table></figure><p>在文件末尾加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OpenCV 4.5.4</span></span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/lib/opencv4.5.4/lib/pkgconfig  </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib/opencv4.5.4/lib</span><br></pre></td></tr></table></figure><p>source环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入命令查看opencv版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv4 --modversion</span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image.png" alt=" "></p><blockquote><p>需要查看其他版本的 把opencv4 改成 opencv 即可</p></blockquote><p>也可以试运行 例子程序 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/opencv-4.6.0/samples/cpp/example_cmake #修改为自己对应下载的版本号码</span><br><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>这里也可以运行我提供的测试程序</p><p>新建 <code>detect.py</code> 写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;armor.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查图像是否成功读取</span></span><br><span class="line"><span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像读取失败，请检查文件路径&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 将图像转换为灰度图像</span></span><br><span class="line">    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示原始图像和灰度图像</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, image)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Gray Image&#x27;</span>, gray_image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待按键按下，然后关闭所有窗口</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存灰度图像</span></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;armor_gray.png&#x27;</span>, gray_image)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 <code>python3 detect.py</code> 得到如下图片 就证明成功了!!! (撒花)</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-3.png" alt=" "></p><p>细心的同学 应该也注意到 在文件夹内多了一个新文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── armor_gray<span class="selector-class">.jpg</span></span><br><span class="line">├── armor<span class="selector-class">.png</span></span><br><span class="line">└── detect.py</span><br></pre></td></tr></table></figure><p>至此 OpenCV 环境就算搭建完成了 后续有相关需求的同学 也可以通过 安装不同版本<code>cv</code>或者使用 Anaconda 去管理不同的python版本等不同环境,以适应不同的工作环境<br>但值得注意的是conda有时候面临一些和项目冲突的地方 会报错 此时需要完全退出conda环境(包括base)</p><hr><h2 id="图像处理知识预备"><a href="#图像处理知识预备" class="headerlink" title="图像处理知识预备"></a>图像处理知识预备</h2><h3 id="图像的空间表示"><a href="#图像的空间表示" class="headerlink" title="图像的空间表示"></a>图像的空间表示</h3><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-6.png" alt=" "></p><blockquote><p>摘自 Rafeal C.Gonzalez(拉斐尔·C. 冈萨雷斯) Richard E.Woods(理查德·E. 伍兹) 老师的著作 Digital Image Processing,Fourth Edition(数字图像处理 第四版)</p></blockquote><p><strong>图像在计算机中是一个二维离散信号，通常表示为矩阵形式</strong></p><p>$$<br>I(x, y) \in \mathbb{R}^{M \times N}<br>$$</p><p>其中 $x$ 和 $y$ 是像素坐标，$M$ 和 $N$ 是图像的高度和宽度。对于彩色图像，通常使用三通道 $RGB$：</p><p>$$<br>I(x, y) &#x3D; [R(x, y), G(x, y), B(x, y)]<br>$$</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-4.png" alt=" "></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-5.png" alt=" "></p><blockquote><p>从这我们可以看出图像的数据不同于自然界中连续的图像色彩 而是一个个离散的像素点 意味着一个图像中 存储一个像素所用的位数(bit)越多 也就是常说的位深越高 图像就越清晰 所表达的信息就越丰富</p></blockquote><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-17.png"></p><p>我们后期主要使用的灰度图像 是一个单通道图像 只用 一位表示 即只有0和1 表示黑和白 虽然在视觉上不如彩色图像包含信息多 但在处理上灰度图像更简单更便捷也更迅速</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-18.png" alt=" "></p><h3 id="图像的颜色空间"><a href="#图像的颜色空间" class="headerlink" title="图像的颜色空间"></a>图像的颜色空间</h3><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-8.png" alt=" "></p><ul><li><strong>RGB</strong>（Red, Green, Blue）基于加色原理,是最常用的颜色模型，</li><li>其中每个像素由三个通道组成，取值范围通常为 <code>[0, 255]</code>（8位图像）。</li></ul><p>$$<br>\text{Image} &#x3D; (R, G, B)&#x3D;\left( \frac{r}{255}, \frac{g}{255}, \frac{b}{255} \right), \quad R,G,B \in [0, 255]<br>$$</p><p>白色 RGB(255,255,255)<br>黑色 RGB(0,0,0)</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-7.png"></p><p><code>cd Test2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像（OpenCV默认读取为BGR格式）</span></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&quot;image.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 转换为RGB格式</span></span><br><span class="line">img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离RGB通道</span></span><br><span class="line">r, g, b = cv2.split(img_rgb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并RGB通道</span></span><br><span class="line">img_red = cv2.merge([r, g, b])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Original Image&quot;</span>, img_bgr)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Red Image&quot;</span>, img_red)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>蓝色和红色发生调换</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/%E6%88%AA%E5%9B%BE%202025-02-23%2001-01-30.png"></p><h4 id="HSV-HSL颜色空间"><a href="#HSV-HSL颜色空间" class="headerlink" title="HSV&#x2F;HSL颜色空间"></a>HSV&#x2F;HSL颜色空间</h4><ul><li><strong>HSV</strong>（Hue, Saturation, Value）和 <strong>HSL</strong>（Hue, Saturation, Lightness）是面向视觉感知的颜色模型,也会是我们以后经常使用的颜色空间。</li></ul><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-9.png" alt=" "></p><ul><li><strong>Hue（色相）</strong>：颜色类型，角度范围 <code>[0°, 360°)</code>，在OpenCV中映射为 <code>[0, 179]</code>（8位图像）。</li><li><strong>Saturation（饱和度）</strong>：颜色纯度，范围 <code>[0, 1]</code>（OpenCV中映射为 <code>[0, 255]</code>）。</li><li><strong>Value(明度)</strong> 或 <strong>Lightness(亮度)</strong> ：颜色明暗程度，范围 <code>[0, 1]</code>（OpenCV中映射为 <code>[0, 255]</code>）。</li></ul><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-13.png" alt=" "></p><blockquote><p>白色 HSV(0,0,1)<br>黑色 HSV(0,0,0)</p></blockquote><p><strong>RGB到HSV的转换公式</strong>（标准化到 [0,1]）：</p><ol><li><p>计算最大值 $ C_{\text{max}} &#x3D; \max(R, G, B) $ 和最小值 $ C_{\text{min}} &#x3D; \min(R, G, B) $。</p></li><li><p>计算差值 $ \Delta &#x3D; C_{\text{max}} - C_{\text{min}} $。</p></li><li><p><strong>Hue</strong>：</p><span> $$H = \begin{cases}0^\circ & \text{if } \Delta = 0 \\60^\circ \times \left( \frac{G - B}{\Delta} +0 \right) & \text{if } C_{\text{max}} = R \\60^\circ \times \left( \frac{B - R}{\Delta} + 2 \right) & \text{if } C_{\text{max}} = G \\60^\circ \times \left( \frac{R - G}{\Delta} + 4 \right) & \text{if } C_{\text{max}} = B\end{cases}$$</span></li></ol><p> <strong>Saturation</strong>：</p>   <span>    $$   S =    \begin{cases}   0 & \text{if } C_{\text{max}} = 0 \\   \frac{\Delta}{C_{\text{max}}} & \text{else}   \end{cases}   $$ **Value**：   $$   V = C_{\text{max}}   $$   </span><p><code>cd Test3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为HSV颜色空间（注意OpenCV中H范围为[0,179]，S/V为[0,255]）</span></span><br><span class="line">img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离HSV通道</span></span><br><span class="line">h, s, v = cv2.split(img_hsv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：提取红色区域（H≈0或H≈180附近）</span></span><br><span class="line">lower_red1 = np.array([<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>])</span><br><span class="line">upper_red1 = np.array([<span class="number">10</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">lower_red2 = np.array([<span class="number">170</span>, <span class="number">50</span>, <span class="number">50</span>])</span><br><span class="line">upper_red2 = np.array([<span class="number">180</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">mask_red = cv2.inRange(img_hsv, lower_red1, upper_red1) | cv2.inRange(img_hsv, lower_red2, upper_red2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示原始图像和红色掩膜</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, img_bgr)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Red Mask&#x27;</span>, mask_red)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待按键，然后关闭所有窗口</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-14.png" alt=" "></p><p><strong>总结</strong></p><table><thead><tr><th>颜色空间</th><th>通道含义</th><th>主要应用</th></tr></thead><tbody><tr><td>RGB&#x2F;BGR</td><td>红、绿、蓝</td><td>图像显示与存储</td></tr><tr><td>HSV&#x2F;HSL</td><td>色相、饱和度、明度&#x2F;亮度</td><td>颜色分割、滤镜</td></tr></tbody></table><p><strong>OpenCV颜色空间通用转换函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：cv2.cvtColor(src, code)</span></span><br><span class="line"><span class="comment"># 示例：BGR转灰度图</span></span><br><span class="line">img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的转换代码包括：</span></span><br><span class="line"><span class="comment"># COLOR_BGR2RGB, COLOR_BGR2HSV, COLOR_BGR2LAB, COLOR_BGR2YUV等</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Test4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&quot;image.png&quot;</span>)</span><br><span class="line">img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为不同颜色空间</span></span><br><span class="line">img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)</span><br><span class="line">img_lab = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2LAB)</span><br><span class="line">img_ycrcb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2YCrCb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>), plt.imshow(img_rgb), plt.title(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), plt.imshow(img_hsv), plt.title(<span class="string">&quot;HSV&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>), plt.imshow(img_lab), plt.title(<span class="string">&quot;LAB&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>), plt.imshow(img_ycrcb), plt.title(<span class="string">&quot;YCbCr&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li><strong>通道范围</strong>：OpenCV中不同颜色空间的通道范围可能不同（如HSV的H通道为 <code>[0,179]</code>）。</li><li><strong>数据类型</strong>：颜色空间转换前需确保图像为 <code>float32</code> 或 <code>uint8</code> 类型。</li><li><strong>颜色失真</strong>：多次颜色空间转换可能导致精度损失。</li></ol><h3 id="图像形态学特征操作"><a href="#图像形态学特征操作" class="headerlink" title="图像形态学特征操作"></a>图像形态学特征操作</h3><h4 id="膨胀与腐蚀"><a href="#膨胀与腐蚀" class="headerlink" title="膨胀与腐蚀"></a>膨胀与腐蚀</h4><p>对图像形态学特征 最基础的就是 <strong>膨胀</strong>（Dilation）和 <strong>腐蚀</strong>（Erosion）。</p><ul><li><strong>膨胀</strong>（Dilation）：<br>$$<br>A \oplus B &#x3D; { z | (\hat{B})_z \cap A \neq \emptyset }<br>$$</li><li><strong>腐蚀</strong>（Erosion）：<br>$$<br>A \ominus B &#x3D; { z | (B)_z \subseteq A }<br>$$<br>其中 $B$ 是结构元素。</li></ul><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-15.png"></p><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">dilated = cv2.dilate(img, kernel)</span><br><span class="line">eroded = cv2.erode(img, kernel)</span><br></pre></td></tr></table></figure><p><strong>开运算与闭运算</strong></p><ul><li>开运算：先腐蚀后膨胀（去除小物体）。</li><li>闭运算：先膨胀后腐蚀（填充小孔）。</li></ul><p>一次膨胀一次腐蚀 保持体积不变</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-12.png"></p><h4 id="滤波卷积"><a href="#滤波卷积" class="headerlink" title="滤波卷积"></a>滤波卷积</h4><p>图像滤波的核心是卷积运算。给定图像 $I(x, y)$ 和卷积核 $K(i, j)$，卷积公式为：<br>$$<br>(I * K)(x, y) &#x3D; \sum_{i&#x3D;-a}^{a} \sum_{j&#x3D;-b}^{b} I(x-i, y-j) \cdot K(i, j)<br>$$<br>其中 $K$ 的大小为 $(2a+1) \times (2b+1)$。</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-10.png"></p><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">kernel = np.array([[<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># 锐化卷积核</span></span><br><span class="line">filtered = cv2.filter2D(img, -<span class="number">1</span>, kernel)</span><br></pre></td></tr></table></figure><h3 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h3><p>高斯核的数学公式（标准差为 $\sigma$：<br>$$<br>K(i, j) &#x3D; \frac{1}{2\pi\sigma^2} e^{-\frac{i^2 + j^2}{2\sigma^2}}<br>$$<br>离散化后，生成高斯核矩阵。</p><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blur = cv2.GaussianBlur(img, (<span class="number">5</span>,<span class="number">5</span>), sigmaX=<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure><h3 id="Sobel算子边缘检测"><a href="#Sobel算子边缘检测" class="headerlink" title="Sobel算子边缘检测"></a>Sobel算子边缘检测</h3><p>Sobel算子的水平和垂直卷积核：</p><span>$$K_x = \begin{bmatrix}-1 & 0 & 1 \\-2 & 0 & 2 \\-1 & 0 & 1\end{bmatrix}, \quadK_y = \begin{bmatrix}-1 & -2 & -1 \\0 & 0 & 0 \\1 & 2 & 1\end{bmatrix}$$梯度幅值计算：$$G = \sqrt{G_x^2 + G_y^2}$$</span><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grad_x = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">3</span>)</span><br><span class="line">grad_y = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">grad = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="图像插值"><a href="#图像插值" class="headerlink" title="图像插值"></a>图像插值</h3><p>在缩放或旋转时，像素位置可能非整数，需插值。常用方法：</p><ul><li><p><strong>双线性插值</strong>：</p><p>$$<br>I(x, y) &#x3D; (1 - \alpha)(1 - \beta) I_{00} + \alpha(1 - \beta) I_{10} + (1 - \alpha)\beta I_{01} + \alpha\beta I_{11}<br>$$</p><p>其中 $$\alpha &#x3D; x - \lfloor x \rfloor$$  $$\beta &#x3D; y - \lfloor y \rfloor$$</p></li></ul><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resized = cv2.resize(img, <span class="literal">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv2.INTER_LINEAR)</span><br></pre></td></tr></table></figure><h2 id="armor-detect"><a href="#armor-detect" class="headerlink" title="armor_detect"></a>armor_detect</h2><p>这是Roboaster比赛中常见的装甲板图形</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    A[Robomaster装甲板识别] --&gt; B[图像预处理];    B --&gt; B1[选取颜色通道阈值区间];    B --&gt; B2[二值化];    B --&gt; B3[形态学操作];    B --&gt; B4[边缘检测];    B --&gt; B5[...];    B1 --&gt; C[筛选矩形];    B2 --&gt; C;    B3 --&gt; C;    B4 --&gt; C;    B5 --&gt; C;    C --&gt; C1[查找轮廓];    C1 --&gt; C2[筛选除去部分矩形];    C2 --&gt; D[判断是否为装甲板];    D --&gt; E[遍历矩形，两两组合判断];    E --&gt; F[识别装甲板];    F --&gt; F1[装甲板中心相对画面中心坐标];  </pre></div><p>观察图形可以看到</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-1.png" alt=" "></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-2.png" alt=" "></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-16.png" alt=" "></p><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV !"></a>OpenCV !</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libopencv-dev</span><br></pre></td></tr></table></figure><p>确保环境已经搭建 本节课基于用 OpenCV 在屏幕右上角绘制矩形为案例 带大家了解基本的操作思路</p><blockquote><p>演示摄像头搭载 USB 全域部摄像头 进行扫描 有条件的同学可以购买类似USB驱动摄像头 使用电脑自带摄像头也是没问题的</p></blockquote><h3 id="安装-usb-cam摄像头驱动"><a href="#安装-usb-cam摄像头驱动" class="headerlink" title="安装 usb_cam摄像头驱动"></a>安装 usb_cam摄像头驱动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-humble-usb_cam </span><br></pre></td></tr></table></figure><p>cheese 茄子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cheese </span><br><span class="line">cheese  # 运行茄子</span><br></pre></td></tr></table></figure><p>运行 <code>red_circle_detect.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">2</span>) <span class="comment"># 数字根据自己摄像头确定编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取视频帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法获取视频帧&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图像转换为HSV颜色空间（更好的颜色分离）</span></span><br><span class="line">    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义红色的HSV范围（需要根据实际情况调整）</span></span><br><span class="line">    lower_red1 = np.array([<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>])</span><br><span class="line">    upper_red1 = np.array([<span class="number">10</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    lower_red2 = np.array([<span class="number">160</span>, <span class="number">100</span>, <span class="number">100</span>])</span><br><span class="line">    upper_red2 = np.array([<span class="number">180</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建红色掩膜</span></span><br><span class="line">    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)</span><br><span class="line">    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)</span><br><span class="line">    mask = cv2.bitwise_or(mask1, mask2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图像预处理</span></span><br><span class="line">    mask = cv2.erode(mask, <span class="literal">None</span>, iterations=<span class="number">2</span>)</span><br><span class="line">    mask = cv2.dilate(mask, <span class="literal">None</span>, iterations=<span class="number">2</span>)</span><br><span class="line">    mask = cv2.GaussianBlur(mask, (<span class="number">9</span>, <span class="number">9</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 霍夫圆检测</span></span><br><span class="line">    circles = cv2.HoughCircles(mask, cv2.HOUGH_GRADIENT, dp=<span class="number">1.2</span>, minDist=<span class="number">100</span>,</span><br><span class="line">                              param1=<span class="number">50</span>, param2=<span class="number">30</span>, minRadius=<span class="number">20</span>, maxRadius=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果检测到圆形</span></span><br><span class="line">    <span class="keyword">if</span> circles <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        circles = np.<span class="built_in">round</span>(circles[<span class="number">0</span>, :]).astype(<span class="string">&quot;int&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历所有检测到的圆</span></span><br><span class="line">        <span class="keyword">for</span> (x, y, r) <span class="keyword">in</span> circles:</span><br><span class="line">            <span class="comment"># 绘制圆形和中心点</span></span><br><span class="line">            cv2.circle(frame, (x, y), r, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line">            cv2.circle(frame, (x, y), <span class="number">2</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">            <span class="comment"># 显示圆心坐标</span></span><br><span class="line">            cv2.putText(frame, <span class="string">f&quot;(<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)&quot;</span>, (x-<span class="number">50</span>, y-<span class="number">20</span>),</span><br><span class="line">                       cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示结果</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;Frame&quot;</span>, frame)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;Mask&quot;</span>, mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按q退出</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放资源</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>随手画一张图检验一下</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-20.png" alt=" "></p><p>可以看到图片上存在不同颜色的干扰 以及形态的干扰 两者都需要考虑</p><p>看看检测结果</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/result.png"></p><p>正确分离出了红色部分</p><p>而且图形判断正确 没有误判矩形</p><blockquote><p>但在实际比赛中 可能受到光照等因素影响 以及小球颜色多样 可能没有如此鲜明特征等等 这都会影响我们识别的结果 这里提供一个简单的样例思路 还有很多地方可以优化</p></blockquote><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li><p>基于OpenCV编写识别程序 识别绿色三角形 (识别环境自己绘图,越能适应复杂环境,作业评分越高)</p></li><li><p>ROS与OpenCV的转换</p><ul><li>以ROS功能包的形式编写节点实时订阅摄像头发布的图像话题消息并将ROS图像消息转换为OpenCV图像</li><li>在图像右上角绘制矩形，再将OpenCV图像转换回ROS图像消息重新发布到一个新的话题</li><li>用rviz或者rqt_image_view显示图像消息</li></ul></li></ul><p>作业均要求提供 源程序和实例图像 README讲解运行过程 (可引用图片展示) 截止于 <strong>2025年3月29日晚24点</strong></p><p><strong>样例</strong></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-21.png" alt=" "></p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/7.png" alt=" "></p><h2 id="校赛"><a href="#校赛" class="headerlink" title="校赛"></a>校赛</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E7%BB%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD/image.png" alt="alt text"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%BB%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-1.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Robomaster </tag>
            
            <tag> 视觉组培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RM2025导航调试</title>
      <link href="/2025/02/14/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/"/>
      <url>/2025/02/14/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本博客记录调试过程,方便后续排查错误<br>基于 深北莫 陈佬开源<br><a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_sentry_nav">pb2025_sentry_nav</a><br><a href="https://github.com/SMBU-PolarBear-Robotics-Team/rmu_gazebo_simulator">rmu_gazebo_simulator</a></p></blockquote><h1 id="上场！"><a href="#上场！" class="headerlink" title="上场！"></a>上场！</h1><h2 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch pb2025_nav_bringup rm_sentry_reality_launch.py \</span><br><span class="line">slam:=True \</span><br><span class="line">use_robot_state_pub:=True</span><br></pre></td></tr></table></figure><p>建图后保存地图到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run nav2_map_server map_saver_cli -f rmul_2025 --ros-args -r __ns:=/red_standard_robot1</span><br></pre></td></tr></table></figure><p>将其中的 <code>rmul_2025.pgm</code> 和 <code>rmul_2025.yaml</code> 保存至于 map中<br>终止程序 在pointlio&#x2F;PCD中生成 scans.pcd 命名为rmul_2025 放置于 reality&#x2F;PCD中 </p><p>重新编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure><h2 id="修图"><a href="#修图" class="headerlink" title="修图"></a>修图</h2><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h1 id="海康-SDK-冲突"><a href="#海康-SDK-冲突" class="headerlink" title="海康 SDK 冲突"></a>海康 SDK 冲突</h1><p>[&#x2F;usr&#x2F;bin&#x2F;ld: ..&#x2F;..&#x2F;lib&#x2F;libpcl_io.so.1.8.0: undefined reference to &#96;libusb_set_option‘错误解决-海康摄像头SDK](<a href="https://blog.csdn.net/weixin_45646976/article/details/134856249">https://blog.csdn.net/weixin_45646976/article/details/134856249</a>)</p><p>删除 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/MVS/lib/64/libusb-1.0.so.0</span><br><span class="line">/opt/MVS/lib/32/libusb-1.0.so.0</span><br></pre></td></tr></table></figure><h1 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h1><h2 id="下载-Ignition-Fortress"><a href="#下载-Ignition-Fortress" class="headerlink" title="下载 Ignition: Fortress"></a>下载 Ignition: Fortress</h2><p>下载对应Gazebo仿真版本</p><p><a href="https://gazebosim.org/docs/fortress/install_ubuntu/">官网教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install lsb-release gnupg</span><br><span class="line">sudo curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg</span><br><span class="line">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ignition-fortress</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove ignition-fortress &amp;&amp; sudo apt autoremove</span><br></pre></td></tr></table></figure><h2 id="安装-small-icp"><a href="#安装-small-icp" class="headerlink" title="安装 small_icp"></a>安装 small_icp</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y libeigen3-dev libomp-dev</span><br><span class="line"></span><br><span class="line">git clone https://github.com/koide3/small_gicp.git</span><br><span class="line">cd small_gicp</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake .. -DCMAKE_BUILD_TYPE=Release &amp;&amp; make -j</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="克隆-pb2025-sentry-nav"><a href="#克隆-pb2025-sentry-nav" class="headerlink" title="克隆 pb2025_sentry_nav"></a>克隆 pb2025_sentry_nav</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_sentry_nav.git src/pb2025_sentry_nav</span><br></pre></td></tr></table></figure><h2 id="下载先验点云"><a href="#下载先验点云" class="headerlink" title="下载先验点云"></a>下载先验点云</h2><p><a href="https://flowus.cn/lihanchen/share/87f81771-fc0c-4e09-a768-db01f4c136f4?code=4PP1RS">FlowUS</a></p><p>放到 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/whale/RM2025/src/pb2025_sentry_nav/pb2025_nav_bringup/pcd/simulation/</span><br></pre></td></tr></table></figure><h2 id="安装依赖-build"><a href="#安装依赖-build" class="headerlink" title="安装依赖 build"></a>安装依赖 build</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3-rosdep</span><br><span class="line">sudo rosdep init #最好挂梯子</span><br><span class="line">rosdep update #最好挂梯子</span><br><span class="line">rosdep install -r --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y</span><br><span class="line">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure><blockquote><p>rosdep的主要用途是安装工作空间中ros包的依赖，首先切换到工作空间下，然后运行下述命令即可安装该工作空间的所有依赖：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosdep install --from-paths src --ignore-src -r -y</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 –symlink-install 选项来构建你的工作空间，因为 pb2025_sentry_nav 广泛使用了 launch.py 文件和 YAML 文件。这个构建参数会为那些非编译的源文件使用符号链接，这意味着当你调整参数文件时，不需要反复重建，只需要重新启动即可。(摘自陈佬)</p></blockquote><h2 id="clone-rmu-gazebo-simulator"><a href="#clone-rmu-gazebo-simulator" class="headerlink" title="clone rmu_gazebo_simulator"></a>clone rmu_gazebo_simulator</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd ~/RM2025/src/</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"></span><br><span class="line">git clone https://github.com/gezp/sdformat_tools.git</span><br><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/rmoss_interfaces.git</span><br><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/rmoss_core.git</span><br><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/rmoss_gazebo.git</span><br><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/rmoss_gz_resources.git --depth=1</span><br><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/rmu_gazebo_simulator.git</span><br><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_robot_description.git</span><br><span class="line"></span><br><span class="line">pip install xmacro</span><br></pre></td></tr></table></figure><p><code>pip install xmacro</code>警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">whale@UP:~/RM2025/src$ pip install xmacro</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Collecting xmacro</span><br><span class="line">  Downloading xmacro-1.2.1-py3-none-any.whl (10 kB)</span><br><span class="line">Installing collected packages: xmacro</span><br><span class="line">  WARNING: The scripts xmacro, xmacro4sdf and xmacro4urdf are installed in &#x27;/home/whale/.local/bin&#x27; which is not on PATH.</span><br><span class="line">  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.</span><br><span class="line">Successfully installed xmacro-1.2.1</span><br></pre></td></tr></table></figure><p><code>colcon build</code>警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--- stderr: rmoss_base                                                       </span><br><span class="line">In file included from /home/whale/RM2025/src/rmoss_core/rmoss_base/test/test_fixed_packet_tool.cpp:21:</span><br><span class="line">/home/whale/RM2025/src/rmoss_core/rmoss_base/test/dummy_transporter.hpp: In constructor ‘TransporterFactory::TransporterFactory()’:</span><br><span class="line">/home/whale/RM2025/src/rmoss_core/rmoss_base/test/dummy_transporter.hpp:68:9: warning: ignoring return value of ‘int pipe(int*)’ declared with attribute ‘warn_unused_result’ [-Wunused-result]</span><br><span class="line">   68 |     pipe(fds1);</span><br><span class="line">      |     ~~~~^~~~~~</span><br><span class="line">/home/whale/RM2025/src/rmoss_core/rmoss_base/test/dummy_transporter.hpp:69:9: warning: ignoring return value of ‘int pipe(int*)’ declared with attribute ‘warn_unused_result’ [-Wunused-result]</span><br><span class="line">   69 |     pipe(fds2);</span><br><span class="line">      |     ~~~~^~~~~~</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="运行指令-启动仿真"><a href="#运行指令-启动仿真" class="headerlink" title="运行指令 启动仿真"></a>运行指令 启动仿真</h2><h3 id="查看tf树"><a href="#查看tf树" class="headerlink" title="查看tf树"></a>查看tf树</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ros-humble-rqt-tf-tree</span><br><span class="line"></span><br><span class="line">ros2 run rqt_tf_tree rqt_tf_tree --ros-args -r /tf:=tf -r /tf_static:=tf_static -r  __ns:=/red_standard_robot1</span><br></pre></td></tr></table></figure><p>具体自行探索</p><p><a href="https://github.com/SMBU-PolarBear-Robotics-Team/rmu_gazebo_simulator">SMBU-PolarBear-Robotics-Team</a></p><h3 id="单机器人导航"><a href="#单机器人导航" class="headerlink" title="单机器人导航"></a>单机器人导航</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch pb2025_nav_bringup rm_sentry_simulation_launch.py \</span><br><span class="line">world:=rmul_2025 \</span><br><span class="line">slam:=False</span><br></pre></td></tr></table></figure><h3 id="开启Gazebo仿真"><a href="#开启Gazebo仿真" class="headerlink" title="开启Gazebo仿真"></a>开启Gazebo仿真</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch rmu_gazebo_simulator bringup_sim.launch.py</span><br></pre></td></tr></table></figure><p>需要点击Gazebo左下角按钮启动仿真</p><blockquote><p>控制机器人移动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rmoss_gz_base test_chassis_cmd.py --ros-args -r __ns:=/red_standard_robot1/robot_base -p v:=0.3 -p w:=0.3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据提示进行输入，支持平移与自旋</span></span><br></pre></td></tr></table></figure><ul><li><p>键盘控制：</p></li><li><p>机器人云台</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rmoss_gz_base test_gimbal_cmd.py --ros-args -r __ns:=/red_standard_robot1/robot_base</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据提示进行输入，支持绝对角度控制</span></span><br></pre></td></tr></table></figure><ul><li>机器人射击</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rmoss_gz_base test_shoot_cmd.py --ros-args -r __ns:=/red_standard_robot1/robot_base</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据提示进行输入</span></span><br></pre></td></tr></table></figure><p>能够正常仿真 输出 tf 树</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> apt-get update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> apt-get install ros-humble-rqt-tf-tree</span></span><br><span class="line"></span><br><span class="line">ros2 run rqt_tf_tree rqt_tf_tree --ros-args -r /tf:=tf -r /tf_static:=tf_static -r  __ns:=/red_standard_robot1</span><br></pre></td></tr></table></figure><p><img src="/./images/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/TF_SIM.png"></p><h2 id="仿真调参"><a href="#仿真调参" class="headerlink" title="仿真调参"></a>仿真调参</h2><blockquote><p>记录修改内容</p></blockquote><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>工作包改为 <code>fzsd2025_robot_description</code></p><p>机器人名字改为 <code>fzsd2025_sentry_rebot</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># robot_description_launch.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ament_index_python.packages <span class="keyword">import</span> get_package_share_directory</span><br><span class="line"><span class="keyword">from</span> launch <span class="keyword">import</span> LaunchContext, LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch.actions <span class="keyword">import</span> DeclareLaunchArgument, OpaqueFunction, SetEnvironmentVariable</span><br><span class="line"><span class="keyword">from</span> launch.conditions <span class="keyword">import</span> IfCondition</span><br><span class="line"><span class="keyword">from</span> launch.substitutions <span class="keyword">import</span> LaunchConfiguration, TextSubstitution</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> sdformat_tools.urdf_generator <span class="keyword">import</span> UrdfGenerator</span><br><span class="line"><span class="keyword">from</span> xmacro.xmacro4sdf <span class="keyword">import</span> XMLMacro4sdf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">launch_setup</span>(<span class="params">context: LaunchContext</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    NOTE: Using OpaqueFunction in order to get the context in string format...</span></span><br><span class="line"><span class="string">    But it is too hacky and not recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    use_sim_time = LaunchConfiguration(<span class="string">&quot;use_sim_time&quot;</span>)</span><br><span class="line">    source_list = LaunchConfiguration(<span class="string">&quot;source_list&quot;</span>)</span><br><span class="line">    rviz_config_file = LaunchConfiguration(<span class="string">&quot;rviz_config_file&quot;</span>)</span><br><span class="line">    use_rviz = LaunchConfiguration(<span class="string">&quot;use_rviz&quot;</span>)</span><br><span class="line">    use_respawn = LaunchConfiguration(<span class="string">&quot;use_respawn&quot;</span>)</span><br><span class="line">    log_level = LaunchConfiguration(<span class="string">&quot;log_level&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Map fully qualified names to relative ones so the node&#x27;s namespace can be prepended.</span></span><br><span class="line">    <span class="comment"># In case of the transforms (tf), currently, there doesn&#x27;t seem to be a better alternative</span></span><br><span class="line">    <span class="comment"># https://github.com/ros/geometry2/issues/32</span></span><br><span class="line">    <span class="comment"># https://github.com/ros/robot_state_publisher/pull/30</span></span><br><span class="line">    <span class="comment"># TODO(orduno) Substitute with `PushNodeRemapping`</span></span><br><span class="line">    <span class="comment">#              https://github.com/ros2/launch_ros/issues/56</span></span><br><span class="line">    remappings = [(<span class="string">&quot;/tf&quot;</span>, <span class="string">&quot;tf&quot;</span>), (<span class="string">&quot;/tf_static&quot;</span>, <span class="string">&quot;tf_static&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load the robot xmacro file from the launch configuration</span></span><br><span class="line">    xmacro = XMLMacro4sdf()</span><br><span class="line">    xmacro.set_xml_file(context.launch_configurations[<span class="string">&quot;robot_xmacro_file&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generate SDF from xmacro</span></span><br><span class="line">    xmacro.generate()</span><br><span class="line">    robot_xml = xmacro.to_string()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generate URDF from SDF</span></span><br><span class="line">    urdf_generator = UrdfGenerator()</span><br><span class="line">    urdf_generator.parse_from_sdf_string(robot_xml)</span><br><span class="line">    robot_urdf_xml = urdf_generator.to_string()</span><br><span class="line"></span><br><span class="line">    stdout_linebuf_envvar = SetEnvironmentVariable(</span><br><span class="line">        <span class="string">&quot;RCUTILS_LOGGING_BUFFERED_STREAM&quot;</span>, <span class="string">&quot;1&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    colorized_output_envvar = SetEnvironmentVariable(<span class="string">&quot;RCUTILS_COLORIZED_OUTPUT&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    start_joint_state_publisher_node = Node(</span><br><span class="line">        package=<span class="string">&quot;joint_state_publisher&quot;</span>,</span><br><span class="line">        executable=<span class="string">&quot;joint_state_publisher&quot;</span>,</span><br><span class="line">        name=<span class="string">&quot;joint_state_publisher&quot;</span>,</span><br><span class="line">        output=<span class="string">&quot;screen&quot;</span>,</span><br><span class="line">        respawn=use_respawn,</span><br><span class="line">        respawn_delay=<span class="number">2.0</span>,</span><br><span class="line">        parameters=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;use_sim_time&quot;</span>: use_sim_time,</span><br><span class="line">                <span class="string">&quot;rate&quot;</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">&quot;source_list&quot;</span>: source_list,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        arguments=[<span class="string">&quot;--ros-args&quot;</span>, <span class="string">&quot;--log-level&quot;</span>, log_level],</span><br><span class="line">        remappings=remappings,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    start_robot_state_publisher_node = Node(</span><br><span class="line">        package=<span class="string">&quot;robot_state_publisher&quot;</span>,</span><br><span class="line">        executable=<span class="string">&quot;robot_state_publisher&quot;</span>,</span><br><span class="line">        output=<span class="string">&quot;screen&quot;</span>,</span><br><span class="line">        respawn=use_respawn,</span><br><span class="line">        respawn_delay=<span class="number">2.0</span>,</span><br><span class="line">        parameters=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;use_sim_time&quot;</span>: use_sim_time,</span><br><span class="line">                <span class="string">&quot;publish_frequency&quot;</span>: <span class="number">200.0</span>,</span><br><span class="line">                <span class="string">&quot;robot_description&quot;</span>: robot_urdf_xml,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        arguments=[<span class="string">&quot;--ros-args&quot;</span>, <span class="string">&quot;--log-level&quot;</span>, log_level],</span><br><span class="line">        remappings=remappings,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    start_rviz_node = Node(</span><br><span class="line">        condition=IfCondition(use_rviz),</span><br><span class="line">        package=<span class="string">&quot;rviz2&quot;</span>,</span><br><span class="line">        executable=<span class="string">&quot;rviz2&quot;</span>,</span><br><span class="line">        arguments=[<span class="string">&quot;-d&quot;</span>, rviz_config_file],</span><br><span class="line">        output=<span class="string">&quot;screen&quot;</span>,</span><br><span class="line">        remappings=remappings,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        stdout_linebuf_envvar,</span><br><span class="line">        colorized_output_envvar,</span><br><span class="line">        start_joint_state_publisher_node,</span><br><span class="line">        start_robot_state_publisher_node,</span><br><span class="line">        start_rviz_node,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_launch_description</span>():</span><br><span class="line">    <span class="comment"># Get the launch directory</span></span><br><span class="line">    bringup_dir = get_package_share_directory(<span class="string">&quot;fzsd2025_robot_description&quot;</span>)   <span class="comment">#     get_package_share_directory(&quot;fzsd2025_robot_description&quot;)</span></span><br><span class="line"></span><br><span class="line">    declare_use_sim_time_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;use_sim_time&quot;</span>,</span><br><span class="line">        default_value=<span class="string">&quot;False&quot;</span>,</span><br><span class="line">        description=<span class="string">&quot;Use simulation (Gazebo) clock if true&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_robot_name_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;robot_name&quot;</span>,</span><br><span class="line">        default_value=<span class="string">&quot;fzsd2025_sentry_robot&quot;</span>,   <span class="comment">#  # default_value=&quot;fzsd2025_sentry_robot&quot;,</span></span><br><span class="line">        description=<span class="string">&quot;The file name of the robot xmacro to be used&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_robot_xmacro_file_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;robot_xmacro_file&quot;</span>,</span><br><span class="line">        default_value=[</span><br><span class="line">            <span class="comment"># Use TextSubstitution to concatenate strings</span></span><br><span class="line">            TextSubstitution(text=os.path.join(bringup_dir, <span class="string">&quot;resource&quot;</span>, <span class="string">&quot;xmacro&quot;</span>, <span class="string">&quot;&quot;</span>)),</span><br><span class="line">            LaunchConfiguration(<span class="string">&quot;robot_name&quot;</span>),</span><br><span class="line">            TextSubstitution(text=<span class="string">&quot;.sdf.xmacro&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">        description=<span class="string">&quot;The file path of the robot xmacro to be used&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_source_list_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;source_list&quot;</span>,</span><br><span class="line">        default_value=<span class="string">&quot;[&#x27;serial/gimbal_joint_state&#x27;]&quot;</span>,</span><br><span class="line">        description=<span class="string">&quot;Array of topic names for subscriptions to sensor_msgs/msg/JointStates. Defaults to [&#x27;serial/gimbal_joint_state&#x27;]&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_rviz_config_file_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;rviz_config_file&quot;</span>,</span><br><span class="line">        default_value=os.path.join(bringup_dir, <span class="string">&quot;rviz&quot;</span>, <span class="string">&quot;visualize_robot.rviz&quot;</span>),</span><br><span class="line">        description=<span class="string">&quot;Full path to the RViz config file to use&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_use_rviz_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;use_rviz&quot;</span>, default_value=<span class="string">&quot;True&quot;</span>, description=<span class="string">&quot;Whether to start RViz&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_use_respawn_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;use_respawn&quot;</span>,</span><br><span class="line">        default_value=<span class="string">&quot;False&quot;</span>,</span><br><span class="line">        description=<span class="string">&quot;Whether to respawn if a node crashes. Applied when composition is disabled.&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    declare_log_level_cmd = DeclareLaunchArgument(</span><br><span class="line">        <span class="string">&quot;log_level&quot;</span>, default_value=<span class="string">&quot;info&quot;</span>, description=<span class="string">&quot;log level&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the launch description and populate</span></span><br><span class="line">    ld = LaunchDescription()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Declare the launch options</span></span><br><span class="line">    ld.add_action(declare_use_sim_time_cmd)</span><br><span class="line">    ld.add_action(declare_robot_name_cmd)</span><br><span class="line">    ld.add_action(declare_robot_xmacro_file_cmd)</span><br><span class="line">    ld.add_action(declare_source_list_cmd)</span><br><span class="line">    ld.add_action(declare_rviz_config_file_cmd)</span><br><span class="line">    ld.add_action(declare_use_rviz_cmd)</span><br><span class="line">    ld.add_action(declare_use_respawn_cmd)</span><br><span class="line">    ld.add_action(declare_log_level_cmd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add the actions to launch all of the nodes</span></span><br><span class="line">    ld.add_action(OpaqueFunction(function=launch_setup))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ld</span><br></pre></td></tr></table></figure><p><code>CMakeList.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"><span class="keyword">project</span>(fzsd2025_robot_description)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(ament_cmake REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(DIRECTORY</span><br><span class="line">    launch</span><br><span class="line">    resource</span><br><span class="line">    rviz</span><br><span class="line"></span><br><span class="line">    DESTINATION share/<span class="variable">$&#123;PROJECT_NAME&#125;</span>/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#environment</span></span><br><span class="line">ament_environment_hooks(<span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/env-hooks/gazebo.dsv.in&quot;</span>)</span><br><span class="line"></span><br><span class="line">ament_package()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rviz查看机器人 <code>ros2 launch fzsd2025_robot_description robot_description_launch.py</code><br>报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package &#x27;joint_state_publisher&#x27; not found, </span><br></pre></td></tr></table></figure><p>原因 目前 没有部署实际的机器人，所以注释<a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_robot_description/blob/2543d91e1b5bc70fd2d6cfb259f651642d8c1f73/launch/robot_description_launch.py#L71">joint_state_publisher</a> </p><blockquote><p>standard_robot_pp_ros2获取电控发送的gimbal_yaw和gimbal_pitch姿态，以JointState的数据类型发布到topic &#x2F;gimbal_joint_state <a href="https://github.com/SMBU-PolarBear-Robotics-Team/standard_robot_pp_ros2/blob/e5fa63f1489038559c59c190bc9616e41ff637ff/launch/standard_robot_pp_ros2.launch.py#L142">详见Github</a></p></blockquote><blockquote><p>而后pb_robot_description的launch文件中启动了joint_state_publisher，他会订阅&#x2F;gimbal_joint_state，然后整合发布到&#x2F;joint_state <a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_robot_description/blob/2543d91e1b5bc70fd2d6cfb259f651642d8c1f73/launch/robot_description_launch.py#L64">Github</a></p></blockquote><blockquote><p>最后<a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_robot_description/blob/2543d91e1b5bc70fd2d6cfb259f651642d8c1f73/launch/robot_description_launch.py#L71">robot_state_publisher</a> 会订阅 &#x2F;joint_state，然后转化成tf信息和robot_description，建立整车tf tree</p></blockquote><p>重新输入指令 成功在rviz显示</p><h4 id="修改-雷达坐标系"><a href="#修改-雷达坐标系" class="headerlink" title="修改 雷达坐标系"></a>修改 雷达坐标系</h4><p><code>/home/whale/RM2025/src/fzsd2025_robot_description/resource/xmacro/fzsd2025_sentry_robot.sdf.xmacro</code></p><p>雷达在云台上直接修改坐标 如果在底盘 需要手动维护底盘到云台的tf</p><p>这里在云台上 直接修改坐标</p><p>找到 <code>livox</code></p><p>修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--livox--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xmacro_block</span> <span class="attr">name</span>=<span class="string">&quot;livox&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;front_&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;chassis&quot;</span> <span class="attr">pose</span>=<span class="string">&quot;0.16 0.0 0.18 $&#123;pi/6&#125; 0.0 $&#123;pi/2&#125;&quot;</span> <span class="attr">update_rate</span>=<span class="string">&quot;20&quot;</span> <span class="attr">samples</span>=<span class="string">&quot;1875&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- livox // chassis  gimbal_pitch  gimbal_yaw    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xmacro_block</span> <span class="attr">name</span>=<span class="string">&quot;livox&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;front_&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;gimbal_yaw&quot;</span> <span class="attr">pose</span>=<span class="string">&quot;-0.066 -0.1065 0.399 $&#123;pi&#125; 0.0 $&#123;pi&#125;&quot;</span> <span class="attr">update_rate</span>=<span class="string">&quot;10&quot;</span> <span class="attr">samples</span>=<span class="string">&quot;400&quot;</span> <span class="attr">visualize</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>update_rate：雷达的更新频率，以赫兹为单位。这参数决定了雷达发送数据的频率。</li><li>samples：雷达的采样数，即每个每次发送的数据点数。</li></ul><blockquote><p>xmacro_block 元素的 pose 属性。这个属性定义了雷达相对于父级（parent）坐标系的位姿。pose 属性的格式是 x y z roll pitch yaw，其中 x、y 和 z 是雷达相对于父级坐标系的位置，roll、pitch 和 yaw 是雷达相对于父级坐标系的旋转角度。</p></blockquote><blockquote><p>注意 xyz以米为单位, roll、pitch 和 yaw 的单位是弧度，如果你使用的是度数，你需要将它们转换为弧度。例如，45 度转换为弧度是 0.785398，15 度转换为弧度是 0.261799，135 度转换为弧度是 2.35619, 也可以像我一样用pi表示 <a href="https://www.ros.org/reps/rep-0103.html">ROS中的单位标准_ REP-0103 </a></p></blockquote><p><img src="/images/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/image.png" alt=" "></p><p><img src="/images/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/image-1.png"></p><p>查看tf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rqt_tf_tree rqt_tf_tree --ros-args -r /tf:=tf -r /tf_static:=tf_static </span><br></pre></td></tr></table></figure><p><img src="/./images/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/Robot.png" alt="alt text"></p><p>查看实车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch fzsd2025_robot_description robot_description.launch.py</span><br></pre></td></tr></table></figure><p><img src="/images/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/image-2.png"></p><h3 id="重新建图"><a href="#重新建图" class="headerlink" title="重新建图"></a>重新建图</h3><blockquote><p>此时需要重新建图定位 修改部分参数 否则车子是歪的</p></blockquote><p>修改 <code>pb2025_nav_bringup/config/</code>中的<code>nav2</code>文件 重力加速度设为正的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gravity:</span> [ <span class="number">0.0</span>, <span class="number">0.0</span> , <span class="number">9.8</span> ]     <span class="comment"># 倒装设置为 +9.8    </span></span><br><span class="line">    <span class="attr">gravity_init:</span> [ <span class="number">0.0</span>, <span class="number">0.0</span> , <span class="number">9.8</span> ]   <span class="comment">#mid3360单位为&#x27;g&#x27; 后期有问题得修改</span></span><br><span class="line">    <span class="comment"># gravity: [0.0, -4.9, -8.487]                   # gravity to be aligned # rpy = [0, pi/6, 0]</span></span><br><span class="line">    <span class="comment"># gravity_init: [0.0, -4.9, -8.487]              # preknown gravity in the first IMU body frame, use when imu_en is False or start from a non-stationary state</span></span><br></pre></td></tr></table></figure><p>运行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch pb2025_nav_bringup rm_sentry__launch.py \</span><br><span class="line">slam:=True \</span><br><span class="line">use_robot_state_pub:=True</span><br></pre></td></tr></table></figure><p>键盘控制机器人 平移 旋转</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rmoss_gz_base test_chassis_cmd.py --ros-args -r __ns:=/red_standard_robot1/robot_base -p v:=0.3 -p w:=0.3</span><br></pre></td></tr></table></figure><p>绝对角度控制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rmoss_gz_base test_gimbal_cmd.py --ros-args -r __ns:=/red_standard_robot1/robot_base</span><br></pre></td></tr></table></figure><p>射击</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rmoss_gz_base test_shoot_cmd.py --ros-args -r __ns:=/red_standard_robot1/robot_base</span><br></pre></td></tr></table></figure><p>结束运行会自动保存到 <code>pointlio/PCD/</code>目录下 默认名字为<code>scans</code> </p><p>查看点云图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install pcl-tools</span><br><span class="line">pcl_viewer -fc 255,255,255 -ax 3 scans.pcd</span><br></pre></td></tr></table></figure><p><img src="/images/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/image-3.png"></p><h3 id="pcd2pgm"><a href="#pcd2pgm" class="headerlink" title="pcd2pgm"></a>pcd2pgm</h3><p>新建工作空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LihanChen2004/pcd2pgm.git</span><br></pre></td></tr></table></figure><p>安装依赖 构建程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rosdep install -r --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y</span><br><span class="line">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=release</span><br></pre></td></tr></table></figure><p>pcd2pgm.yml参数解读和修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pcd2pgm:</span></span><br><span class="line">  <span class="attr">ros__parameters:</span></span><br><span class="line">    <span class="attr">pcd_file:</span> <span class="string">/home/whale/ros_ws/pcd2pgm/src/PCD/rmul_2025.pcd</span></span><br><span class="line">    <span class="comment"># odom_to_lidar_odom: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span><br><span class="line">    <span class="comment"># odom_to_lidar_odom: [-0.16, 0.0, -0.18, -0.523599, 0.0, -1.5707963] # PB数据</span></span><br><span class="line">    <span class="attr">odom_to_lidar_odom:</span> [ <span class="number">-0.066</span> , <span class="number">-0.106</span> , <span class="number">0.399</span> , <span class="number">3.1415926</span> , <span class="number">0.0</span> , <span class="number">3.1415926</span> ] <span class="comment"># FZSD数据到激光雷达的坐标变换（用于变换点云）</span></span><br><span class="line">    <span class="attr">flag_pass_through:</span> <span class="literal">false</span>                                        <span class="comment"># 是否使用 Pass Through 滤波器</span></span><br><span class="line">    <span class="attr">map_resolution:</span> <span class="number">0.05</span>                                            <span class="comment"># 地图分辨率</span></span><br><span class="line">    <span class="attr">map_topic_name:</span> <span class="string">map</span>                                             <span class="comment"># 发布地图的 ROS 话题名</span></span><br><span class="line">    <span class="attr">thre_radius:</span> <span class="number">0.1</span>                                                <span class="comment"># Radius Outlier 滤波器半径</span></span><br><span class="line">    <span class="attr">thre_z_max:</span> <span class="number">2.0</span>                                                 <span class="comment"># Z轴最大值（用于 Pass Through 滤波器）</span></span><br><span class="line">    <span class="attr">thre_z_min:</span> <span class="number">0.1</span>                                                 <span class="comment"># Z轴最小值（用于 Pass Through 滤波器）</span></span><br><span class="line">    <span class="attr">thres_point_count:</span> <span class="number">10</span>                                           <span class="comment"># 最小点数阈值（用于 Radius Outlier 滤波器）</span></span><br></pre></td></tr></table></figure><blockquote><p>修改PCD目录 和 <code>odom_to_lidar_odom</code> nav2_param 中的 robot_base_frame 机器人速度参考系到激光雷达的变换关系。 这里是 <code>gimbal_yaw</code> 变换值  </p></blockquote><p>运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run pcd2pgm pcd2pgm_launch.py</span><br></pre></td></tr></table></figure><p>保存栅格地图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run nav2_map_server map_saver_cli -f &lt;YOUR_MAP_NAME&gt;</span><br></pre></td></tr></table></figure><h3 id="安装-GIMP-修图"><a href="#安装-GIMP-修图" class="headerlink" title="安装 GIMP 修图"></a>安装 GIMP 修图</h3><p>进入 <a href="https://www.gimp.org/downloads/">GIMP官网</a> 安装</p><p>使用 flatpak 包管理器安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">778  flatpak install org.gimp.GIMP.flatpakref </span><br><span class="line">779  sudo apt install flatpak</span><br><span class="line">780  flatpak install org.gimp.GIMP.flatpakref </span><br><span class="line">781  flatpak remove  org.gimp.GIMP.flatpakref </span><br><span class="line">782  flatpak uninstall  org.gimp.GIMP.flatpakref </span><br></pre></td></tr></table></figure><p>感觉比较麻烦 没用过这个 搜索一番后决定直接apt安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gimp</span><br></pre></td></tr></table></figure><p>成功 ！</p><blockquote><p>有一个注意的点 直接另存为导出没有<code>.pgm</code> 选项 需要使用左上角文件 -&gt;  <code>export</code> 选项(导出为) 才可选择多种格式 也可以快捷键 <code>Shift+Ctrl+E</code> 导出</p></blockquote><h3 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h3><p>将<code>rmul_2025.pcd</code> 放到 pb2025_nav_bringup&#x2F;pcd 的 reality 或 simulation 文件夹内</p><p>将<code>rmul_2025.pgm</code> 和 <code>rmul_2025.yaml</code> 文件移动到 pb2025_nav_bringup&#x2F;map 中的 reality 或 simulation 文件夹内</p><blockquote><p><code>rmul_2025.yaml</code> 文件中的 image 字段名称需要修改为 <code>rmul_2025.pgm</code></p></blockquote><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure><h2 id="局域网对战"><a href="#局域网对战" class="headerlink" title="局域网对战"></a>局域网对战</h2><p><a href="http://localhost:5000/">操作手端口</a> <a href="http://localhost:5000/">http://localhost:5000/</a>  修改为对应端口即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 src/rmu_gazebo_simulator/scripts/player_web/main_no_vision.py</span><br></pre></td></tr></table></figure><p>可能遇到报错安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-engineio</span><br><span class="line">pip3 install python-socketio flask-socketio</span><br><span class="line">pip3 install flask-cors</span><br></pre></td></tr></table></figure><p>重新运行即可</p><h1 id="实车部署"><a href="#实车部署" class="headerlink" title="实车部署"></a>实车部署</h1><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><h3 id="手动输出速度"><a href="#手动输出速度" class="headerlink" title="手动输出速度"></a>手动输出速度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /cmd_vel geometry_msgs/msg/Twist &quot;&#123;linear: &#123;x: 0.5, y: 0.0, z: 0.0&#125;, angular: &#123;x: 0.0, y: 0.0, z: 0.2&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="监控串口输出"><a href="#监控串口输出" class="headerlink" title="监控串口输出"></a>监控串口输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /dev/ttyUSB0 | hexdump -C</span><br></pre></td></tr></table></figure><h3 id="查看具体订阅关系"><a href="#查看具体订阅关系" class="headerlink" title="查看具体订阅关系"></a>查看具体订阅关系</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic info /red_standard_robot1/cmd_vel</span><br></pre></td></tr></table></figure><h2 id="串口通信-cutecom"><a href="#串口通信-cutecom" class="headerlink" title="串口通信 cutecom"></a>串口通信 cutecom</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cutecom</span><br></pre></td></tr></table></figure><h1 id="通信standard-robot-pp-ros2"><a href="#通信standard-robot-pp-ros2" class="headerlink" title="通信standard_robot_pp_ros2"></a><a href="https://github.com/SMBU-PolarBear-Robotics-Team/standard_robot_pp_ros2.git">通信standard_robot_pp_ros2</a></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SMBU-PolarBear-Robotics-Team/standard_robot_pp_ros2.git</span><br><span class="line">sudo apt install python3-vcstool</span><br><span class="line"></span><br><span class="line">vcs import --input standard_robot_pp_ros2/.github/dependency.repos</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请查看 vcs 导入的子仓库的 README，并按照其说明 递进地安装子仓库的依赖项。</span></span><br><span class="line">rosdep install -r --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y</span><br><span class="line"></span><br><span class="line">./script/create_udev_rules.sh</span><br><span class="line"></span><br><span class="line">colcon build --symlink-install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需开启 RViz 可视化，请添加 use_rviz:=True 参数。</span></span><br><span class="line">ros2 launch standard_robot_pp_ros2 standard_robot_pp_ros2.launch.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="通信-Vision-serial-driver"><a href="#通信-Vision-serial-driver" class="headerlink" title="通信 Vision serial driver"></a>通信 Vision serial driver</h1><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p><code>vision serial driver node</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../include/vision_serial_driver/vision_serial_driver_node.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">serial_driver_node::<span class="built_in">serial_driver_node</span>(std::string device_name, std::string node_name)</span><br><span class="line">    <span class="comment">// : rclcpp::Node(node_name), vArray&#123;new visionArray&#125;, rArray&#123;new robotArray&#125;,</span></span><br><span class="line">    : rclcpp::<span class="built_in">Node</span>(node_name), rArray&#123;<span class="keyword">new</span> robotArray&#125;, nArray&#123;<span class="keyword">new</span> navArray&#125;,</span><br><span class="line">      dev_name&#123;<span class="keyword">new</span> std::<span class="built_in">string</span>(device_name)&#125;,</span><br><span class="line">      portConfig&#123;<span class="keyword">new</span> <span class="built_in">SerialPortConfig</span>(<span class="number">115200</span>, FlowControl::NONE, Parity::NONE, StopBits::ONE)&#125;, ctx&#123;<span class="built_in">IoContext</span>(<span class="number">2</span>)&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">RCLCPP_INFO</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;节点:/%s启动&quot;</span>, node_name.<span class="built_in">c_str</span>());</span><br><span class="line">  muzzleSpeedFilter.Size=<span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 清零</span></span><br><span class="line">  <span class="comment">// memset(vArray-&gt;array, 0, sizeof(visionArray));</span></span><br><span class="line">  <span class="built_in">memset</span>(rArray-&gt;array, <span class="number">0</span>, <span class="built_in">sizeof</span>(robotArray));</span><br><span class="line">  <span class="built_in">memset</span>(nArray-&gt;array, <span class="number">0</span>, <span class="built_in">sizeof</span>(navArray));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置重启计时器1hz.</span></span><br><span class="line">  reopenTimer = <span class="built_in">create_wall_timer</span>(</span><br><span class="line">      <span class="number">1</span>s, std::<span class="built_in">bind</span>(&amp;serial_driver_node::serial_reopen_callback, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置发布计时器500hz.</span></span><br><span class="line">  publishTimer = <span class="built_in">create_wall_timer</span>(</span><br><span class="line">      <span class="number">2</span>ms, std::<span class="built_in">bind</span>(&amp;serial_driver_node::robot_callback, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TF broadcaster</span></span><br><span class="line">  timestamp_offset_ = <span class="keyword">this</span>-&gt;<span class="built_in">declare_parameter</span>(<span class="string">&quot;timestamp_offset&quot;</span>, <span class="number">0.006</span>);</span><br><span class="line">  tf_broadcaster_ = std::<span class="built_in">make_unique</span>&lt;tf2_ros::TransformBroadcaster&gt;(*<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Detect parameter client</span></span><br><span class="line">  <span class="comment">// detector_param_client_ = std::make_shared&lt;rclcpp::AsyncParametersClient&gt;(this, &quot;armor_detector&quot;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发布Robot信息.</span></span><br><span class="line">  publisher = <span class="built_in">create_publisher</span>&lt;vision_interfaces::msg::Robot&gt;(</span><br><span class="line">      <span class="string">&quot;/serial_driver/robot&quot;</span>, rclcpp::<span class="built_in">SensorDataQoS</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 订阅AutoAim信息.</span></span><br><span class="line">  <span class="comment">// autoAimSub = create_subscription&lt;vision_interfaces::msg::AutoAim&gt;(</span></span><br><span class="line">  <span class="comment">//     &quot;/serial_driver/aim_target&quot;, rclcpp::SensorDataQoS(), std::bind(&amp;serial_driver_node::auto_aim_callback, this, std::placeholders::_1));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//订阅导航信息.</span></span><br><span class="line">  navSub = <span class="built_in">create_subscription</span>&lt;geometry_msgs::msg::Twist&gt;(</span><br><span class="line">    <span class="comment">// &quot;/red_standard_robot1/cmd_vel&quot;,  // 确保话题名称与实际一致</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;/red_standard_robot1/cmd_vel&quot;</span>,</span><br><span class="line">    <span class="comment">// &quot;/cmd_vel&quot;,</span></span><br><span class="line">    rclcpp::<span class="built_in">SensorDataQoS</span>(),</span><br><span class="line">    std::<span class="built_in">bind</span>(&amp;serial_driver_node::nav_callback, <span class="keyword">this</span>, std::placeholders::_1)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 设置串口读取线程.</span></span><br><span class="line">  serialReadThread = std::<span class="built_in">thread</span>(&amp;serial_driver_node::serial_read_thread, <span class="keyword">this</span>);</span><br><span class="line">  serialReadThread.<span class="built_in">detach</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serial_driver_node::~<span class="built_in">serial_driver_node</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">is_open</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serial_driver_node::serial_reopen_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 串口失效时尝试重启</span></span><br><span class="line">  <span class="keyword">if</span> (!isOpen)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">RCLCPP_WARN</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;重启串口:%s...&quot;</span>, dev_name-&gt;<span class="built_in">c_str</span>());</span><br><span class="line">      serialDriver.<span class="built_in">init_port</span>(*dev_name, *portConfig);</span><br><span class="line">      serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">open</span>();</span><br><span class="line">      isOpen = serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">is_open</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> std::system_error &amp;error)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">RCLCPP_ERROR</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;打开串口:%s失败&quot;</span>, dev_name-&gt;<span class="built_in">c_str</span>());</span><br><span class="line">      isOpen = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isOpen)</span><br><span class="line">      <span class="built_in">RCLCPP_INFO</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;打开串口:%s成功&quot;</span>, dev_name-&gt;<span class="built_in">c_str</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serial_driver_node::serial_read_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (rclcpp::<span class="built_in">ok</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">head</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">robotData</span><span class="params">(<span class="keyword">sizeof</span>(rArray-&gt;array) - <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (isOpen)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">receive</span>(head);</span><br><span class="line">        <span class="keyword">if</span> (head[<span class="number">0</span>] == <span class="number">0xA5</span> &amp;&amp; head[<span class="number">1</span>] == <span class="number">0x00</span>)</span><br><span class="line">        &#123; <span class="comment">// 包头为0xA5</span></span><br><span class="line">          serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">receive</span>(robotData);</span><br><span class="line">          robotData.<span class="built_in">resize</span>(<span class="built_in">sizeof</span>(rArray-&gt;array));</span><br><span class="line">          robotData.<span class="built_in">insert</span>(robotData.<span class="built_in">begin</span>(), head[<span class="number">1</span>]);</span><br><span class="line">          robotData.<span class="built_in">insert</span>(robotData.<span class="built_in">begin</span>(), head[<span class="number">0</span>]);</span><br><span class="line">          <span class="type">float</span> lastSpeed = rArray-&gt;msg.muzzleSpeed;</span><br><span class="line">          <span class="built_in">memcpy</span>(rArray-&gt;array, robotData.<span class="built_in">data</span>(), <span class="built_in">sizeof</span>(rArray-&gt;array));</span><br><span class="line">          rArray-&gt;msg.muzzleSpeed = rArray-&gt;msg.muzzleSpeed &gt; <span class="number">15</span> ? rArray-&gt;msg.muzzleSpeed : <span class="number">15.0</span>;</span><br><span class="line">          <span class="keyword">if</span>(rArray-&gt;msg.muzzleSpeed != lastSpeed)muzzleSpeedFilter.<span class="built_in">update</span>(rArray-&gt;msg.muzzleSpeed);</span><br><span class="line">          <span class="comment">// RCLCPP_INFO(get_logger(), &quot;读取串口.&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">catch</span> (<span class="type">const</span> std::exception &amp;error)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_ERROR</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;读取串口时发生错误.&quot;</span>);</span><br><span class="line">        isOpen = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serial_driver_node::serial_write</span><span class="params">(<span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">tempData</span><span class="params">(data, data + len)</span></span>;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    serialDriver.<span class="built_in">port</span>()-&gt;<span class="built_in">send</span>(tempData);</span><br><span class="line">    <span class="comment">// RCLCPP_INFO(get_logger(), &quot;写入串口.&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span> (<span class="type">const</span> std::exception &amp;error)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">RCLCPP_ERROR</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;写入串口时发生错误.&quot;</span>);</span><br><span class="line">    isOpen = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serial_driver_node::nav_callback</span><span class="params">(<span class="type">const</span> geometry_msgs::msg::Twist::SharedPtr vMsg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isOpen)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 假设 nArray-&gt;msg 是一个结构体，包含 vx、vy 和 wz 成员</span></span><br><span class="line">    nArray-&gt;msg.vx = vMsg-&gt;linear.x;</span><br><span class="line">    nArray-&gt;msg.vy = vMsg-&gt;linear.y;</span><br><span class="line">    nArray-&gt;msg.wz = vMsg-&gt;angular.z;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建指令字符串，包含vx, vy, wz</span></span><br><span class="line">    std::string command = <span class="string">&quot;Vx:&quot;</span> +</span><br><span class="line">                          std::<span class="built_in">to_string</span>(nArray-&gt;msg.vx) + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                          <span class="string">&quot;Vy:&quot;</span> + std::<span class="built_in">to_string</span>(nArray-&gt;msg.vy) + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                          <span class="string">&quot;Wz:&quot;</span> + std::<span class="built_in">to_string</span>(nArray-&gt;msg.wz) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过串口发送指令</span></span><br><span class="line">    <span class="built_in">serial_write</span>(nArray-&gt;array, <span class="built_in">sizeof</span>(nArray-&gt;array));</span><br><span class="line">    <span class="comment">// serial_write(reinterpret_cast&lt;uint8_t*&gt;(command.data()), command.size());</span></span><br><span class="line">    <span class="built_in">RCLCPP_DEBUG</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;Sent nav: %s&quot;</span>, command.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void serial_driver_node::auto_aim_callback(const vision_interfaces::msg::AutoAim vMsg)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//  if (isOpen)</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     vArray-&gt;msg.head = 0xA5;</span></span><br><span class="line"><span class="comment">//     vArray-&gt;msg.fire = vMsg.fire;</span></span><br><span class="line"><span class="comment">//     vArray-&gt;msg.aimPitch = vMsg.aim_pitch;</span></span><br><span class="line"><span class="comment">//     vArray-&gt;msg.aimYaw = vMsg.aim_yaw;</span></span><br><span class="line"><span class="comment">//     vArray-&gt;msg.tracking = vMsg.tracking;</span></span><br><span class="line"><span class="comment">//     RCLCPP_INFO(get_logger(), &quot;aimYaw_111:%05.2f/aimPitch_111:%05.2f&quot;, vArray-&gt;msg.aimYaw, vArray-&gt;msg.aimPitch);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     serial_write(vArray-&gt;array, sizeof(vArray-&gt;array));</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//    /*</span></span><br><span class="line"><span class="comment">//     inf_visionMsg packet;</span></span><br><span class="line"><span class="comment">//     packet.msg.head = 0xA5;</span></span><br><span class="line"><span class="comment">//     packet.msg.tracking = vMsg.tracking;</span></span><br><span class="line"><span class="comment">//     packet.msg.fire = vMsg.fire;</span></span><br><span class="line"><span class="comment">//     packet.msg.aimPitch = vMsg.aim_pitch;</span></span><br><span class="line"><span class="comment">//     packet.msg.aimYaw = vMsg.aim_yaw;</span></span><br><span class="line"><span class="comment">//     std::vector&lt;uint8_t&gt; data = toVector(packet);</span></span><br><span class="line"><span class="comment">//     serial_driver_-&gt;port()-&gt;send(data);</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serial_driver_node::robot_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isOpen)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">auto</span> msg = vision_interfaces::msg::<span class="built_in">Robot</span>();</span><br><span class="line">      <span class="comment">// msg.foe_color=rArray-&gt;msg.foeColor==1?1:0;</span></span><br><span class="line">      msg.mode = rArray-&gt;msg.mode;</span><br><span class="line">      <span class="comment">// msg.foe_color = rArray-&gt;msg.foeColor;</span></span><br><span class="line">      msg.self_yaw = rArray-&gt;msg.robotYaw;</span><br><span class="line">      msg.self_pitch = rArray-&gt;msg.robotPitch;</span><br><span class="line">      <span class="comment">// double muzzle_speed = 15.0;</span></span><br><span class="line">      <span class="comment">// muzzleSpeedFilter.get_avg(muzzle_speed);</span></span><br><span class="line">      <span class="comment">// msg.muzzle_speed = muzzle_speed;</span></span><br><span class="line">      publisher-&gt;<span class="built_in">publish</span>(msg);</span><br><span class="line"></span><br><span class="line">      geometry_msgs::msg::TransformStamped t;</span><br><span class="line">      timestamp_offset_ = <span class="keyword">this</span>-&gt;<span class="built_in">get_parameter</span>(<span class="string">&quot;timestamp_offset&quot;</span>).<span class="built_in">as_double</span>();</span><br><span class="line">      t.header.stamp = <span class="keyword">this</span>-&gt;<span class="built_in">now</span>() + rclcpp::Duration::<span class="built_in">from_seconds</span>(timestamp_offset_);</span><br><span class="line">      t.header.frame_id = <span class="string">&quot;odom&quot;</span>;</span><br><span class="line">      t.child_frame_id = <span class="string">&quot;gimbal_link&quot;</span>;</span><br><span class="line">      tf2::Quaternion q;</span><br><span class="line">      q.<span class="built_in">setRPY</span>(<span class="number">0</span>, -rArray-&gt;msg.robotPitch*<span class="number">3.1415926535</span>/<span class="number">180.0</span>, rArray-&gt;msg.robotYaw*<span class="number">3.1415926535</span>/<span class="number">180.0</span>);</span><br><span class="line">      t.transform.rotation = tf2::<span class="built_in">toMsg</span>(q);</span><br><span class="line">      tf_broadcaster_-&gt;<span class="built_in">sendTransform</span>(t);</span><br><span class="line">      <span class="built_in">RCLCPP_INFO</span>(<span class="built_in">get_logger</span>(), <span class="string">&quot;self_yaw:%05.2f/self_pitch:%05.2f&quot;</span>, msg.self_yaw, msg.self_pitch);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//     if (!initial_set_param_ || msg.foe_color != previous_receive_color_) &#123;</span></span><br><span class="line">          </span><br><span class="line">  <span class="comment">//       auto param = rclcpp::Parameter(&quot;detect_color&quot;, msg.foe_color);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//       if (!detector_param_client_-&gt;service_is_ready()) &#123;</span></span><br><span class="line">  <span class="comment">//         RCLCPP_WARN(get_logger(), &quot;Service not ready, skipping parameter set&quot;);</span></span><br><span class="line">  <span class="comment">//         return;</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//       if (</span></span><br><span class="line">  <span class="comment">//         !set_param_future_.valid() ||</span></span><br><span class="line">  <span class="comment">//         set_param_future_.wait_for(std::chrono::seconds(0)) == std::future_status::ready) &#123;</span></span><br><span class="line">  <span class="comment">//         RCLCPP_INFO(get_logger(), &quot;Setting detect_color to %ld...&quot;, param.as_int());</span></span><br><span class="line">  <span class="comment">//         set_param_future_ = detector_param_client_-&gt;set_parameters(</span></span><br><span class="line">  <span class="comment">//           &#123;param&#125;, [this, param](const ResultFuturePtr &amp; results) &#123;</span></span><br><span class="line">  <span class="comment">//             for (const auto &amp; result : results.get()) &#123;</span></span><br><span class="line">  <span class="comment">//               if (!result.successful) &#123;</span></span><br><span class="line">  <span class="comment">//                 RCLCPP_ERROR(get_logger(), &quot;Failed to set parameter: %s&quot;, result.reason.c_str());</span></span><br><span class="line">  <span class="comment">//                 return;</span></span><br><span class="line">  <span class="comment">//               &#125;</span></span><br><span class="line">  <span class="comment">//             &#125;</span></span><br><span class="line">  <span class="comment">//             RCLCPP_INFO(get_logger(), &quot;Successfully set detect_color to %ld!&quot;, param.as_int());</span></span><br><span class="line">  <span class="comment">//             initial_set_param_ = true;</span></span><br><span class="line">  <span class="comment">//           &#125;);</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//       previous_receive_color_ = msg.foe_color;</span></span><br><span class="line"><span class="comment">// //RCLCPP_INFO(get_logger(), &quot;foe_color:%u&quot;, msg.foe_color);</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//     RCLCPP_INFO(get_logger(), &quot;foe_color:%u&quot;, msg.foe_color);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> std::exception &amp;ex)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">RCLCPP_ERROR_THROTTLE</span>(</span><br><span class="line">          <span class="built_in">get_logger</span>(), *<span class="built_in">get_clock</span>(), <span class="number">20</span>, <span class="string">&quot;处理串口数据时发生错误: %s&quot;</span>, ex.<span class="built_in">what</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">  <span class="comment">// std::string dev_name = &quot;/dev/ttyUSB0&quot;;</span></span><br><span class="line">  <span class="comment">// std::string dev_name = &quot;/dev/pts/7&quot;;</span></span><br><span class="line">  std::string dev_name = <span class="string">&quot;/dev/ttyACM0&quot;</span>;</span><br><span class="line">  std::shared_ptr&lt;serial_driver_node&gt; node = std::<span class="built_in">make_shared</span>&lt;serial_driver_node&gt;(dev_name, <span class="string">&quot;vision_serial_driver&quot;</span>);</span><br><span class="line">  rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">  rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include 内部添加 </p><p><code>packet.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SERIAL_PACKET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERIAL_PACKET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> visionMsg inf_visionMsg</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> robotMsg inf_robotMsg</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> navMsg inf_navMsg</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inf_navMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> head;</span><br><span class="line">    <span class="type">float</span> vx;  </span><br><span class="line">    <span class="type">float</span> vy;  </span><br><span class="line">    <span class="type">float</span> wz;  </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct sentry_visionMsg</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     uint8_t head;</span></span><br><span class="line"><span class="comment">//     uint8_t fire;   // 开火标志</span></span><br><span class="line"><span class="comment">//     float aimYaw;   // 目标Yaw</span></span><br><span class="line"><span class="comment">//     float aimPitch; // 目标Pitch</span></span><br><span class="line"><span class="comment">//     float linearX;  // 线速度x</span></span><br><span class="line"><span class="comment">//     float linearY;  // 线速度y</span></span><br><span class="line"><span class="comment">//     float angularZ; // 角速度z</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// struct sentry_robotMsg</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     uint8_t head;</span></span><br><span class="line"><span class="comment">//     uint8_t foeColor;  // 敌方颜色 0-blue 1-red</span></span><br><span class="line"><span class="comment">//     float robotYaw;    // 自身Yaw</span></span><br><span class="line"><span class="comment">//     float robotPitch;  // 自身Pitch</span></span><br><span class="line"><span class="comment">//     float muzzleSpeed; // 弹速</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inf_visionMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> head;</span><br><span class="line">    <span class="type">uint8_t</span> fire;     <span class="comment">// 开火标志</span></span><br><span class="line">    <span class="type">uint8_t</span> tracking; <span class="comment">// 跟踪标志</span></span><br><span class="line">    <span class="type">float</span> aimYaw;     <span class="comment">// 目标Yaw</span></span><br><span class="line">    <span class="type">float</span> aimPitch;   <span class="comment">// 目标Pitch</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inf_robotMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> head;</span><br><span class="line">    <span class="type">uint8_t</span> mode;</span><br><span class="line">    <span class="type">uint8_t</span> foeColor;  <span class="comment">// 敌方颜色 0-blue 1-red</span></span><br><span class="line">    <span class="type">float</span> robotYaw;    <span class="comment">// 自身Yaw</span></span><br><span class="line">    <span class="type">float</span> robotPitch;  <span class="comment">// 自身Pitch</span></span><br><span class="line">    <span class="type">float</span> muzzleSpeed; <span class="comment">// 弹速</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero_visionMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> head;</span><br><span class="line">    <span class="type">uint8_t</span> fire;     <span class="comment">// 开火标志</span></span><br><span class="line">    <span class="type">uint8_t</span> tracking; <span class="comment">// 跟踪标志</span></span><br><span class="line">    <span class="type">float</span> aimYaw;     <span class="comment">// 目标Yaw</span></span><br><span class="line">    <span class="type">float</span> aimPitch;   <span class="comment">// 目标Pitch</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero_robotMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> head;</span><br><span class="line">    <span class="type">uint8_t</span> foeColor;  <span class="comment">// 敌方颜色 0-blue 1-red</span></span><br><span class="line">    <span class="type">float</span> robotYaw;    <span class="comment">// 自身Yaw</span></span><br><span class="line">    <span class="type">float</span> robotPitch;  <span class="comment">// 自身Pitch</span></span><br><span class="line">    <span class="type">float</span> muzzleSpeed; <span class="comment">// 弹速</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">navArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">navMsg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> <span class="built_in">array</span>[<span class="keyword">sizeof</span>(<span class="keyword">struct</span> navMsg)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">visionArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">visionMsg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> <span class="built_in">array</span>[<span class="keyword">sizeof</span>(<span class="keyword">struct</span> visionMsg)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">robotArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">robotMsg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> <span class="built_in">array</span>[<span class="keyword">sizeof</span>(<span class="keyword">struct</span> robotMsg)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// SERIAL_PACKET_H</span></span></span><br></pre></td></tr></table></figure><p><code>vision serial driver node</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> VISION_SERIAL_DRIVER_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VISION_SERIAL_DRIVER_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rclcpp/rclcpp.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;serial_driver/serial_driver.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vision_interfaces/msg/auto_aim.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vision_interfaces/msg/robot.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf2_ros/transform_broadcaster.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf2/LinearMath/Quaternion.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf2_geometry_msgs/tf2_geometry_msgs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;avgFilter.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;packet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">using namespace drivers::serial_driver;</span><br><span class="line">using namespace <span class="built_in">std</span>::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">serial_driver_node</span> :</span> public rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @brief 串口驱动节点构造函数</span></span><br><span class="line"><span class="comment">    @param[in] device_name 串口名称</span></span><br><span class="line"><span class="comment">    @param[in] node_name 节点名称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    serial_driver_node(<span class="built_in">std</span>::<span class="built_in">string</span> device_name, <span class="built_in">std</span>::<span class="built_in">string</span> node_name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@brief 串口驱动节点析构函数*/</span></span><br><span class="line">    ~serial_driver_node();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="comment">/*@brief 串口重启回调函数*/</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">serial_reopen_callback</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@brief 串口读取线程函数*/</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">serial_read_thread</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@brief 串口写入函数*/</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">serial_write</span><span class="params">(<span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @brief 自瞄回调函数</span></span><br><span class="line"><span class="comment">    @param vMsg 自瞄信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">auto_aim_callback</span><span class="params">(<span class="type">const</span> vision_interfaces::msg::AutoAim vMsg)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@brief 导航回调函数 */</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">nav_callback</span><span class="params">(<span class="type">const</span> geometry_msgs::msg::Twist::SharedPtr msg)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@brief 机器人状态回调函数*/</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">robot_callback</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    visionArray *vArray;</span><br><span class="line">    robotArray *rArray;</span><br><span class="line">    navArray *nArray;</span><br><span class="line">    avgFilter muzzleSpeedFilter;</span><br><span class="line">    <span class="type">bool</span> isOpen = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> *dev_name;</span><br><span class="line">    <span class="built_in">std</span>::thread serialReadThread;</span><br><span class="line">    SerialPortConfig *portConfig;</span><br><span class="line">    IoContext ctx;</span><br><span class="line">    SerialDriver serialDriver = SerialDriver(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Param client to set detect_color</span></span><br><span class="line">    using ResultFuturePtr = <span class="built_in">std</span>::shared_future&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;rcl_interfaces::msg::SetParametersResult&gt;&gt;;</span><br><span class="line">    <span class="type">bool</span> initial_set_param_ = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">uint8_t</span> previous_receive_color_ = <span class="number">0</span>;</span><br><span class="line">    rclcpp::AsyncParametersClient::SharedPtr detector_param_client_;</span><br><span class="line">    ResultFuturePtr set_param_future_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Broadcast tf from odom to gimbal_link</span></span><br><span class="line">    <span class="type">double</span> timestamp_offset_ = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;tf2_ros::TransformBroadcaster&gt; tf_broadcaster_;</span><br><span class="line">    rclcpp::TimerBase::SharedPtr reopenTimer;</span><br><span class="line">    rclcpp::TimerBase::SharedPtr publishTimer;</span><br><span class="line">    rclcpp::Publisher&lt;vision_interfaces::msg::Robot&gt;::SharedPtr publisher;</span><br><span class="line">    rclcpp::Subscription&lt;vision_interfaces::msg::AutoAim&gt;::SharedPtr autoAimSub;</span><br><span class="line">    rclcpp::Subscription&lt;geometry_msgs::msg::Twist&gt;::SharedPtr navSub;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// VISION_SERIAL_DRIVER_HPP</span></span></span><br></pre></td></tr></table></figure><p><code>avgFilter.hpp</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RM_CPP_AVGFILTER_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RM_CPP_AVGFILTER_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">avgFilter</span> &#123;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">double</span>&gt; buffer;</span><br><span class="line">    <span class="type">double</span> avg=<span class="number">0</span>;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">size_t</span> Size;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">double</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(buffer.size()==Size)&#123;</span><br><span class="line">            buffer.erase(buffer.begin());</span><br><span class="line">            buffer.emplace_back(data);</span><br><span class="line">            avg=avg-buffer[<span class="number">0</span>]/Size;</span><br><span class="line">            avg=avg+buffer[Size<span class="number">-1</span>]/Size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            buffer.emplace_back(data);</span><br><span class="line">            avg=avg*(<span class="type">int</span>)(buffer.size()<span class="number">-1</span>)/(<span class="type">int</span>)buffer.size()+buffer[buffer.size()<span class="number">-1</span>]/(<span class="type">int</span>)buffer.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">get_avg</span><span class="params">(<span class="type">double</span> &amp;data)</span> <span class="type">const</span> &#123;</span><br><span class="line">        data = avg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//RM_CPP_AVGFILTER_HPP</span></span></span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="虚拟串口-socat"><a href="#虚拟串口-socat" class="headerlink" title="虚拟串口 socat"></a>虚拟串口 socat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyserial</span><br><span class="line">socat -d -d pty,b115200 pty,b115200</span><br></pre></td></tr></table></figure><h3 id="手动发速度"><a href="#手动发速度" class="headerlink" title="手动发速度"></a>手动发速度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /red_standard_robot1/cmd_vel geometry_msgs/msg/Twist &quot;&#123;&#x27;linear&#x27;: &#123;&#x27;x&#x27;: 0.6&#125;, &#x27;angular&#x27;: &#123;&#x27;z&#x27;: 0.1&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="串口权限"><a href="#串口权限" class="headerlink" title="串口权限"></a>串口权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 666 /dev/ttyACM0</span><br></pre></td></tr></table></figure><p>查看输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -v /dev/pts/8</span><br></pre></td></tr></table></figure><p>启用通讯节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run vision_serial_driver vision_serial_driver_node /dev/ttyACM0</span><br></pre></td></tr></table></figure><p>查看串口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /dev/tty*</span><br></pre></td></tr></table></figure><p>查看速度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic echo /red_standard_robot1/cmd_vel</span><br></pre></td></tr></table></figure><h3 id="一些指令"><a href="#一些指令" class="headerlink" title="一些指令"></a>一些指令</h3><h2 id="安装-slam-tool"><a href="#安装-slam-tool" class="headerlink" title="安装 slam_tool"></a>安装 slam_tool</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-humble-slam-toolbox</span><br></pre></td></tr></table></figure><h2 id="发布导航坐标-nav2-goal"><a href="#发布导航坐标-nav2-goal" class="headerlink" title="发布导航坐标 nav2 goal"></a>发布导航坐标 nav2 goal</h2><blockquote><p>注意xyz用逗号隔开</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /red_standard_robot1/goal_pose geometry_msgs/msg/PoseStamped &quot;&#123;header: &#123;stamp: &#123;sec: 0&#125;, frame_id: &#x27;map&#x27;&#125;, pose: &#123;position: &#123;x: 1.0, y: 1.0, z: 0.0&#125;, orientation: &#123;w: 1.0&#125;&#125;&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /red_standard_robot1/goal_pose geometry_msgs/msg/PoseStamped &quot;&#123;header: &#123;stamp: &#123;sec: 0&#125;, frame_id: &#x27;map&#x27;&#125;, pose: &#123;position: &#123;  x: 4.607597827911377, y: -3.4108667373657227 , z: 0.001499176025390625 &#125;, orientation: &#123;w: 1.0&#125;&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="建图后查看坐标"><a href="#建图后查看坐标" class="headerlink" title="建图后查看坐标"></a>建图后查看坐标</h2><p>在rviz中打开 publish point 点击你要的点 同时</p><p>要先开publish point才有topic 不然没有<br>打开终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic echo /clicked_point</span><br></pre></td></tr></table></figure><h2 id="电控-控制导航"><a href="#电控-控制导航" class="headerlink" title="电控 控制导航"></a>电控 控制导航</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /nav2_command std_msgs/msg/String &quot;data: &#x27;state_1&#x27;&quot;</span><br></pre></td></tr></table></figure><p>转换整形</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /nav2_command std_msgs/msg/Int8 &quot;&#123;data: 0&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="关闭重定位"><a href="#关闭重定位" class="headerlink" title="关闭重定位"></a>关闭重定位</h2><p>进入 <code>locallization_launch.py</code> 文件</p><p>关闭重定位node 和ComposableNode重新编译</p><h2 id="录制-rosbag"><a href="#录制-rosbag" class="headerlink" title="录制 rosbag"></a>录制 rosbag</h2><p>北极熊教程</p><p>(<a href="https://flowus.cn/lihanchen/share/cd6f2a40-4376-4d57-b9fa-5f22c866b0ba">https://flowus.cn/lihanchen/share/cd6f2a40-4376-4d57-b9fa-5f22c866b0ba</a>)</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><blockquote><p>感谢各路大佬的帮忙 以下为部分借鉴参考文献</p></blockquote><p><a href="https://whaltze.github.io/2024/09/22/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/">WHALTZE - 基于Cartographer算法的RPLIDAR激光雷达导航</a></p><p><a href="https://github.com/SCAU-RM-NAV/rm2023_auto_sentry_ws/tree/main">RM2023华南农业大学Taurus机器人战队哨兵定位导航算法与仿真开源</a></p><p><a href="https://github.com/LihanChen2004/pcd2pgm/tree/master">pcd2pgm</a></p><p><a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_sentry_nav">pb2025_sentry_nav</a></p><p><a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_sentry_nav/wiki/%E5%BB%BA%E5%9B%BE%E6%8C%87%E5%8D%97">pb2025_sentry_nav 建图指南</a></p><p><a href="https://github.com/SMBU-PolarBear-Robotics-Team/standard_robot_pp_ros2">pb2025_sentry_nav standard_robot_pp_ros2</a></p><p><a href="https://aafxu50hc35.feishu.cn/docx/HRh5dOjrMor4maxi3Xscvff6nCh">pb2025_sentry_nav 上下位机串口通信数据协议</a></p><p><a href="https://github.com/SMBU-PolarBear-Robotics-Team/rmu_gazebo_simulator">pb2025_sentry_nav rmu_gazebo_simulator</a></p><p><a href="https://github.com/SMBU-PolarBear-Robotics-Team/pb2025_sentry_behavior">SMBU-PolarBear-Robotics-Team pb2025_sentry_behavior</a></p><p><a href="https://blog.csdn.net/Sixfourjie/article/details/142460043?spm=1001.2014.3001.5501">CSDN-ROS串口通讯</a></p><p><a href="https://blog.csdn.net/weixin_45417246/article/details/115587952?fromshare=blogdetail&sharetype=blogdetail&sharerId=115587952&sharerefer=PC&sharesource=Sixfourjie&sharefrom=from_link">CSDN -【ROS、STM32】ROS与STM32通信</a></p><p><a href="https://blog.csdn.net/m0_71523511/article/details/140759161">CSDN - ⑤【从0制作自己的ros导航小车：上、下位机通信篇】上、下位机串口DMA通信</a></p><p><a href="https://blog.csdn.net/m0_71523511/article/details/140782007">CSDN - ⑨【从0制作自己的ros导航小车：上位机篇】04、使用gmapping建图</a></p><p><a href="https://sjtu-robomaster-team.github.io/">云汉交龙 博客 上海交通大学RoboMaster交龙战队博客</a></p><p><a href="https://github.com/SJTU-RoboMaster-Team/SJTU-RoboMaster-Team.github.io">上海交通大学RoboMaster交龙战队博客仓库</a></p><p><a href="https://github.com/chenjunnn/rm_serial_driver/tree/main">rm_serial_driver RoboMaster 视觉系统与电控系统的串口通讯模块</a></p><p><a href="https://github.com/Wangben1019/KDRobot_RM2023Sentry_Navigation?tab=readme-ov-file">河北科技大学机器人战队Actor&amp;Thinker RM2023哨兵导航部分代码</a></p><p><a href="https://github.com/Wangben1019/-Autonomous-Exploration-Development-Environment-and-the-Planning-Algorithms">论文翻译：自主探索开发环境与规划算法</a></p><p><a href="https://arxiv.org/pdf/2110.14573">论文地址 Autonomous Exploration Development Environment and the Planning Algorithms</a></p><p><a href="https://github.com/LihanChen2004/costmap_converter/tree/fdb7cdb85d43fc4cda139409a6bb393ec976bc36">costmap_converter ROS Package 成本地图转换器 ROS 包</a></p><p><a href="https://github.com/PointCloudLibrary/pcl">Point Cloud Library  点云库 PCL</a></p><p><a href="https://github.com/xiaoming-sun6/sw2urdf_ros2/tree/V1.0.0">sw2urdf_ros2</a></p><p><a href="https://blog.csdn.net/qq_42688495/article/details/118568021">CSDN - 机器人自主导航 | ROS与移动底盘通信</a></p><p><a href="https://github.com/CSU-FYT-Vision/FYT2024_vision">中南大学FYT战队24赛季视觉项目主仓库</a></p><p><a href="https://github.com/SanZoom/RM2022-Infantry-Vision">IRobot 战队 2022年RM比赛中的步兵视觉代码</a></p><p><a href="https://github.com/TigerVNC/tigervnc">tigervn 远程显示系统</a></p><p><a href="https://blog.csdn.net/qq_52967097/article/details/123230837">CSDN - 对于卡尔曼滤波器的一些理解和探讨</a></p><p><a href="https://blog.csdn.net/NeoZng?spm=1011.2124.3001.5343">CSDN - HNU跃鹿战队主页</a></p><p><a href="https://github.com/Lostye/BamThriving-VISION/tree/main">robomaster欣竹战队视觉</a></p><p><a href="https://github.com/FaterYU/rm_auto_aim/tree/main">FaterYU rm_auto_aim &#x2F; rm_vision 的子模块</a></p><p><a href="https://docs.qq.com/sheet/DUFlaU0FHZk1QS0l1?tab=bb08j2&no_promotion=1">RoboMaster 培训体系（240130)</a></p><p><a href="https://blog.csdn.net/qq_27865227/article/details/131363638?login=from_csdn">ROS2机器人入门到实战教程(鱼香ROS)</a></p><p><a href="https://blog.csdn.net/Thinkin9/article/details/122913810">Realsense D435i Yolov5目标检测实时获得目标三维位置信息</a></p><p>[&#x2F;usr&#x2F;bin&#x2F;ld: ..&#x2F;..&#x2F;lib&#x2F;libpcl_io.so.1.8.0: undefined reference to &#96;libusb_set_option‘错误解决-海康摄像头SDK](<a href="https://blog.csdn.net/weixin_45646976/article/details/134856249">https://blog.csdn.net/weixin_45646976/article/details/134856249</a>)</p><p><a href="https://developer.aliyun.com/article/1589881">Ubuntu22.04配置ROS2 Humble</a></p><p><a href="https://flowus.cn/lihanchen/share/3147e4fd-eb5c-4b42-ad60-d07421b03890#ee64231c-eae0-43a1-8654-11f3a3f03c25">Livox 驱动安装</a></p><p><a href="https://blog.csdn.net/weixin_52612260/article/details/134124028">CSDN - 使用mid360从0开始搭建实物机器人入门级导航系统，基于Fast_Lio,Move_Base</a></p><p><a href="https://blog.csdn.net/m0_62948300/article/details/140209873">使用Livox-Mid360激光雷达，复现FAST_LIO（保姆级教程）</a></p><p><a href="https://sjtu-robomaster-team.github.io/antitop/">青工会 PPT - 反陀螺和自动弹道校正</a></p><p><a href="https://index.ros.org/p/robot_upstart/">robot_upstart 自启动</a></p><p><a href="https://blog.csdn.net/qq_44190125/article/details/139239164">CSDN - 【ROS2学习】解决删除编译的包后，再重新编译出现的问题</a></p><p><a href="https://blog.csdn.net/qq_40216084">CSDN - 叫我李先生主页 视觉导航研发人员</a></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ros2 run tf2_ros tf2_echo map base_link</span><br><span class="line">ros2 topic list | grep /submap_list</span><br><span class="line">ros2 topic echo /submap_list</span><br><span class="line">ros2 run cartographer_ros cartographer_occupancy_grid_node -resolution 0.05 -publish_period_sec 1.0 --ros-args --log-level debug</span><br><span class="line">ros2 run tf2_tools view_frames</span><br><span class="line">ros2 topic list</span><br><span class="line">ros2 topic echo /map  //查看特定消息</span><br><span class="line">ros2 topic hz /map</span><br><span class="line">roslaunch cartographer_ros offline_backpack_2d.launch bag_filenames:=$&#123;HOME&#125;/Downloads/b2-2016-04-05-14-44-52.bag</span><br><span class="line">rqt_graph</span><br><span class="line">ros2 launch cartographer_ros rplidar_cartographer.launch.py</span><br><span class="line">sudo chmod 666 /dev/ttyUSB0</span><br><span class="line">ls /dev | grep ttyUSB</span><br><span class="line">source /usr/share/gazebo/setup.bash</span><br><span class="line">密码20030120</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> RM </tag>
            
            <tag> 导航 </tag>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rime输入法</title>
      <link href="/2025/02/13/Rime%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/2025/02/13/Rime%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu双系统</title>
      <link href="/2025/02/11/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/02/11/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本博客记录所有安装Ubuntu双系统后遇到的问题以及部分重大操作,留作备案</p></blockquote><h2 id="Begin-Start-SMART"><a href="#Begin-Start-SMART" class="headerlink" title="Begin Start , SMART !"></a>Begin Start , SMART !</h2><blockquote><p><em><strong>参考文献</strong></em><br><a href="https://blog.csdn.net/beaver2010/article/details/137599949">Win11启动盘制作</a><br><a href="https://blog.csdn.net/2401_84064328/article/details/137232169">Windows11 + Linux (Ubuntu22.04) 双系统最简安装详细避坑版</a><br><a href="https://blog.csdn.net/kuwola/article/details/127618930">双系统安装ubuntu 22.04 LTS(一步到位)</a><br><a href="https://blog.csdn.net/weixin_45167912/article/details/144653202">Ventoy教程：创建多系统启动U盘的详细指南</a><br><a href="https://flowus.cn/lihanchen/share/e6735ca6-92fb-4db0-ad6c-54837d87c510">Window+Ubuntu双系统安装及删除-陈佬</a></p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="确保-BIOS-是-UEFI-模式"><a href="#确保-BIOS-是-UEFI-模式" class="headerlink" title="确保 BIOS 是 UEFI 模式"></a>确保 BIOS 是 UEFI 模式</h4><p>开始菜单搜索系统信息查看<br><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/1.png" alt=" "></p><p>如果不是 进入BIOS系统修改(修改后记得保存)</p><h4 id="确保磁盘是GPT格式"><a href="#确保磁盘是GPT格式" class="headerlink" title="确保磁盘是GPT格式"></a>确保磁盘是GPT格式</h4><p>进入磁盘管理 点击属性 卷</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/2.png"></p><p>若为主启动记录(MBR),修改为GPT</p><p>进入终端输入 <code>diskpart</code></p><p>依次输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list disk #列出磁盘</span><br><span class="line">select disk=0 #选择要转换的磁盘 这里是0</span><br><span class="line">convert gpt # 转换</span><br><span class="line">list disk #确认转换成功</span><br></pre></td></tr></table></figure><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/3.png"></p><h4 id="关闭BitLocker加密"><a href="#关闭BitLocker加密" class="headerlink" title="关闭BitLocker加密"></a>关闭BitLocker加密</h4><p>在磁盘管理器中查看是否有BitLocker加密<br>若有 在设置 隐私 安全性中关闭 (解密时间和硬盘内存储的东西有关,越多就越久)</p><h4 id="关闭独显直连"><a href="#关闭独显直连" class="headerlink" title="关闭独显直连"></a>关闭独显直连</h4><p>避免安装Ubuntu时候出现bug<br>UP这里之前进华硕 <code>Armoury Create</code> 关闭了</p><h3 id="制作-Ubuntu-系统盘"><a href="#制作-Ubuntu-系统盘" class="headerlink" title="制作 Ubuntu 系统盘"></a>制作 Ubuntu 系统盘</h3><h4 id="下载Ubuntu镜像网站"><a href="#下载Ubuntu镜像网站" class="headerlink" title="下载Ubuntu镜像网站"></a>下载Ubuntu镜像网站</h4><p><a href="https://ubuntu.com/download">Ubuntu官网下载地址</a></p><p><a href="https://launchpad.net/ubuntu/+mirror/mirrors.tuna.tsinghua.edu.cn-release">清华镜像下载网址</a></p><p>前者较为麻烦 这里我选择清华镜像</p><p>找到 <code>Mirror location information</code><br>进入一个镜像地址</p><p>选择 <code>ubuntu-22.04.5-desktop-amd64.iso</code></p><p>server没有图形界面</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/4.png"></p><h4 id="下载Rufu"><a href="#下载Rufu" class="headerlink" title="下载Rufu"></a>下载Rufu</h4><p>下载 Rufu 导入 镜像文件</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/5.png"></p><p>点击开始</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/6.png"></p><p>持续点击确定,需要等待一段时间</p><p>看到准备就绪绿色条满后便可点击关闭软件,之后哪台电脑需要,插入哪台电脑即可</p><h3 id="安装-Ubuntu-系统盘"><a href="#安装-Ubuntu-系统盘" class="headerlink" title="安装 Ubuntu 系统盘"></a>安装 Ubuntu 系统盘</h3><p>将刚刚做好的启动盘插入电脑</p><p>重启 狂按 F2  进入BIOS模式 (博主是华硕天选,其他机型自行百度)</p><blockquote><p>先关闭BIOS中的安全启动,避免后续不必要的麻烦</p></blockquote><p>然后关闭Intel RST,避免安装过程中出现Turn off RST</p><p>在BIOS设置界面找到Boot启动顺序列表 天选4 BIOS 在右侧U盘设置为最优先引导项,避免要进入U盘的Ubuntu安装程序时,电脑自动返回到Windows系统启动</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/17.jpg"></p><p>右下角启动菜单 点击U盘启动方式</p><p>进入系统 安装Ubuntu</p><h3 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu !"></a>安装 Ubuntu !</h3><p>等待一段时间 开始安装</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/18.jpg"></p><p>选择右边的 安装 Ubuntu</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/19.jpg"></p><p>这里我选择英文安装 避免后续不必要的麻烦</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/20.jpg"></p><p>暂时不连接WIFI</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/21.jpg"></p><p>正常安装即可</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/22.jpg"></p><blockquote><p>这里选择 <code>自行配置</code></p></blockquote><h4 id="创建系统分区"><a href="#创建系统分区" class="headerlink" title="创建系统分区"></a>创建系统分区</h4><p>配置好的界面</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/24.jpg"></p><p>找到之前预留给Ubuntu的free分区 点击add</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/23.jpg"></p><p>创建分区</p><p>需要有 <code>EFI系统分区</code>  <code>swap</code> </p><blockquote><p>EFI 留 500MB 就足够了 swap主要保存一些缓存 播主内存有32GB 其实不用也没事 ,这里我分给 swap 32GB (尴尬) 一般 8 GB 内存 分 10GB 就差不多了</p></blockquote><p>其他都给到根目录 <code>/</code>  </p><blockquote><p>网上很多说给很多到 <code>home</code> 下 ,没有这个必要 到时候不够存储就麻烦了</p></blockquote><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/24.jpg"></p><p>开始安装</p><p>安装成功后会提示重启</p><p>这时候屏幕会有一行小字提醒拔出U盘 按下 ENTER </p><p>至此 Ubuntu_22.04 安装成功 大功告成 !!!!!!</p><h3 id="多IOS启动盘制作-Ventoy"><a href="#多IOS启动盘制作-Ventoy" class="headerlink" title="多IOS启动盘制作(Ventoy)"></a>多IOS启动盘制作(Ventoy)</h3><h4 id="下载Ventoy"><a href="#下载Ventoy" class="headerlink" title="下载Ventoy"></a>下载Ventoy</h4><blockquote><p>注意Windows还是Linux</p></blockquote><p><a href="https://github.com/ventoy/Ventoy/releases">Ventoy官方Github仓库地址</a></p><h4 id="安装到U盘"><a href="#安装到U盘" class="headerlink" title="安装到U盘"></a>安装到U盘</h4><p>打开下载的Ventoy工具包,找到并双击运行Ventoy2Disk.exe(Windows版)<br>将U盘插入电脑 软件会自动识别<br>选择U盘设备 开始安装</p><blockquote><p>注意 安装Ventoy会清除U盘上的所有数据</p></blockquote><p>复制IOS文件到U盘</p><h3 id="删除-Ubuntu"><a href="#删除-Ubuntu" class="headerlink" title="删除 Ubuntu"></a>删除 Ubuntu</h3><p>下载 DiskGenius</p><p>进入软件后找到 Linux 分区 选择删除  </p><p>这里要右键 彻底删除分区</p><p>包括 swap EXT4等</p><p>展开 左侧系统盘下的EFI 分区找到 Ubuntu 子目录</p><p>右键彻底删除所有文件</p><blockquote><p>千万注意 别把 Windows 删除了 !!!!!!!</p></blockquote><p>完成之后记得左上角 点击 保存更改</p><p><strong>回收磁盘空间</strong></p><p>点击相邻的空闲磁盘 单击右键 选择扩容磁盘空间</p><p>博主还没删除过,这里参考陈佬博客笔记撰写</p><p><a href="https://flowus.cn/lihanchen/share/e6735ca6-92fb-4db0-ad6c-54837d87c510">Window+Ubuntu双系统安装及删除</a></p><h2 id="Travel-配置"><a href="#Travel-配置" class="headerlink" title="Travel ! (配置)"></a>Travel ! (配置)</h2><blockquote><p>至此 Ubuntu22.04双系统下载成功，我们来配置一些功能使得更定制化</p></blockquote><h2 id="GNOME-Tweaks"><a href="#GNOME-Tweaks" class="headerlink" title="GNOME Tweaks"></a>GNOME Tweaks</h2><h4 id="安装-启动"><a href="#安装-启动" class="headerlink" title="安装 &amp; 启动"></a>安装 &amp; 启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-tweaks</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-tweaks</span><br></pre></td></tr></table></figure><p>根据图形界面配置即可</p><h2 id="安装-Clash"><a href="#安装-Clash" class="headerlink" title="安装 Clash"></a>安装 Clash</h2><p>下载对应deb包到Download文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i Clash.Verge_2.0.3_amd64.deb </span><br></pre></td></tr></table></figure><p>新装系统可能有报错</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/10.png"></p><p>显示缺少依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libwebkit2gtk-4.1-0</span><br></pre></td></tr></table></figure><p>安装依赖后如上图还是报错</p><p>运行下列指令补充缺少依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><p>安装成功<br>自行选择机场配置即可</p><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>Ubuntu中时间是世界标准时间,上海是东八区,就是 GMT +8 切换到windows下时间会提早八小时,Windows中直接读取BIOS主板时间当本地时间,所以windows会直接显示BIOS时间,造成错乱.</p><p>解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ntpdate                 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在ubuntu下更新本地时间</span></span><br><span class="line"></span><br><span class="line">sudo ntpdate time.windows.com           </span><br><span class="line"></span><br><span class="line">sudo hwclock --localtime --systohc      </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将本地时间更新到硬件上</span></span><br></pre></td></tr></table></figure><p>在win上再同步一下时间即可</p><h2 id="双系统蓝牙共享"><a href="#双系统蓝牙共享" class="headerlink" title="双系统蓝牙共享"></a>双系统蓝牙共享</h2><blockquote><p>狼蛛F99 长按 Fn + 1 进入蓝牙匹配 (之前网上搜到的Fn+123匹配一直失效)<br>TWS4 打开耳机仓 长按 右侧按键进入蓝牙匹配</p></blockquote><p>一般在安装双系统后，切换系统总是需要重新配对蓝牙设备，虽然显示已连接，但是要先删除，遗忘该设备后重新匹配，设置共享即可把两个系统当成一个，很好避免了该问题</p><p>下面是解决方案</p><h4 id="安装chntpw"><a href="#安装chntpw" class="headerlink" title="安装chntpw"></a>安装chntpw</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install chntpw</span><br></pre></td></tr></table></figure><p>在Ubuntu中找到 windows 的 C盘 windows system32 config文件夹</p><p>右键此处打开终端，输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chntpw -e SYSTEM</span><br></pre></td></tr></table></figure><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/11.png"></p><h4 id="查看蓝牙-MAC"><a href="#查看蓝牙-MAC" class="headerlink" title="查看蓝牙 MAC"></a>查看蓝牙 MAC</h4><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>接下来通过 <code>cd&#39;</code> 找到蓝牙所在位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ControlSet001\Services\BTHPORT\Parameters\Keys</span><br></pre></td></tr></table></figure><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/12.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd f4c88a4d458f</span><br></pre></td></tr></table></figure><p>输入 <code>ls</code> 查看windows下曾经连接过的设备</p><p>查找 <code>value name</code> 下对应要修改的蓝牙设备,MAC地址可以通过Ubuntu下查看</p><p>最后一个 <code>1c7a4380c398</code> 是博主 TWS4 的地址 </p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/13.png"></p><p>终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex 1c7a4380c398</span><br></pre></td></tr></table></figure><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/14.png"></p><p>复制MAC地址 </p><h4 id="修改-info"><a href="#修改-info" class="headerlink" title="修改 info"></a>修改 <code>info</code></h4><p>打开文件夹</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/15.png"></p><p>如果是cd到目录d<br>进入对应地址的文件夹，通过 <code>vim</code><br>打开 <code>info</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim info</span><br></pre></td></tr></table></figure><p>也可直接图形化点开</p><p>修改 <code>LinkKey</code> 下的 <code>key</code> 成刚刚输出的MAC地址</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/16.png"></p><h4 id="重启蓝牙"><a href="#重启蓝牙" class="headerlink" title="重启蓝牙"></a>重启蓝牙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart bluetooth</span><br></pre></td></tr></table></figure><h2 id="Rime输入法"><a href="#Rime输入法" class="headerlink" title="Rime输入法"></a>Rime输入法</h2><p>Rime输入法提供给用户高度自定义化,可实现颜文字,希腊字母的输入</p><h4 id="安装Rime"><a href="#安装Rime" class="headerlink" title="安装Rime"></a>安装Rime</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ibus-rime</span><br></pre></td></tr></table></figure><p>此处安装<code>ibus</code>版本</p><p>也可以安装 apt-get 安装 Rime 原版</p><p>进入设置 区域与语言 在输入法系统中选择 <code>ibus</code></p><p>在 设置 键盘 中 添加 Rime 输入源 </p><h4 id="安装-Plum"><a href="#安装-Plum" class="headerlink" title="安装 Plum"></a>安装 Plum</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接下载并运行 Rime 的配置管理工具 plum,它会自动安装 Rime 输入方案、词典和补丁。</span></span><br></pre></td></tr></table></figure><ul><li><p>curl -fsSL: 静默下载脚本（不显示进度，忽略 SSL 证书错误）。</p></li><li><p>bash: 将下载的脚本直接通过 Bash 执行。</p></li></ul><p>该命令等同于手动克隆 plum 仓库后运行 .&#x2F;rime-install,但更直接。它会根据参数安装指定的输入方案</p><blockquote><p>UP的操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/rime/plum.git</span><br><span class="line">cd plum</span><br><span class="line"></span><br><span class="line">./rime-install luna-pinyin emoji zhwiki</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装朙月拼音、表情符号、维基拼音</span></span><br><span class="line"></span><br><span class="line">./rime-install aurora-pinyin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装极光拼音（Aurora）</span></span><br></pre></td></tr></table></figure><blockquote><p>后面发现 有些库地址更改 原先的 脚本不太行了 用Deepeek研究了一下这方面 尽管 最后成功 但是历程艰辛 配置不易 后续有时间单开一篇博客演示讲解</p></blockquote><h2 id="隐藏-VScode-顶部标题栏"><a href="#隐藏-VScode-顶部标题栏" class="headerlink" title="隐藏 VScode 顶部标题栏"></a>隐藏 VScode 顶部标题栏</h2><p>进入设置 修改为custom</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/9.png"></p><h2 id="蓝牙耳机单边没声音"><a href="#蓝牙耳机单边没声音" class="headerlink" title="蓝牙耳机单边没声音"></a>蓝牙耳机单边没声音</h2><p>在安装完系统后,发现耳机能正常连接,却有一边没有声音输出</p><p>Sollution 打开设置 声音(sound) 修改input device 切换为耳机再切换回来</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/8.png"></p><p>成功修复 ! (原因暂未知)</p><h2 id="安装-NVIDIA-显卡驱动"><a href="#安装-NVIDIA-显卡驱动" class="headerlink" title="安装 NVIDIA 显卡驱动"></a>安装 NVIDIA 显卡驱动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>没有输出</p><p>查询方法以下操作</p><p>安装显卡驱动工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure><p>添加驱动源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>没有任何效果,均无输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -nn | grep -i nvidia</span><br></pre></td></tr></table></figure><p>没有输出,系统无法识别到NVIDIA显卡</p><p>考虑可能PCle设备或者BIOS隐藏独立显卡 (很可能,在win中GPU是省电模式)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>找到 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash</code> 修改如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash pcie_port_pm=off&quot;</span><br></pre></td></tr></table></figure><blockquote><p><code>i</code>  <code>:wq</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>更新重启</p><p>再次运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -nn | grep -i nvidia</span><br></pre></td></tr></table></figure><p>无果，还是不行</p><p>忽然发现去windows 设置为 独显 即可</p><p>但是 Ubuntu 色调 全部变成蓝色(<del>未知原因</del>)</p><hr><p>更新 可能更改后色彩配置出现错误 原先默认的 <code>LP173WFG-SPT2</code> 修改为 标准色彩空间</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/25.png"></p><p>成功恢复!</p><hr><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">whale@UP:~$ ubuntu-drivers devices</span><br><span class="line">== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==</span><br><span class="line">modalias : pci:v000010DEd000028A0sv00001043sd000031D8bc03sc00i00</span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">driver   : nvidia-driver-535-server-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-570 - third-party non-free</span><br><span class="line">driver   : nvidia-driver-560 - third-party non-free recommended</span><br><span class="line">driver   : nvidia-driver-535-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-570-open - third-party non-free</span><br><span class="line">driver   : nvidia-driver-535 - distro non-free</span><br><span class="line">driver   : nvidia-driver-565-open - third-party non-free</span><br><span class="line">driver   : nvidia-driver-545-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-545 - distro non-free</span><br><span class="line">driver   : nvidia-driver-550 - third-party non-free</span><br><span class="line">driver   : nvidia-driver-550-open - third-party non-free</span><br><span class="line">driver   : nvidia-driver-565 - third-party non-free</span><br><span class="line">driver   : nvidia-driver-560-open - third-party non-free</span><br><span class="line">driver   : nvidia-driver-535-server - distro non-free</span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free builtin</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-driver-560</span><br></pre></td></tr></table></figure><p>大家选择后面有 <code>recommended</code> </p><p>这里下载非常慢 建议有条件开一个全局代理</p><p>安装完成后重启电脑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot now</span><br></pre></td></tr></table></figure><p>成功！！</p><p>删除之前在 grub 中的修改 移除 <code>nvidia-cuda-toolkit</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure><p>重启</p><h2 id="安装-cuda"><a href="#安装-cuda" class="headerlink" title="安装 cuda"></a>安装 cuda</h2><p>终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>查看GPU最高支持CUDA的版本</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/26.png"></p><p>图片显示是 <code>CUDA Version: 12.6</code></p><p>去官网查询适配版本 <a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">NVIDIA CUDA Toolkit Release Notes</a></p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/27.png"></p><p>去  <a href="https://developer.nvidia.com/cuda-toolkit-archive">NVIDIA官网-CUDA Toolkit Archive</a></p><p>选择自己的型号 下载 输入指令</p><p>博主这里下载 CUDA 12.6.2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install make</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install initramfs-tools</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.35.03_linux.run</span><br></pre></td></tr></table></figure><blockquote><p>这里最好不要开代理 避免不稳定 马上又要重新下载 (血的教训)(哭)</p></blockquote><p>不行的试一试这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ls -l cuda_12.6.2_560.35.03_linux.run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查文件大小是否匹配（应显示4,446,677,374字节）</span></span><br><span class="line"></span><br><span class="line">wget -c https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.35.03_linux.run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议重新下载（使用断点续传）</span></span><br></pre></td></tr></table></figure><p>确保文件数据大小等均正确 <code>4446677374</code></p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/28.png"></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_12.6.2_560.35.03_linux.run</span><br></pre></td></tr></table></figure><p>选择 Continue</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/29.png"></p><p>输入 <code>accept</code> 回车</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/30.png"></p><p>去除 <code>Driver</code> (回车 Enter用于勾选) </p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/31.png"></p><p>点击安装 等待</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/32.png"></p><p>安装成功</p><p>出现警告是正常的 对安装没有影响</p><blockquote><p><strong>配置CUDA</strong></p></blockquote><p>此处演示终端为 bash，若你的终端为 zsh，则应修改相应的 ~&#x2F;.zshrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>在最下方添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/cuda-12.6/bin</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-12.6/lib64</span><br></pre></td></tr></table></figure><blockquote><p>需要注意 根据安装版本不同 需要有不同目录改动</p></blockquote><p>更新环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>输出如下即可</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/33.png"></p><h2 id="独显-集显-切换"><a href="#独显-集显-切换" class="headerlink" title="独显 集显 切换"></a>独显 集显 切换</h2><p>输入指令 查看目前显卡使用模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prime-select query</span><br></pre></td></tr></table></figure><p>一般刚安装完都是 <code>on-demand</code> 混合模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo prime-select intel</span><br></pre></td></tr></table></figure><p>转换为 <code>intel</code></p><p>关机重启</p><p>这里 <code>intel</code> 可替换 <code>nvidia|intel|on-demand|query</code> </p><p>其中 <code>sudo prime-select query</code> 表示查询当前显卡驱动 </p><h2 id="安装-ROS2"><a href="#安装-ROS2" class="headerlink" title="安装 ROS2"></a>安装 ROS2</h2><p>小鱼一键安装！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros</span><br></pre></td></tr></table></figure><p>根据输入提示配置即可 非常快 !</p><h2 id="隐藏顶部状态栏"><a href="#隐藏顶部状态栏" class="headerlink" title="隐藏顶部状态栏"></a>隐藏顶部状态栏</h2><p>插一下Gnome目前配置 以后有时间再优化</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/35.png" alt=" "></p><p>下载gnome extention拓展插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-shell-extension-manager</span><br></pre></td></tr></table></figure><p>如果是Ubuntu22.04 或者更早的版本,需要额外安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell gnome-shell-extension-prefs</span><br></pre></td></tr></table></figure><p>打开软件 搜索 Hide Top Bar 隐藏顶部状态栏</p><p>还能搜索其他有意思的插件使用</p><p>卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --purge chrome-gnome-shell</span><br></pre></td></tr></table></figure><p><code>purge</code>参数会将配置文件删除 <code>remove</code>只是删除安装文件</p><p>拓展配置</p><h2 id="修改Gnome-CSS配置"><a href="#修改Gnome-CSS配置" class="headerlink" title="修改Gnome CSS配置"></a>修改Gnome CSS配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.config/gnome-shell/</span><br><span class="line">sudo vim gnome-shell.css</span><br></pre></td></tr></table></figure><p>按 <code>Alt + F2</code> 输入 <code>r</code> 重启 GNOME Shell</p><p>错误方法 已弃用</p><blockquote><p>不想折腾了 以后再说</p></blockquote><hr><h2 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h2><h3 id="CopyQ"><a href="#CopyQ" class="headerlink" title="CopyQ"></a>CopyQ</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install copyq</span><br></pre></td></tr></table></figure><p>不是很适合我 已弃用</p><h3 id="Clipboard-indicator"><a href="#Clipboard-indicator" class="headerlink" title="Clipboard indicator"></a>Clipboard indicator</h3><p>gnome拓展 </p><p>快捷键指令 待开发</p><p>已经弃用</p><h3 id="Diodon-使用"><a href="#Diodon-使用" class="headerlink" title="Diodon (使用)"></a>Diodon (使用)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install diodon</span><br></pre></td></tr></table></figure><p>在自己桌面环境配置自定义快捷键<br>指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/diodon</span><br></pre></td></tr></table></figure><h2 id="在当前文件夹打开终端"><a href="#在当前文件夹打开终端" class="headerlink" title="在当前文件夹打开终端"></a>在当前文件夹打开终端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nautilus</span><br><span class="line">nautilus -q</span><br><span class="line">sudo apt-get install xdotool xclip</span><br><span class="line">sudo vim /usr/bin/openterminal.sh</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#record the current ClipBoard</span></span><br><span class="line"><span class="comment">#clipboard_current=$(xclip -o)</span></span><br><span class="line">pid_list=`xdotool search --class <span class="string">&quot;nautilus&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#loop for the right window</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$pid_list</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">name=`xdotool getwindowname <span class="string">&quot;<span class="variable">$i</span>&quot;</span>`</span><br><span class="line">name_lower=$(<span class="built_in">echo</span> <span class="variable">$name</span> | <span class="built_in">tr</span> [a-z] [A-Z])</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name_lower</span>&quot;</span> | grep -qwi <span class="string">&quot;.*desktop*&quot;</span>;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;desktop window&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name_lower</span>&quot;</span> | grep -qwi <span class="string">&quot;.*nautilus*&quot;</span>;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nautilus window&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">id</span>=<span class="variable">$i</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get the current working directory</span></span><br><span class="line"><span class="built_in">wait</span>=`xdotool windowfocus <span class="variable">$id</span>`</span><br><span class="line"><span class="built_in">sleep</span> 0.2</span><br><span class="line"><span class="built_in">wait</span>=`xdotool key Ctrl+l`</span><br><span class="line"><span class="built_in">sleep</span> 0.2</span><br><span class="line"><span class="built_in">wait</span>=`xdotool key Ctrl+c`</span><br><span class="line"><span class="built_in">sleep</span> 0.1</span><br><span class="line">path=$(xclip -o)</span><br><span class="line"><span class="built_in">wait</span>=`xdotool key Escape`</span><br><span class="line"><span class="built_in">sleep</span> 0.1</span><br><span class="line">gnome-terminal --working-directory <span class="string">&quot;<span class="variable">$&#123;path&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod  +x /usr/bin/openterminal.sh</span><br></pre></td></tr></table></figure><p>在设置中加入快捷键</p><h2 id="屏幕亮度调节没反应"><a href="#屏幕亮度调节没反应" class="headerlink" title="屏幕亮度调节没反应"></a>屏幕亮度调节没反应</h2><p>调节屏幕亮度按钮时候 一直保持最大亮度</p><p>怀疑是安装MVIDIA驱动造成的(自从安装后状况频出)</p><p><img src="/./images/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/34-1.png"></p><p>修改 <code>GRUB_CMDLINE_LINUX=&quot;quiet splash acpi_backlight=native&quot;</code>参数 重启后成功</p><h2 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h2><h3 id="flameshot"><a href="#flameshot" class="headerlink" title="flameshot"></a>flameshot</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flameshot</span><br></pre></td></tr></table></figure><p>配置自定义快捷键</p><p>指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/flameshot gui</span><br></pre></td></tr></table></figure><h2 id="录屏工具"><a href="#录屏工具" class="headerlink" title="录屏工具"></a>录屏工具</h2><p><a href="https://obsproject.com/">OBS-Open Broadcaster Software</a></p><h2 id="安装-princexml"><a href="#安装-princexml" class="headerlink" title="安装 princexml"></a>安装 princexml</h2><p>官网下载 <a href="https://www.princexml.com/download/15/">Prince</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y gdebi</span><br><span class="line">sudo apt --fix-broken install</span><br><span class="line">sudo apt install -y gdebi # -y 自动选择yes</span><br><span class="line">sudo dpkg -i prince_15.4.1-1_ubuntu22.04_amd64.deb </span><br><span class="line">sudo gdebi prince_15.4.1-1_ubuntu22.04_amd64.deb </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prince --version</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whale@UP:~/Downloads$ prince --version</span><br><span class="line">Prince 15.4.1</span><br><span class="line">Copyright 2002-2023 YesLogic Pty. Ltd.</span><br><span class="line">Non-commercial License</span><br></pre></td></tr></table></figure><p>不好用 删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge prince</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装-谷歌浏览器"><a href="#安装-谷歌浏览器" class="headerlink" title="安装 谷歌浏览器"></a>安装 谷歌浏览器</h2><h2 id="安装-Terminator-终端"><a href="#安装-Terminator-终端" class="headerlink" title="安装 Terminator 终端"></a>安装 Terminator 终端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>搜索 <code>ctrl + shift + F</code></p><h2 id="安装-OBS-录屏软件"><a href="#安装-OBS-录屏软件" class="headerlink" title="安装 OBS 录屏软件"></a>安装 OBS 录屏软件</h2><blockquote><p>适用于 hdmi 采集卡</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:obsproject/obs-studio</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install obs-studio</span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt uninstall obs-studio</span><br></pre></td></tr></table></figure><h2 id="安装-flatpak"><a href="#安装-flatpak" class="headerlink" title="安装 flatpak"></a>安装 flatpak</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flatpak</span><br><span class="line">sudo apt install gnome-software-plugin-flatpak</span><br><span class="line">flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo</span><br></pre></td></tr></table></figure><p>系统时间不正确可能会报证书认证错误</p><h2 id="安装-任务管理器"><a href="#安装-任务管理器" class="headerlink" title="安装 任务管理器"></a>安装 任务管理器</h2><p>适用于 Linux 的现代任务和服务管理器应用程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak install https://dl.flathub.org/repo/appstream/io.missioncenter.MissionCenter.flatpakref</span><br></pre></td></tr></table></figure><p>系统时间不正确可能会报证书认证错误</p><h2 id="重启ubuntu文件系统"><a href="#重启ubuntu文件系统" class="headerlink" title="重启ubuntu文件系统"></a>重启ubuntu文件系统</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A | grep nautilus</span><br></pre></td></tr></table></figure><p>找到对应的pid执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -9 &lt;pid&gt;</span><br></pre></td></tr></table></figure><p>即可，随意点击文件即可重启</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 双系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub的配置学习</title>
      <link href="/2025/02/04/GitHub%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/04/GitHub%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前置学习连接 <a href="https://whaltze.github.io/2024/09/15/%E9%80%9A%E8%BF%87Git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E8%87%B3Github/">通过Git上传本地项目至GitHub</a></p></blockquote><h2 id="一台电脑配置多GitHub账户"><a href="#一台电脑配置多GitHub账户" class="headerlink" title="一台电脑配置多GitHub账户"></a>一台电脑配置多GitHub账户</h2><h3 id="创建新账号ssh密钥"><a href="#创建新账号ssh密钥" class="headerlink" title="创建新账号ssh密钥"></a>创建新账号ssh密钥</h3><p>找到C盘路径下的.ssh文件</p><p>C:\Users\Administrator.ssh\</p><p>右键bash here<br>输入注册账户的邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Whaltze.cn@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>在末尾添加名称id_rsa_main(和原来 的名称不同即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/22602/.ssh/id_rsa): id_rsa_main</span><br></pre></td></tr></table></figure><p>后续可以直接敲回车即可,最后结果如下</p><p><img src="/./images/GitHub%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0/1.png" alt=" "></p><h3 id="建立config文件"><a href="#建立config文件" class="headerlink" title="建立config文件"></a>建立config文件</h3><p>在.ssh文件下新建config文件(注意直接以config命名即可,没有其他后缀名字)</p><p>在config内写入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Host Whaltze.github.com</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Host Whaltze.github.com 此处为GitHub地址,如果有些服务器做的ip端口转发，这里不要带上端口号</span></span><br><span class="line">HostName github.com</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HostName 是远程仓库的地址，同样如果做的端口转发也不应带端口号</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HostName 主机名可用ip也可以是域名(如:github.com或者bitbucket.org)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Port 端口号，如果有做转发需要在这里填写端口号，没有就不必要填</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Port 服务器open-ssh端口（默认：22,默认时一般不写此行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Port 8800</span></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">User 登录用户名(如：git)</span></span><br><span class="line">User git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">识别key的文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">IdentityFile 证书文件路径（如~/.ssh/id_rsa_*)</span></span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">都指向同一个平台的话，下面的Host需要做个处理，因为我们在用这个key的时候根据Host从上到下进行查找，不做修改肯定会先查找到第一个key,依旧无效，随便改就好了，其他参数不做特殊处理</span></span><br><span class="line">Host W-Ziheng.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Port 8800</span></span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后续git相关内容时候就应该改成 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@Whaltze.github.com:W-Ziheng/RM_CLASS.git  </span><br><span class="line">git clone git@W-Ziheng.github.com:W-Ziheng/RM_CLASS.git</span><br></pre></td></tr></table></figure><p>其中 <strong>W-Ziheng&#x2F;RM_CLASS.git</strong> 为项目名字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@Whaltze.github:xxx/example.git </span><br><span class="line">git remote add origin git@W-Ziheng.github:xxx/example.git </span><br></pre></td></tr></table></figure><p>此时在bash中输入 检测是否连接成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@Whaltze.github.com</span><br><span class="line"></span><br><span class="line">ssh -T git@W-Ziheng.github.com</span><br></pre></td></tr></table></figure><p>正常应该显示如下</p><p><img src="/./images/GitHub%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0/2.png" alt=" "></p><p>细心的你可能发现最后一个指令为什么也会输出 <strong>Success</strong><br>在windows的 User&#x2F;目录下,我们能发现有一个文件 <strong>.gitconfig</strong> 这个全局变量,里面包含了我们第一次配置github时候的用户信息,现在我们删除他</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><p>注意,此处不用修改什么,直接COPY即可</p><p><strong>此处需要注意删除全局变量后需要进入项目文件夹单独设置一般都保存在.git文件夹中</strong></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="设置用户邮箱"><a href="#设置用户邮箱" class="headerlink" title="设置用户邮箱"></a>设置用户邮箱</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;Whaltze&quot;</span><br><span class="line">git config user.email &quot;2260274457@qq.com&quot;</span><br></pre></td></tr></table></figure><h3 id="删除远程仓库分支"><a href="#删除远程仓库分支" class="headerlink" title="删除远程仓库分支"></a>删除远程仓库分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin # 使用 Git 命令删除远程仓库中已经不存在的分支</span><br><span class="line">git fetch --prune # 从远程仓库获取最新的更新，并删除本地已不存在的远程分支</span><br><span class="line">git remote update origin --prune # 更新远程仓库的引用信息，并删除本地已不存在的远程分支</span><br></pre></td></tr></table></figure><h3 id="转换分支"><a href="#转换分支" class="headerlink" title="转换分支"></a>转换分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>要转换到另一个分支后才能删除</p><h3 id="创建新分支并切换"><a href="#创建新分支并切换" class="headerlink" title="创建新分支并切换"></a>创建新分支并切换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="删除本地仓库分支"><a href="#删除本地仓库分支" class="headerlink" title="删除本地仓库分支"></a>删除本地仓库分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br><span class="line">git branch -D &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>使用-D选项时,Git会无条件地删除指定的分支,即使它包含未合并的更改。因此，使用-D选项时要特别小心,确保不会丢失重要的代码更改。</p><h3 id="克隆某个分支"><a href="#克隆某个分支" class="headerlink" title="克隆某个分支"></a>克隆某个分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;分支名称&gt; https://gitee.com/项目(仓库地址).git</span><br></pre></td></tr></table></figure><h3 id="删除远程仓库连接"><a href="#删除远程仓库连接" class="headerlink" title="删除远程仓库连接"></a>删除远程仓库连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br><span class="line">git remote add origin git@W-Ziheng.github.com:W-Ziheng/RM_CLASS.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新建立连接</span></span><br></pre></td></tr></table></figure><h3 id="正常推送程序"><a href="#正常推送程序" class="headerlink" title="正常推送程序"></a>正常推送程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m &quot;commit&quot;  </span><br><span class="line">git remote add origin https://自己的仓库url地址 </span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
            <tag> SMART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于MID360的多算法导航合集</title>
      <link href="/2025/01/10/%E5%9F%BA%E4%BA%8EMID360%E7%9A%84%E5%A4%9A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%88%AA%E5%90%88%E9%9B%86/"/>
      <url>/2025/01/10/%E5%9F%BA%E4%BA%8EMID360%E7%9A%84%E5%A4%9A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%88%AA%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此为RoboMaster浮舟湿地战队2025年导航算法历程学习记录<br>当前开发环境为Ubuntu22.04, ROS2 humble<br>实机部署为英伟达i7MiniPC 13620H 16G内存(后期编译fastlio2包的时候8GB内存莫名出现爆内存现象,虚拟机能正常跑,故扩增至16G)</p></blockquote><!-- > 主要基于深北莫战队2024开源框架修改整合,再次感谢陈佬的开源! --><h2 id="安装-Livox-SDK2"><a href="#安装-Livox-SDK2" class="headerlink" title="安装 Livox SDK2"></a>安装 Livox SDK2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake</span><br><span class="line">git clone https://github.com/Livox-SDK/Livox-SDK2.git</span><br><span class="line">cd ./Livox-SDK2/</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. &amp;&amp; make -j</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="安装-livox-ros-driver2"><a href="#安装-livox-ros-driver2" class="headerlink" title="安装 livox_ros_driver2"></a>安装 livox_ros_driver2</h2><p>在主目录下新建 RM_Navigation文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Livox-SDK/livox_ros_driver2.git </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> RM </tag>
            
            <tag> 导航 </tag>
            
            <tag> SLAM </tag>
            
            <tag> MID360 </tag>
            
            <tag> Fastlio </tag>
            
            <tag> Pointlio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天选4连接HDMI后投屏无信号</title>
      <link href="/2025/01/10/%E5%A4%A9%E9%80%894%E8%BF%9E%E6%8E%A5HDMI%E5%90%8E%E6%8A%95%E5%B1%8F%E6%97%A0%E4%BF%A1%E5%8F%B7/"/>
      <url>/2025/01/10/%E5%A4%A9%E9%80%894%E8%BF%9E%E6%8E%A5HDMI%E5%90%8E%E6%8A%95%E5%B1%8F%E6%97%A0%E4%BF%A1%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="连接无信号"><a href="#连接无信号" class="headerlink" title="连接无信号"></a>连接无信号</h1><blockquote><p>将电脑与屏幕用HDMI连接后,投影屏上仍然显示无信号输入,经实验为GPU显示设置问题,之前设置的是自动调节(集显模式下投屏会失败),将其设置为混合模式后成功,因为独显模式需要重启,故没有尝试,以后有时间补充</p></blockquote><h1 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h1><p>Fn+F5 进入奥创中心修改即可</p><h1 id="投屏"><a href="#投屏" class="headerlink" title="投屏"></a>投屏</h1><p>通过快捷键 win+P 进入后 选择 <strong>复制</strong> 即可</p><h1 id="修改音量"><a href="#修改音量" class="headerlink" title="修改音量"></a>修改音量</h1><p>直接设置选择对应屏幕修改即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 天选4 </tag>
            
            <tag> 投屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课设】寻迹小车</title>
      <link href="/2024/11/14/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91%E5%AF%BB%E8%BF%B9%E5%B0%8F%E8%BD%A6/"/>
      <url>/2024/11/14/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91%E5%AF%BB%E8%BF%B9%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为up大二上学期寻迹小车设计记录<br>以下为基本硬件配置</p><ul><li>主控 stm32F103C8T6</li><li>五线四相 步进电机(STEP MORTOR)28BYJ-48</li><li>灰度传感器(简易版电子积木)</li></ul></blockquote><blockquote><p>一些资料网站<br><a href="https://blog.csdn.net/plmnko208/article/details/135048667">基于51单片机的红外寻迹小车</a><br><a href="https://github.com/Wind-Gone/Arduino-Traced-By-Line-SuperCar">基于Arduino的智能循迹小车</a><br><a href="https://blog.csdn.net/m0_51951121/article/details/122499795">基于STM32的循迹小车(直流电机)</a><br><a href="https://www.laserblock.cn/">激光开源社区</a><br><a href="https://blog.csdn.net/qq_51963216/article/details/124548477">STM32——灰度PID的使用</a><br><a href="https://blog.csdn.net/2401_83386329/article/details/140243185">基于stm32f103c8t6的五路灰度传感器循迹小车</a><br><a href="https://blog.csdn.net/weixin_51651698/article/details/128760449">STM32驱动5路灰度传感器PID循迹</a><br><a href="https://blog.csdn.net/weixin_62179882/article/details/128568965">【STM32】步进电机及其驱动</a><br><a href="https://blog.csdn.net/weixin_63800470/article/details/130466162">五路模拟量灰度传感器–ADC+DMA</a><br><a href="https://serial.baud-dance.com/">波特律动串口助手</a></p></blockquote><h2 id="步进电机"><a href="#步进电机" class="headerlink" title="步进电机"></a>步进电机</h2><p>步进电机不能直接使用直流或交流电源来驱动，需要使用专门的驱动器将脉冲电信号变换成相应的角位移或线位移进行驱动,角位移或线位移与脉冲数成正比,即其转速或线速度与输入控制脉冲的频率成正比。</p><blockquote><ul><li>步进电机控制特点</li></ul><ol><li>电机的总转动角度由输入脉冲数决定</li><li>电机的转速由脉冲信号频率决定</li></ol></blockquote><p>步进电机的内部结构示意图,及其工作原理</p><p><img src="/./images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91%E5%AF%BB%E8%BF%B9%E5%B0%8F%E8%BD%A6/1.png" alt="图片来源网络"></p><p><img src="/./images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91%E5%AF%BB%E8%BF%B9%E5%B0%8F%E8%BD%A6/2.png" alt="图片来源网络"></p><p><img src="/./images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91%E5%AF%BB%E8%BF%B9%E5%B0%8F%E8%BD%A6/3.png" alt="图片来源网络"></p><p><img src="/./images/%E3%80%90%E8%AF%BE%E8%AE%BE%E3%80%91%E5%AF%BB%E8%BF%B9%E5%B0%8F%E8%BD%A6/4.png" alt="图片来源网络"></p><p>我采用的是五线四相的步进电机</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> stm32 </tag>
            
            <tag> 课设 </tag>
            
            <tag> 寻迹小车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉组培训</title>
      <link href="/2024/10/22/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/"/>
      <url>/2024/10/22/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为2024年福州大学robomatser浮舟湿地战队视觉组培训文档,如有错误请联系<strong>2260274457(QQ)</strong></p></blockquote><h1 id="算法组第一次培训"><a href="#算法组第一次培训" class="headerlink" title="算法组第一次培训"></a>算法组第一次培训</h1><blockquote><p>本次培训主要会带大家初识一下linux系统的一些简单配置操作,体验一下ros2的一些自带包,会有小作业,相对来说比较轻松:sunny::sunny:</p></blockquote><h2 id="课前预习"><a href="#课前预习" class="headerlink" title="课前预习"></a>课前预习</h2><blockquote><p>确保ubuntu正确配置且版本为22.04 , ROS2版本为humble</p></blockquote><p>打开终端(Ctrl+Alt+T),输入以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/os-release &amp;&amp; echo $ROS_DISTRO</span><br></pre></td></tr></table></figure><p>查看输出版本是否为22.04和humble</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VERSION=&quot;22.04.5 LTS (Jammy Jellyfish)&quot;</span><br><span class="line">humble</span><br></pre></td></tr></table></figure><!-- cat是concatenate的缩写,此处用于显示目录文件的内容 --><h2 id="Basic-Skills"><a href="#Basic-Skills" class="headerlink" title="Basic Skills"></a>Basic Skills</h2><blockquote><p><strong>非必须却必须掌握的小技能</strong></p></blockquote><ul><li><p>Github注册    </p></li><li><p>Markdown</p></li><li><p>python  </p></li><li><p>c++</p></li></ul><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>why ubuntu ?</p><h3 id="终端常用命令"><a href="#终端常用命令" class="headerlink" title="终端常用命令"></a>终端常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ls # list的缩写</span><br><span class="line">pwd # 显示当前路径</span><br><span class="line">cd # 切换目录</span><br><span class="line">mkdir #新建文件夹</span><br><span class="line">touch &lt;file&gt; #新建文件</span><br><span class="line">rm &lt;file&gt;</span><br><span class="line">rm -r &lt;file&gt;</span><br><span class="line">sudo rm -rf &lt;file&gt; # 谨慎用</span><br><span class="line">cp &lt;file1&gt; &lt;file2_aim&gt;</span><br><span class="line">cp -r &lt;file1&gt; &lt;file2_aim&gt;</span><br><span class="line">mv &lt;old_name&gt; &lt;new_name&gt;</span><br><span class="line">cat &lt;file&gt; # 连接显示文件内容</span><br><span class="line">history</span><br></pre></td></tr></table></figure><h3 id="终端常用技巧"><a href="#终端常用技巧" class="headerlink" title="终端常用技巧"></a>终端常用技巧</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+shift+C/V # 复制粘贴</span><br><span class="line">tab # 自动补全</span><br><span class="line">!! #重复上次命令,常用sudo!!</span><br><span class="line">ctrl+r #补全历史命令</span><br><span class="line">ctrl+c #终止程序</span><br><span class="line">ctrl+z #暂停程序,挂载在后台</span><br></pre></td></tr></table></figure><!-- ```shell ps aux # 显示当前运行进程``` --><h2 id="Hello-World-cpp"><a href="#Hello-World-cpp" class="headerlink" title="Hello World.cpp"></a>Hello World.cpp</h2><p>安装vscode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install code</span><br></pre></td></tr></table></figure><p>也可通过小鱼的一键安装进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros</span><br></pre></td></tr></table></figure><p>安装g++</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install g++</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code . #打开vscode</span><br></pre></td></tr></table></figure><blockquote><p>一些常见好用的插件<br>c&#x2F;c++</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hello.cpp -o hello</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><h2 id="Hello-World-py"><a href="#Hello-World-py" class="headerlink" title="Hello World.py"></a>Hello World.py</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch hello.py</span><br><span class="line">code hello.py</span><br></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py</span><br></pre></td></tr></table></figure><blockquote><p>python 编译型语言，执行速度快、效率高；依靠编译器、跨平台性差些。<br>C++ 解释型语言，执行速度慢、效率低；依靠解释器、跨平台性好。</p></blockquote><h2 id="Terminate"><a href="#Terminate" class="headerlink" title="Terminate"></a>Terminate</h2><blockquote><p>Terminator 是linux中一个非常实用且开源的终端仿真器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure><p>以后打开终端便会自动是用terminator</p><blockquote><p>常见的指令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+O     #水平分割终端</span><br><span class="line">Ctrl+Shift+E     #垂直分割终端</span><br></pre></td></tr></table></figure><h2 id="ros2的一些自带包"><a href="#ros2的一些自带包" class="headerlink" title="ros2的一些自带包"></a>ros2的一些自带包</h2><blockquote><p>Talker and Listener</p></blockquote><p>倾听者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_py listener</span><br></pre></td></tr></table></figure><p>说话者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><blockquote><p>海龟</p></blockquote><p>启动海龟节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtlesim_node</span><br></pre></td></tr></table></figure><p>启动海龟控制节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><p>接下来就可以控制海龟啦!</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li><p>用md语法对今天讲到的一些命令行知识等做总结注释笔记(根据自己情况写,也可添加其余知识)</p></li><li><p>用mkdir等终端命令创建CLASS_1文件夹,在此目录下分别用python 和 c++ 编写两个程序输出 Welcome to RM ! (<strong>需提供histroy终端命令,以及程序源码</strong>)</p></li></ul><p>以压缩包形式发送至邮箱 <a href="mailto:&#50;&#50;&#x36;&#48;&#50;&#55;&#52;&#x34;&#x35;&#x37;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;">2260274457@qq.com</a> 压缩包命名为 <strong>视觉组第一次作业+学号+姓名的方式</strong></p><p>:warning: <strong>鼓励用github上传自己的源码,并提供readme的git方式</strong></p><h1 id="算法组第二次培训"><a href="#算法组第二次培训" class="headerlink" title="算法组第二次培训"></a>算法组第二次培训</h1><blockquote><p>第二节课将带领大家了解ROS2中的基础通信机制,具体包括话题(Topic)节点(node)通信的使用、如何构建ROS2节点，CMake构建工具的使用等内容。通过实践，我们将编写两个C++程序：一个Publisher（发布者）和一个Listener（订阅者）,并附带讲解GitHub的一些使用,帮助大家快速游走开源社区!</p></blockquote><h2 id="Introduce-–-CMake"><a href="#Introduce-–-CMake" class="headerlink" title="Introduce – CMake"></a>Introduce – CMake</h2><p>在上节课,我们学习使用了g++编译程序,可能同学们初学觉得用g++编译简单快捷,但实际上,在较大工程项目的编写过程往往需要引入许多库,包括连接静态库,动态库等,用g++编译经常会出现<code>No such file or directory</code> 找不到库的情况,小的项目可能只有几个includes路径,无伤大雅,但是大项目下,成百上千的引用显然是不切实际的,因此CMake make 孕育而生</p><h3 id="以-Hello-RM-为例子展示"><a href="#以-Hello-RM-为例子展示" class="headerlink" title="以 Hello RM 为例子展示"></a>以 Hello RM 为例子展示</h3><h4 id="新建工作空间"><a href="#新建工作空间" class="headerlink" title="新建工作空间"></a>新建工作空间</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./CLASS_2/Task1/src/</span><br><span class="line">mkdir -p ./CLASS_2/Task1/includes/</span><br><span class="line">mkdir -p ./CLASS_2/Task1/tools/</span><br><span class="line">cd ./CLASS_2/Task1/src/</span><br></pre></td></tr></table></figure><h4 id="没有CMake时候"><a href="#没有CMake时候" class="headerlink" title="没有CMake时候"></a>没有CMake时候</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── includes</span><br><span class="line">│   └── hello<span class="selector-class">.hpp</span></span><br><span class="line">├── <span class="attribute">src</span></span><br><span class="line">│   └── cmake<span class="selector-class">.cpp</span></span><br><span class="line">└── tools</span><br><span class="line">    └── hello.cpp</span><br></pre></td></tr></table></figure><ul><li>hello.hpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLO_HPP</span></span><br><span class="line"><span class="comment">// 如果HELLO_HPP没有被定义，则编译以下代码</span></span><br><span class="line"><span class="comment">// 这是一种防止头文件被多次包含的常见技术，称为包含保护</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLO_HPP   </span></span><br><span class="line"><span class="comment">// 定义HELLO_HPP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">// 定义一个名为Hello的类</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有成员变量和成员函数的声明区域</span></span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="comment">// 这里可以放置私有数据成员，但目前为空</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 公有成员函数的声明区域</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hello_rm</span><span class="params">(<span class="comment">/* args */</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 声明一个公有成员函数hello_rm，函数参数列表为空，返回类型为void</span></span><br><span class="line">    <span class="comment">// 具体实现将在类的定义体外部进行</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><ul><li>hello.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// #include &quot;../includes/hello.hpp&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hello::hello_rm</span><span class="params">()</span> </span>&#123; <span class="comment">// 定义Hello类的成员函数hello_rm</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, RM !&quot;</span> &lt;&lt; std::endl; <span class="comment">// 输出字符串&quot;Hello, RM !&quot;到标准输出流</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>cmake.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// 包含标准输入输出库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.hpp&quot;</span> <span class="comment">// 包含自定义的头文件hello.hpp</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;     <span class="comment">// 主函数入口</span></span><br><span class="line">    Hello hello; <span class="comment">// 创建Hello类的实例</span></span><br><span class="line">    hello.<span class="built_in">hello_rm</span>(); <span class="comment">// 调用Hello类的hello_rm方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">// 返回0，表示程序正常结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况,用g++编写需要指明include</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g++ ./src/cmake.cpp ./tools/hello.cpp -I ./includes/ -o cmake_exe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">./cmake_exe</span><br></pre></td></tr></table></figure><p>输出 hello RM!</p><p>因为此时include还很少,我们可以手动添加,当路径较多时候,我们就需要加一长串文件,为简化操作,我们用cmake 和 make</p><h4 id="CMake-and-make-操作"><a href="#CMake-and-make-操作" class="headerlink" title="CMake and make 操作"></a>CMake and make 操作</h4><!-- ![转载于知乎](https://pic1.zhimg.com/v2-f5d3d7cda7778c0240e8f44a53766b58_1440w.jpg) --><!-- ![ ](https://whvn.cc/qz1pdq) --><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/cmake_rule.JPG" alt=" "></p><blockquote><p>CMake通过调用CMakeLists.txt直接生成Makefile !</p></blockquote><p>所以我们就只需要学习编写CMakeLists.txt即可</p><blockquote><p>安装 CMake make</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make cmake</span><br></pre></td></tr></table></figure><p>在VScode安装CMake插件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── cmake_exe</span><br><span class="line">├── CMakeLists<span class="selector-class">.txt</span></span><br><span class="line">├── includes</span><br><span class="line">│   └── hello<span class="selector-class">.hpp</span></span><br><span class="line">├── <span class="attribute">src</span></span><br><span class="line">│   └── cmake<span class="selector-class">.cpp</span></span><br><span class="line">└── tools</span><br><span class="line">    └── hello.cpp</span><br></pre></td></tr></table></figure><ul><li>CMakeLists.txt</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 指定CMake的最低版本要求</span><br><span class="line">cmake_minimum_required(VERSION 3.11)</span><br><span class="line"></span><br><span class="line"># 定义项目名称</span><br><span class="line">project(CLASS_2)</span><br><span class="line"></span><br><span class="line"># 添加头文件目录</span><br><span class="line">include_directories(./includes)</span><br><span class="line"></span><br><span class="line"># 添加可执行文件，并指定源文件</span><br><span class="line">add_executable(cmake_exe src/cmake.cpp tools/hello.cpp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行cmake</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake -B build </span><br><span class="line">make -C build # cd build &amp;&amp; make</span><br><span class="line">./build/cmake_exe</span><br></pre></td></tr></table></figure><ul><li>通过cmake运行CMakeLists.txt, -B参数 指定生成build文件夹</li><li>make进入build,运行makefile, -C参数 进入build文件夹</li><li>最后运行可执行文件</li></ul><p>可以直接复制如下到终端,一键实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build </span><br><span class="line">cd build </span><br><span class="line">cmake .. &amp;&amp; make -j</span><br><span class="line">./cmake_exe</span><br></pre></td></tr></table></figure><h3 id="快速获取源文件"><a href="#快速获取源文件" class="headerlink" title="快速获取源文件"></a>快速获取源文件</h3><p>在CMakeLists.txt文件中,有些时候源文件非常的多,这时我们可以用 <code>aux_source_directory</code> 函数一键获取某一路径下的所有源文件</p><ul><li>CMakeLists.txt</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.11)</span><br><span class="line"></span><br><span class="line">project(Task_2)</span><br><span class="line"></span><br><span class="line">include_directories(./includes)</span><br><span class="line"></span><br><span class="line">aux_source_directory(./tools TOOLS)</span><br><span class="line"># 保存至TOOLS变量</span><br><span class="line"></span><br><span class="line">add_executable(cmake_exe src/cmake.cpp $&#123;TOOLS&#125; )</span><br><span class="line"></span><br><span class="line">#查看一下变量里面有什么</span><br><span class="line">message($&#123;TOOLS&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -B build</span><br></pre></td></tr></table></figure><p>输出 <code>./tools/hello.cpp</code> 源文件的目录</p><h2 id="ROS2节点与话题通信"><a href="#ROS2节点与话题通信" class="headerlink" title="ROS2节点与话题通信"></a>ROS2节点与话题通信</h2><p>在这篇博客中，我们将学习如何在ROS2中进行节点通信，特别是话题（Topic）通信。ROS2采用了发布-订阅模式，使得多个节点可以通过话题（Topic）进行数据交换。我们将动手编写两个简单的节点，一个发布消息，另一个订阅消息。通过这个实践，大家将能够更好地理解ROS2的通信机制。</p><h3 id="ROS2架构与通信模型"><a href="#ROS2架构与通信模型" class="headerlink" title="ROS2架构与通信模型"></a>ROS2架构与通信模型</h3><p>ROS2采用了“发布-订阅”模式，基本组件包括：</p><ul><li><strong>节点（Node）</strong>：ROS2中每个独立的程序模块称为节点。每个节点可以发布和订阅消息，执行特定任务。</li><li><strong>话题（Topic）</strong>：话题是一个通信媒介，节点可以将消息发布到话题，其他节点可以从该话题订阅消息。</li><li><strong>服务（Service）</strong>：服务是一种基于请求-响应的通信模式，通常用于客户端和服务器之间的交互。</li><li><strong>动作（Action）</strong>：动作是一种长期运行任务的通信模式，可以中断任务并返回结果。</li></ul><p>ROS2中三种主要的通信模式：</p><ul><li><strong>发布&#x2F;订阅（Publish&#x2F;Subscribe）</strong>：通过话题实现，适用于一对多的通信。</li><li><strong>服务&#x2F;客户端（Service&#x2F;Client）</strong>：通过请求&#x2F;响应方式实现，适用于一对一的通信。</li><li><strong>动作（Action）</strong>：适用于长期任务处理，需要反馈和中断的场景。</li></ul><hr><h3 id="创建ROS2工作空间"><a href="#创建ROS2工作空间" class="headerlink" title="创建ROS2工作空间"></a>创建ROS2工作空间</h3><p>在开始编码之前，我们需要创建一个ROS2工作空间。假设你的ROS2已经安装好并且工作正常，我们可以通过以下步骤来创建工作空间。</p><p>打开终端，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/CLASS_2/Task2/src/</span><br><span class="line"><span class="built_in">cd</span> ~/CLASS_2/Task2/src/</span><br><span class="line"><span class="comment"># colcon build</span></span><br></pre></td></tr></table></figure><h3 id="编写Publisher和Listener节点-C"><a href="#编写Publisher和Listener节点-C" class="headerlink" title="编写Publisher和Listener节点 (C++)"></a>编写Publisher和Listener节点 (C++)</h3><p>进入src目录并创建包</p><p>在<code>src</code>目录下创建一个基于C++的ROS2包，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/CLASS_2/Task2/src/</span><br><span class="line">ros2 pkg create --build-type ament_cmake Publisher2Listener</span><br></pre></td></tr></table></figure><p>这将创建一个名为<code>Publisher2Listener</code>的ROS2包。</p><h4 id="编写Publisher节点"><a href="#编写Publisher节点" class="headerlink" title="编写Publisher节点"></a>编写Publisher节点</h4><p>在<code>src</code>目录下创建<code>publisher.cpp</code>文件，内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rclcpp/rclcpp.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/msg/string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherNode</span> : <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">PublisherNode</span>() : <span class="built_in">Node</span>(<span class="string">&quot;publisher_node&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        publisher_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_publisher</span>&lt;std_msgs::msg::String&gt;(<span class="string">&quot;welcome_topic&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        timer_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(</span><br><span class="line">            <span class="number">1</span>s, std::<span class="built_in">bind</span>(&amp;PublisherNode::timer_callback, <span class="keyword">this</span>));  <span class="comment">// 每秒发布一次消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> message = std_msgs::msg::<span class="built_in">String</span>();</span><br><span class="line">        message.data = <span class="string">&quot;Welcome to RM!&quot;</span>;  <span class="comment">// 发布的消息</span></span><br><span class="line">        publisher_-&gt;<span class="built_in">publish</span>(message);</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;Publishing: &#x27;%s&#x27;&quot;</span>, message.data.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr publisher_;</span><br><span class="line">    rclcpp::TimerBase::SharedPtr timer_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(std::<span class="built_in">make_shared</span>&lt;PublisherNode&gt;());</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写Listener节点"><a href="#编写Listener节点" class="headerlink" title="编写Listener节点"></a>编写Listener节点</h4><p>同样，在<code>src</code>目录下创建<code>listener.cpp</code>文件，内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rclcpp/rclcpp.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/msg/string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListenerNode</span> : <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ListenerNode</span>() : <span class="built_in">Node</span>(<span class="string">&quot;listener_node&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        subscription_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_subscription</span>&lt;std_msgs::msg::String&gt;(</span><br><span class="line">            <span class="string">&quot;welcome_topic&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;ListenerNode::listener_callback, <span class="keyword">this</span>, std::placeholders::_1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">listener_callback</span><span class="params">(<span class="type">const</span> std_msgs::msg::String::SharedPtr msg)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;Received: &#x27;%s&#x27;&quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr subscription_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(std::<span class="built_in">make_shared</span>&lt;ListenerNode&gt;());</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置CMake"><a href="#配置CMake" class="headerlink" title="配置CMake"></a>配置CMake</h4><p>ROS2使用CMake来构建项目。接下来，我们需要配置<code>CMakeLists.txt</code>文件，以便正确编译和链接我们的C++代码。</p><p>打开<code>Publisher2Listener/CMakeLists.txt</code>，修改内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.11</span>)</span><br><span class="line"><span class="keyword">project</span>(Publisher2Listener)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ROS2相关的CMake依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(rclcpp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(std_msgs REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(publisher_node src/publisher.cpp)</span><br><span class="line">ament_target_dependencies(publisher_node rclcpp std_msgs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(listener_node src/listener.cpp)</span><br><span class="line">ament_target_dependencies(listener_node rclcpp std_msgs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  publisher_node</span><br><span class="line">  listener_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line">ament_package()</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p></blockquote><ul><li><code>find_package(rclcpp REQUIRED)</code>和<code>find_package(std_msgs REQUIRED)</code>：用于查找ROS2的核心包和标准消息包。</li><li><code>add_executable(publisher_node src/publisher.cpp)</code>：将C++源文件编译成可执行文件。</li><li><code>ament_target_dependencies(publisher_node rclcpp std_msgs)</code>：指定构建时的依赖项。</li></ul><hr><blockquote><p>删除 ROS2 的包 (直接rm -rf即可)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf Publisher2Listener</span><br></pre></td></tr></table></figure><h3 id="编写Publisher和Listener节点-Python"><a href="#编写Publisher和Listener节点-Python" class="headerlink" title="编写Publisher和Listener节点 (Python)"></a>编写Publisher和Listener节点 (Python)</h3><p>进入src目录并创建包</p><p>在<code>src</code>目录下创建一个基于C++的ROS2包，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/CLASS_2/Task2/src/</span><br><span class="line">ros2 pkg create --build-type ament_python Publisher2Listener</span><br></pre></td></tr></table></figure><p>这将创建一个名为<code>Publisher2Listener</code>的ROS2包。</p><h4 id="Publisher节点"><a href="#Publisher节点" class="headerlink" title="Publisher节点"></a>Publisher节点</h4><p>我们将创建一个Publisher节点，发布字符串消息 <code>Welcome to RM!</code>到一个话题<code>/welcome_topic</code>。创建一个Python文件<code>publisher.py</code>，在<code>Publisher2Listener</code>包的<code>Publisher2Listener</code>文件夹下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># publisher.py</span></span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;publisher_node&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.publisher_ = <span class="variable language_">self</span>.create_publisher(String, <span class="string">&#x27;welcome_topic&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.timer = <span class="variable language_">self</span>.create_timer(<span class="number">1.0</span>, <span class="variable language_">self</span>.timer_callback)  <span class="comment"># 每秒发布一次消息</span></span><br><span class="line">        <span class="variable language_">self</span>.get_logger().info(<span class="string">&quot;Publisher node has started.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timer_callback</span>(<span class="params">self</span>):</span><br><span class="line">        msg = String()</span><br><span class="line">        msg.data = <span class="string">&quot;Welcome to RM!&quot;</span>  <span class="comment"># 发布的消息</span></span><br><span class="line">        <span class="variable language_">self</span>.publisher_.publish(msg)</span><br><span class="line">        <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;Publishing: &#x27;<span class="subst">&#123;msg.data&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)</span><br><span class="line">    publisher_node = PublisherNode()</span><br><span class="line">    rclpy.spin(publisher_node)</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li><code>create_publisher</code>方法用于创建一个发布器，这里我们选择了<code>String</code>类型的消息，话题名为<code>/welcome_topic</code>，队列大小为10。</li><li><code>create_timer</code>方法用于定时调用<code>timer_callback</code>方法，每秒发布一次消息。</li></ul><h4 id="Listener节点"><a href="#Listener节点" class="headerlink" title="Listener节点"></a>Listener节点</h4><p>接下来我们编写Listener节点，订阅<code>/welcome_topic</code>话题并打印接收到的消息。创建一个Python文件<code>listener.py</code>，在<code>Publisher2Listener</code>包的<code>Publisher2Listener</code>文件夹下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># listener.py</span></span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListenerNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;listener_node&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.subscription = <span class="variable language_">self</span>.create_subscription(</span><br><span class="line">            String,</span><br><span class="line">            <span class="string">&#x27;welcome_topic&#x27;</span>,</span><br><span class="line">            <span class="variable language_">self</span>.listener_callback,</span><br><span class="line">            <span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.get_logger().info(<span class="string">&quot;Listener node has started.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">listener_callback</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;Received: &#x27;<span class="subst">&#123;msg.data&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)</span><br><span class="line">    listener_node = ListenerNode()</span><br><span class="line">    rclpy.spin(listener_node)</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li><code>create_subscription</code>方法用于创建一个订阅器，订阅<code>/welcome_topic</code>话题。接收到消息时，调用<code>listener_callback</code>方法处理数据。</li></ul><h4 id="setup-py-and-package-xml"><a href="#setup-py-and-package-xml" class="headerlink" title="setup.py and package.xml"></a>setup.py and package.xml</h4><blockquote><p>编辑<code>setup.py</code></p></blockquote><p>在<code>Publisher2Listener</code>目录下找到并编辑<code>setup.py</code>文件，确保添加了<code>Publisher2Listener</code>包的依赖：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&#x27;Publisher2Listener&#x27;</span></span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=package_name,</span><br><span class="line">    version=<span class="string">&#x27;0.0.0&#x27;</span>,</span><br><span class="line">    packages=[package_name],</span><br><span class="line">    data_files=[</span><br><span class="line">        (<span class="string">&#x27;share/ament_index/resource_index/packages&#x27;</span>,</span><br><span class="line">            [<span class="string">&#x27;resource/&#x27;</span> + package_name]),</span><br><span class="line">        (<span class="string">&#x27;share/&#x27;</span> + package_name, [<span class="string">&#x27;package.xml&#x27;</span>]),</span><br><span class="line">    ],</span><br><span class="line">    install_requires=[<span class="string">&#x27;setuptools&#x27;</span>, <span class="string">&#x27;rclpy&#x27;</span>, <span class="string">&#x27;std_msgs&#x27;</span>],</span><br><span class="line">    zip_safe=<span class="literal">True</span>,</span><br><span class="line">    maintainer=<span class="string">&#x27;Whaltze&#x27;</span>,</span><br><span class="line">    maintainer_email=<span class="string">&#x27;2260274457@qq.com&#x27;</span>,</span><br><span class="line">    description=<span class="string">&#x27;ROS2 Publisher and Listener Example&#x27;</span>,</span><br><span class="line">    license=<span class="string">&#x27;Apache License 2.0&#x27;</span>,</span><br><span class="line">    tests_require=[<span class="string">&#x27;pytest&#x27;</span>],</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;publisher = Publisher2Listener.publisher:main&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;listener = Publisher2Listener.listener:main&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>编辑<code>package.xml</code></p></blockquote><p>确保在<code>package.xml</code>中添加了所需的依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rclpy<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h3><p>在工作空间根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./src</span><br><span class="line">colcon build </span><br><span class="line"><span class="built_in">source</span> install/setup.bash</span><br></pre></td></tr></table></figure><p>分别打开两个终端，启动Publisher和Listener：</p><blockquote><p>首先一定要记得 source 一下环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source install/setup.bash</span><br></pre></td></tr></table></figure><ol><li>启动Publisher节点：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run Publisher2Listener publisher</span><br></pre></td></tr></table></figure><ol start="2"><li>启动Listener节点：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run Publisher2Listener listener</span><br></pre></td></tr></table></figure><p>你将看到Listener节点在接收到Publisher节点发送的消息“Welcome to RM！”后，输出如下日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Received: &#x27;Welcome to RM!&#x27;</span><br></pre></td></tr></table></figure><h3 id="报错-No-executable-found"><a href="#报错-No-executable-found" class="headerlink" title="报错 No executable found"></a>报错 No executable found</h3><ul><li>source install&#x2F;setup.bash</li><li>检查 CMakeLists.txt 文件是否配置正确</li><li>使用命令 <code>ros2 pkg executables Publisher2Listener</code> 查看确保输入正确</li></ul><blockquote><p>总结</p></blockquote><p>通过这次练习，我们成功地创建了ROS2节点，一个作为Publisher，另一个作为Listener。学习如何创建节点、话题以及如何通过ROS2的发布-订阅模型进行数据传递。这是ROS2中非常常见的通信方式之一，未来你将会用到更多类似的通信机制来构建更复杂的系统。</p><p>希望大家在接下来的学习中能够掌握这些基本概念，深入理解ROS2的通信架构。如果有任何问题，欢迎随时向我提问！</p><h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><ol><li>阐述ros架构以及话题节点服务等之间的通信关系</li><li>动手编写一个listener和publisher，发布信息为welcome to RM！</li><li>提供rqt截图</li><li>写一个readme，告诉我如何运行你的节点（命令行）</li><li>作业上传至CLASS仓库,且需符合提交规范</li></ol><h1 id="算法组第三次培训"><a href="#算法组第三次培训" class="headerlink" title="算法组第三次培训"></a>算法组第三次培训</h1><blockquote><p>本节课主要讲解 <code>OpenCV</code> 的使用 方面同学们快速入门 搭建环境(众所周知,好的环境是成功的一半) 为校赛准备(校赛允许能力强的同学上 <code>YOLO</code>, 可自行学习 本结课将略带而过 为后期大作业作铺垫)</p></blockquote><hr><h2 id="What-is-OpenCV"><a href="#What-is-OpenCV" class="headerlink" title="What is OpenCV"></a>What is OpenCV</h2><p><code>OpenCV</code> 全称 <code>Open Source Computer Vision Library</code> 是世界上著名的开源计算机视觉软件库。在图像处理和计算机视觉以及机器学习等方面发挥着重要作用, OpenCV主要由C函数和少量C++类构成，但同时提供Python、Java和MATLAB等多种语言的接口, 广泛被大众使用 </p><blockquote><p>在 RoboMaster 竞技中 主要通过 OpenCV 亦或是 YOLO 实现对 装甲板的识别 实现自瞄</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libopencv-dev</span><br></pre></td></tr></table></figure><p>怕麻烦的可以一键安装 自动获取OpenCV4所需的库文件 大概2个小时 </p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><p>进入 <a href="https://opencv.org/releases/">opencv官网</a>，下载Sources压缩包</p><h4 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev  libtiff5-dev libopenexr-dev libtbb-dev</span><br><span class="line">sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev pkg-config</span><br></pre></td></tr></table></figure><p>其实依赖还有很多, 对目前比赛项目来说 这些足够</p><h4 id="cmake-make"><a href="#cmake-make" class="headerlink" title="cmake &amp;&amp; make"></a>cmake &amp;&amp; make</h4><p>将源代码解压到home目录下，创建build文件夹，用cmake检查依赖项是否安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd opencv-4.5.4/  # 此处为自己安装的版本</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/lib/opencv4.5.4 -D OPENCV_GENERATE_PKGCONFIG=ON</span><br></pre></td></tr></table></figure><ul><li><p><code>CMAKE_INSTALL_PREFIX</code> 是 opencv 的安装地址。为便于后续开发 opencv 多版本共存，将 opencv 不同版本安放在不同的文件夹中（编译其他版本时把 opencv4.5.4 改成相应的版本名即可），目的是分开使用 opencv 各版本</p></li><li><p><code>OPENCV_GENERATE_PKGCONFIG</code> 强烈建议设置为ON。<br>opencv4 默认不生成 .pc 文件，所以加上这句用于生成 opencv4.pc 文件，支持 <code>pkg-config --modversion opencv4</code> 命令，从而可以搜索到 opencv 版本。</p></li></ul><p>cmake检查完成，就会显示配置和生成已结束 然后我们用 <code>make</code>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8</span><br></pre></td></tr></table></figure><blockquote><p>-j8就是开启8线程进行编译（-j后面的参数就是使用的线程数量），加快编译速度。这个过程相对比较漫长，中间可能会出现各种warning的提示，但只要最后100%就OK 根据自己电脑情况合理选择</p></blockquote><p>编译成功后运行 make install安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>修改 <code>~/.bashrc</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc </span><br></pre></td></tr></table></figure><p>在文件末尾加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OpenCV 4.5.4</span></span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/lib/opencv4.5.4/lib/pkgconfig  </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib/opencv4.5.4/lib</span><br></pre></td></tr></table></figure><p>source环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入命令查看opencv版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv4 --modversion</span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image.png" alt=" "></p><blockquote><p>需要查看其他版本的 把opencv4 改成 opencv 即可</p></blockquote><p>也可以试运行 例子程序 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/opencv-4.6.0/samples/cpp/example_cmake #修改为自己对应下载的版本号码</span><br><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>这里也可以运行我提供的测试程序</p><p>新建 <code>detect.py</code> 写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;armor.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查图像是否成功读取</span></span><br><span class="line"><span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像读取失败，请检查文件路径&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 将图像转换为灰度图像</span></span><br><span class="line">    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示原始图像和灰度图像</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, image)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Gray Image&#x27;</span>, gray_image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待按键按下，然后关闭所有窗口</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存灰度图像</span></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;armor_gray.png&#x27;</span>, gray_image)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 <code>python3 detect.py</code> 得到如下图片 就证明成功了!!! (撒花)</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-3.png" alt=" "></p><p>细心的同学 应该也注意到 在文件夹内多了一个新文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── armor_gray<span class="selector-class">.jpg</span></span><br><span class="line">├── armor<span class="selector-class">.png</span></span><br><span class="line">└── detect.py</span><br></pre></td></tr></table></figure><p>至此 OpenCV 环境就算搭建完成了 后续有相关需求的同学 也可以通过 安装不同版本<code>cv</code>或者使用 Anaconda 去管理不同的python版本等不同环境,以适应不同的工作环境<br>但值得注意的是conda有时候面临一些和项目冲突的地方 会报错 此时需要完全退出conda环境(包括base)</p><hr><h2 id="图像处理知识预备"><a href="#图像处理知识预备" class="headerlink" title="图像处理知识预备"></a>图像处理知识预备</h2><h3 id="图像的空间表示"><a href="#图像的空间表示" class="headerlink" title="图像的空间表示"></a>图像的空间表示</h3><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-6.png" alt=" "></p><blockquote><p>摘自 Rafeal C.Gonzalez(拉斐尔·C. 冈萨雷斯) Richard E.Woods(理查德·E. 伍兹) 老师的著作 Digital Image Processing,Fourth Edition(数字图像处理 第四版)</p></blockquote><p><strong>图像在计算机中是一个二维离散信号，通常表示为矩阵形式</strong></p><p>$$<br>I(x, y) \in \mathbb{R}^{M \times N}<br>$$</p><p>其中 $x$ 和 $y$ 是像素坐标，$M$ 和 $N$ 是图像的高度和宽度。对于彩色图像，通常使用三通道 $RGB$：</p><p>$$<br>I(x, y) &#x3D; [R(x, y), G(x, y), B(x, y)]<br>$$</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-4.png" alt=" "></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-5.png" alt=" "></p><blockquote><p>从这我们可以看出图像的数据不同于自然界中连续的图像色彩 而是一个个离散的像素点 意味着一个图像中 存储一个像素所用的位数(bit)越多 也就是常说的位深越高 图像就越清晰 所表达的信息就越丰富</p></blockquote><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-17.png"></p><p>我们后期主要使用的灰度图像 是一个单通道图像 只用 一位表示 即只有0和1 表示黑和白 虽然在视觉上不如彩色图像包含信息多 但在处理上灰度图像更简单更便捷也更迅速</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-18.png" alt=" "></p><h3 id="图像的颜色空间"><a href="#图像的颜色空间" class="headerlink" title="图像的颜色空间"></a>图像的颜色空间</h3><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-8.png" alt=" "></p><ul><li><strong>RGB</strong>（Red, Green, Blue）基于加色原理,是最常用的颜色模型，</li><li>其中每个像素由三个通道组成，取值范围通常为 <code>[0, 255]</code>（8位图像）。</li></ul><p>$$<br>\text{Image} &#x3D; (R, G, B)&#x3D;\left( \frac{r}{255}, \frac{g}{255}, \frac{b}{255} \right), \quad R,G,B \in [0, 255]<br>$$</p><p>白色 RGB(255,255,255)<br>黑色 RGB(0,0,0)</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-7.png"></p><p><code>cd Test2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像（OpenCV默认读取为BGR格式）</span></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&quot;image.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 转换为RGB格式</span></span><br><span class="line">img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离RGB通道</span></span><br><span class="line">r, g, b = cv2.split(img_rgb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并RGB通道</span></span><br><span class="line">img_red = cv2.merge([r, g, b])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Original Image&quot;</span>, img_bgr)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Red Image&quot;</span>, img_red)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>蓝色和红色发生调换</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/%E6%88%AA%E5%9B%BE%202025-02-23%2001-01-30.png"></p><h4 id="HSV-HSL颜色空间"><a href="#HSV-HSL颜色空间" class="headerlink" title="HSV&#x2F;HSL颜色空间"></a>HSV&#x2F;HSL颜色空间</h4><ul><li><strong>HSV</strong>（Hue, Saturation, Value）和 <strong>HSL</strong>（Hue, Saturation, Lightness）是面向视觉感知的颜色模型,也会是我们以后经常使用的颜色空间。</li></ul><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-9.png" alt=" "></p><ul><li><strong>Hue（色相）</strong>：颜色类型，角度范围 <code>[0°, 360°)</code>，在OpenCV中映射为 <code>[0, 179]</code>（8位图像）。</li><li><strong>Saturation（饱和度）</strong>：颜色纯度，范围 <code>[0, 1]</code>（OpenCV中映射为 <code>[0, 255]</code>）。</li><li><strong>Value(明度)</strong> 或 <strong>Lightness(亮度)</strong> ：颜色明暗程度，范围 <code>[0, 1]</code>（OpenCV中映射为 <code>[0, 255]</code>）。</li></ul><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-13.png" alt=" "></p><blockquote><p>白色 HSV(0,0,1)<br>黑色 HSV(0,0,0)</p></blockquote><p><strong>RGB到HSV的转换公式</strong>（标准化到 [0,1]）：</p><ol><li><p>计算最大值 $ C_{\text{max}} &#x3D; \max(R, G, B) $ 和最小值 $ C_{\text{min}} &#x3D; \min(R, G, B) $。</p></li><li><p>计算差值 $ \Delta &#x3D; C_{\text{max}} - C_{\text{min}} $。</p></li><li><p><strong>Hue</strong>：</p><span> $$H = \begin{cases}0^\circ & \text{if } \Delta = 0 \\60^\circ \times \left( \frac{G - B}{\Delta} +0 \right) & \text{if } C_{\text{max}} = R \\60^\circ \times \left( \frac{B - R}{\Delta} + 2 \right) & \text{if } C_{\text{max}} = G \\60^\circ \times \left( \frac{R - G}{\Delta} + 4 \right) & \text{if } C_{\text{max}} = B\end{cases}$$</span></li></ol><p> <strong>Saturation</strong>：</p>   <span>    $$   S =    \begin{cases}   0 & \text{if } C_{\text{max}} = 0 \\   \frac{\Delta}{C_{\text{max}}} & \text{else}   \end{cases}   $$ **Value**：   $$   V = C_{\text{max}}   $$   </span><p><code>cd Test3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为HSV颜色空间（注意OpenCV中H范围为[0,179]，S/V为[0,255]）</span></span><br><span class="line">img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离HSV通道</span></span><br><span class="line">h, s, v = cv2.split(img_hsv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：提取红色区域（H≈0或H≈180附近）</span></span><br><span class="line">lower_red1 = np.array([<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>])</span><br><span class="line">upper_red1 = np.array([<span class="number">10</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">lower_red2 = np.array([<span class="number">170</span>, <span class="number">50</span>, <span class="number">50</span>])</span><br><span class="line">upper_red2 = np.array([<span class="number">180</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">mask_red = cv2.inRange(img_hsv, lower_red1, upper_red1) | cv2.inRange(img_hsv, lower_red2, upper_red2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示原始图像和红色掩膜</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, img_bgr)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Red Mask&#x27;</span>, mask_red)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待按键，然后关闭所有窗口</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-14.png" alt=" "></p><p><strong>总结</strong></p><table><thead><tr><th>颜色空间</th><th>通道含义</th><th>主要应用</th></tr></thead><tbody><tr><td>RGB&#x2F;BGR</td><td>红、绿、蓝</td><td>图像显示与存储</td></tr><tr><td>HSV&#x2F;HSL</td><td>色相、饱和度、明度&#x2F;亮度</td><td>颜色分割、滤镜</td></tr></tbody></table><p><strong>OpenCV颜色空间通用转换函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：cv2.cvtColor(src, code)</span></span><br><span class="line"><span class="comment"># 示例：BGR转灰度图</span></span><br><span class="line">img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的转换代码包括：</span></span><br><span class="line"><span class="comment"># COLOR_BGR2RGB, COLOR_BGR2HSV, COLOR_BGR2LAB, COLOR_BGR2YUV等</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Test4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&quot;image.png&quot;</span>)</span><br><span class="line">img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为不同颜色空间</span></span><br><span class="line">img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)</span><br><span class="line">img_lab = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2LAB)</span><br><span class="line">img_ycrcb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2YCrCb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>), plt.imshow(img_rgb), plt.title(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), plt.imshow(img_hsv), plt.title(<span class="string">&quot;HSV&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>), plt.imshow(img_lab), plt.title(<span class="string">&quot;LAB&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>), plt.imshow(img_ycrcb), plt.title(<span class="string">&quot;YCbCr&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li><strong>通道范围</strong>：OpenCV中不同颜色空间的通道范围可能不同（如HSV的H通道为 <code>[0,179]</code>）。</li><li><strong>数据类型</strong>：颜色空间转换前需确保图像为 <code>float32</code> 或 <code>uint8</code> 类型。</li><li><strong>颜色失真</strong>：多次颜色空间转换可能导致精度损失。</li></ol><h3 id="图像形态学特征操作"><a href="#图像形态学特征操作" class="headerlink" title="图像形态学特征操作"></a>图像形态学特征操作</h3><h4 id="膨胀与腐蚀"><a href="#膨胀与腐蚀" class="headerlink" title="膨胀与腐蚀"></a>膨胀与腐蚀</h4><p>对图像形态学特征 最基础的就是 <strong>膨胀</strong>（Dilation）和 <strong>腐蚀</strong>（Erosion）。</p><ul><li><strong>膨胀</strong>（Dilation）：<br>$$<br>A \oplus B &#x3D; { z | (\hat{B})_z \cap A \neq \emptyset }<br>$$</li><li><strong>腐蚀</strong>（Erosion）：<br>$$<br>A \ominus B &#x3D; { z | (B)_z \subseteq A }<br>$$<br>其中 $B$ 是结构元素。</li></ul><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-15.png"></p><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">dilated = cv2.dilate(img, kernel)</span><br><span class="line">eroded = cv2.erode(img, kernel)</span><br></pre></td></tr></table></figure><p><strong>开运算与闭运算</strong></p><ul><li>开运算：先腐蚀后膨胀（去除小物体）。</li><li>闭运算：先膨胀后腐蚀（填充小孔）。</li></ul><p>一次膨胀一次腐蚀 保持体积不变</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-12.png"></p><h4 id="滤波卷积"><a href="#滤波卷积" class="headerlink" title="滤波卷积"></a>滤波卷积</h4><p>图像滤波的核心是卷积运算。给定图像 $I(x, y)$ 和卷积核 $K(i, j)$，卷积公式为：<br>$$<br>(I * K)(x, y) &#x3D; \sum_{i&#x3D;-a}^{a} \sum_{j&#x3D;-b}^{b} I(x-i, y-j) \cdot K(i, j)<br>$$<br>其中 $K$ 的大小为 $(2a+1) \times (2b+1)$。</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-10.png"></p><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">kernel = np.array([[<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># 锐化卷积核</span></span><br><span class="line">filtered = cv2.filter2D(img, -<span class="number">1</span>, kernel)</span><br></pre></td></tr></table></figure><h3 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h3><p>高斯核的数学公式（标准差为 $\sigma$：<br>$$<br>K(i, j) &#x3D; \frac{1}{2\pi\sigma^2} e^{-\frac{i^2 + j^2}{2\sigma^2}}<br>$$<br>离散化后，生成高斯核矩阵。</p><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blur = cv2.GaussianBlur(img, (<span class="number">5</span>,<span class="number">5</span>), sigmaX=<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure><h3 id="Sobel算子边缘检测"><a href="#Sobel算子边缘检测" class="headerlink" title="Sobel算子边缘检测"></a>Sobel算子边缘检测</h3><p>Sobel算子的水平和垂直卷积核：</p><span>$$K_x = \begin{bmatrix}-1 & 0 & 1 \\-2 & 0 & 2 \\-1 & 0 & 1\end{bmatrix}, \quadK_y = \begin{bmatrix}-1 & -2 & -1 \\0 & 0 & 0 \\1 & 2 & 1\end{bmatrix}$$梯度幅值计算：$$G = \sqrt{G_x^2 + G_y^2}$$</span><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grad_x = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">3</span>)</span><br><span class="line">grad_y = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">grad = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="图像插值"><a href="#图像插值" class="headerlink" title="图像插值"></a>图像插值</h3><p>在缩放或旋转时，像素位置可能非整数，需插值。常用方法：</p><ul><li><p><strong>双线性插值</strong>：</p><p>$$<br>I(x, y) &#x3D; (1 - \alpha)(1 - \beta) I_{00} + \alpha(1 - \beta) I_{10} + (1 - \alpha)\beta I_{01} + \alpha\beta I_{11}<br>$$</p><p>其中 $$\alpha &#x3D; x - \lfloor x \rfloor$$  $$\beta &#x3D; y - \lfloor y \rfloor$$</p></li></ul><p><strong>OpenCV实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resized = cv2.resize(img, <span class="literal">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv2.INTER_LINEAR)</span><br></pre></td></tr></table></figure><h2 id="armor-detect"><a href="#armor-detect" class="headerlink" title="armor_detect"></a>armor_detect</h2><p>这是Roboaster比赛中常见的装甲板图形</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    A[Robomaster装甲板识别] --&gt; B[图像预处理];    B --&gt; B1[选取颜色通道阈值区间];    B --&gt; B2[二值化];    B --&gt; B3[形态学操作];    B --&gt; B4[边缘检测];    B --&gt; B5[...];    B1 --&gt; C[筛选矩形];    B2 --&gt; C;    B3 --&gt; C;    B4 --&gt; C;    B5 --&gt; C;    C --&gt; C1[查找轮廓];    C1 --&gt; C2[筛选除去部分矩形];    C2 --&gt; D[判断是否为装甲板];    D --&gt; E[遍历矩形，两两组合判断];    E --&gt; F[识别装甲板];    F --&gt; F1[装甲板中心相对画面中心坐标];  </pre></div><p>观察图形可以看到</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-1.png" alt=" "></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-2.png" alt=" "></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-16.png" alt=" "></p><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV !"></a>OpenCV !</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libopencv-dev</span><br></pre></td></tr></table></figure><p>确保环境已经搭建 本节课基于用 OpenCV 在屏幕右上角绘制矩形为案例 带大家了解基本的操作思路</p><blockquote><p>演示摄像头搭载 USB 全域部摄像头 进行扫描 有条件的同学可以购买类似USB驱动摄像头 使用电脑自带摄像头也是没问题的</p></blockquote><h3 id="安装-usb-cam摄像头驱动"><a href="#安装-usb-cam摄像头驱动" class="headerlink" title="安装 usb_cam摄像头驱动"></a>安装 usb_cam摄像头驱动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-humble-usb_cam </span><br></pre></td></tr></table></figure><p>cheese 茄子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cheese </span><br><span class="line">cheese  # 运行茄子</span><br></pre></td></tr></table></figure><p>运行 <code>red_circle_detect.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">2</span>) <span class="comment"># 数字根据自己摄像头确定编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取视频帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法获取视频帧&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图像转换为HSV颜色空间（更好的颜色分离）</span></span><br><span class="line">    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义红色的HSV范围（需要根据实际情况调整）</span></span><br><span class="line">    lower_red1 = np.array([<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>])</span><br><span class="line">    upper_red1 = np.array([<span class="number">10</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    lower_red2 = np.array([<span class="number">160</span>, <span class="number">100</span>, <span class="number">100</span>])</span><br><span class="line">    upper_red2 = np.array([<span class="number">180</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建红色掩膜</span></span><br><span class="line">    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)</span><br><span class="line">    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)</span><br><span class="line">    mask = cv2.bitwise_or(mask1, mask2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图像预处理</span></span><br><span class="line">    mask = cv2.erode(mask, <span class="literal">None</span>, iterations=<span class="number">2</span>)</span><br><span class="line">    mask = cv2.dilate(mask, <span class="literal">None</span>, iterations=<span class="number">2</span>)</span><br><span class="line">    mask = cv2.GaussianBlur(mask, (<span class="number">9</span>, <span class="number">9</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 霍夫圆检测</span></span><br><span class="line">    circles = cv2.HoughCircles(mask, cv2.HOUGH_GRADIENT, dp=<span class="number">1.2</span>, minDist=<span class="number">100</span>,</span><br><span class="line">                              param1=<span class="number">50</span>, param2=<span class="number">30</span>, minRadius=<span class="number">20</span>, maxRadius=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果检测到圆形</span></span><br><span class="line">    <span class="keyword">if</span> circles <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        circles = np.<span class="built_in">round</span>(circles[<span class="number">0</span>, :]).astype(<span class="string">&quot;int&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历所有检测到的圆</span></span><br><span class="line">        <span class="keyword">for</span> (x, y, r) <span class="keyword">in</span> circles:</span><br><span class="line">            <span class="comment"># 绘制圆形和中心点</span></span><br><span class="line">            cv2.circle(frame, (x, y), r, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line">            cv2.circle(frame, (x, y), <span class="number">2</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">            <span class="comment"># 显示圆心坐标</span></span><br><span class="line">            cv2.putText(frame, <span class="string">f&quot;(<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)&quot;</span>, (x-<span class="number">50</span>, y-<span class="number">20</span>),</span><br><span class="line">                       cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示结果</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;Frame&quot;</span>, frame)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;Mask&quot;</span>, mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按q退出</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放资源</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>随手画一张图检验一下</p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-20.png" alt=" "></p><p>可以看到图片上存在不同颜色的干扰 以及形态的干扰 两者都需要考虑</p><p>看看检测结果</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/result.png"></p><p>正确分离出了红色部分</p><p>而且图形判断正确 没有误判矩形</p><blockquote><p>但在实际比赛中 可能受到光照等因素影响 以及小球颜色多样 可能没有如此鲜明特征等等 这都会影响我们识别的结果 这里提供一个简单的样例思路 还有很多地方可以优化</p></blockquote><h2 id="作业-2"><a href="#作业-2" class="headerlink" title="作业"></a>作业</h2><ul><li><p>基于OpenCV编写识别程序 识别绿色三角形 (识别环境自己绘图,越能适应复杂环境,作业评分越高)</p></li><li><p>ROS与OpenCV的转换</p><ul><li>以ROS功能包的形式编写节点实时订阅摄像头发布的图像话题消息并将ROS图像消息转换为OpenCV图像</li><li>在图像右上角绘制矩形，再将OpenCV图像转换回ROS图像消息重新发布到一个新的话题</li><li>用rviz或者rqt_image_view显示图像消息</li></ul></li></ul><p>作业均要求提供 源程序和实例图像 README讲解运行过程 (可引用图片展示) 截止于 <strong>2025年3月29日晚24点</strong></p><p><strong>样例</strong></p><p><img src="/images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/image-21.png" alt=" "></p><p><img src="/./images/%E8%A7%86%E8%A7%89%E7%BB%84%E5%9F%B9%E8%AE%AD/7.png" alt=" "></p><!-- 第四节课会给大家提供相关导航仿真资料和装甲板识别资料，大家可以二选一进行学习slam建图或装甲板识别（这部分自学为主）最后带大家完成一个比较大的项目，在自己电脑上部署一个yolov5进行一些简单的识别 -->]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Robomaster </tag>
            
            <tag> 视觉组培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32学习记录</title>
      <link href="/2024/10/20/Stm32%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/10/20/Stm32%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一些好用的网站<br><a href="https://shequ.stmicroelectronics.cn/thread-623877-1-1.html">STM32参考手册大汇总，史上巨全，再也不用到处找啦</a><br><a href="https://www.cnblogs.com/ligangblog/p/9963786.html">keil编译运行错误，缺少error:#5：#include “core_cm3.h”</a><br><a href="https://zhuanlan.zhihu.com/p/561047339">MDK5.37不预安装Compiler Version5解决办法</a><br><a href="https://blog.csdn.net/AI_QS_CSDN/article/details/105213662">keil5 显示 No target connected</a><br><a href="https://blog.csdn.net/kangweijian/article/details/107564868">STM32 No Target connected四种解决办法</a><br><a href="https://bbs.huaweicloud.com/blogs/433459">【Keil5教程及技巧】</a><br><a href="https://blog.csdn.net/gitblog_06586/article/details/142399385">Keil 丢失编译器版本5、内核文件core_cm3.c报错解决方案</a><br>发现与stm32的三种启动方式有关（我听信别人，如果使用swd下载程序，则boot0就可以悬空，才导致出现flash锁死），于是我将程序擦除后，并用短接帽将boot0接地，boot1此时可以作它用，重新进入调试时，就可以正常使用的了。<br><a href="https://blog.csdn.net/m0_46217142/article/details/122861796">在MDK调试STM32出现“could not stop cortex-m device”解决办法</a><br><a href="https://blog.csdn.net/HongAndYi/article/details/115604543">使用STM32CubeMX和STM32CubeIDE的常见问题和注意事项</a><br><a href="https://doc.embedfire.com/mcu/stm32/f103zhinanzhe/std/zh/latest/book/USART.html">官方文档-串口通信</a><br><a href="https://shequ.stmicroelectronics.cn/thread-634287-1-1.html">【经验分享】STM32使用HAL库的ADC多通道数据采集（DMA+非DMA方式）+ 读取内部传感器温度</a><br><a href="https://www.cnblogs.com/Lavender-edgar/p/18347469">ADC模数转换</a></p></blockquote><h1 id="Stm32F103C8T6学习"><a href="#Stm32F103C8T6学习" class="headerlink" title="Stm32F103C8T6学习"></a>Stm32F103C8T6学习</h1><blockquote><p>课设寻迹小车需要,遂开始学习单片机有关知识,在此进行记录学习</p></blockquote><p>下载Keil5(不要下载太高版本的),高版本不再自带arm compiler,需要自行安装version5编译器版本<br>小tips,也可以从别人那里直接copy <strong>AEMCC</strong>整个目录到自己的ARM目录下去配置</p><p>这里贴几个网图</p><p><img src="/./images/Stm32%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.png" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> SMART </tag>
            
            <tag> stm32 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用教程</title>
      <link href="/2024/10/11/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/10/11/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍vim的安装与使用,(待更新)<br><a href="https://cn.linux-console.net/?p=29585">ubuntu-vim官网文档-安装与介绍</a><br><a href="https://www.runoob.com/linux/linux-vim.html">Vim-菜鸟教程</a><br><a href="https://blog.csdn.net/scaleqiao/article/details/45153379">CSDN-进阶参数选项指令</a></p></blockquote><h1 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h1><p><a href="https://cn.linux-console.net/?p=29585">ubuntu-vim安装官网文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version</span><br></pre></td></tr></table></figure><blockquote><p>一些设置今后可以cd &#x2F;etc&#x2F;vim&#x2F; 找到vimrc文件进行设置</p></blockquote><h1 id="指令集合"><a href="#指令集合" class="headerlink" title="指令集合"></a>指令集合</h1><h2 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi</span><br></pre></td></tr></table></figure><h1 id="vi-vim-基本使用方法"><a href="#vi-vim-基本使用方法" class="headerlink" title="vi&#x2F;vim 基本使用方法"></a>vi&#x2F;vim 基本使用方法</h1><blockquote><p>vi&#x2F;vim 共分为三种模式，命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</p></blockquote><p><strong style="color:red;font-family:'仿宋';"> 命令模式 </strong></p><blockquote><p><strong style="font-family:'仿宋';">用户刚刚启动 vi&#x2F;vim，便进入了命令模式</strong></p></blockquote><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令</p><p><strong>以下是普通模式常用的几个命令：</strong></p><table><thead><tr><th align="center">指令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">切换到输入模式，在光标当前位置开始输入文本</td></tr><tr><td align="center">x</td><td align="center">删除当前光标所在处的字符</td></tr><tr><td align="center">:</td><td align="center">切换到底线命令模式，以在最底一行输入命令</td></tr><tr><td align="center">a</td><td align="center">进入插入模式，在光标下一个位置开始输入文本</td></tr><tr><td align="center">o</td><td align="center">在当前行的下方插入一个新行，并进入插入模式</td></tr><tr><td align="center">O</td><td align="center">在当前行的上方插入一个新行，并进入插入模式</td></tr><tr><td align="center">dd</td><td align="center">剪切当前行</td></tr><tr><td align="center">yy</td><td align="center">复制当前行</td></tr><tr><td align="center">p</td><td align="center">粘贴剪贴板内容到光标下方</td></tr><tr><td align="center">P</td><td align="center">粘贴剪贴板内容到光标上方</td></tr><tr><td align="center">u</td><td align="center">撤销上一次操作</td></tr><tr><td align="center">Ctrl + r</td><td align="center">重做上一次撤销的操作</td></tr><tr><td align="center">:w</td><td align="center">保存文件</td></tr><tr><td align="center">:q</td><td align="center">退出 Vim 编辑器</td></tr><tr><td align="center">:q!</td><td align="center">强制退出Vim 编辑器，不保存修改</td></tr></tbody></table><blockquote><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令行模式输入更多命令</p></blockquote><p><strong style="color:red; font-family:'仿宋';">输入模式</strong></p><blockquote><p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p></blockquote><p>在输入模式中，可以使用以下按键：</p><table><thead><tr><th align="center">按键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">ENTER</td><td align="center">回车键，换行</td></tr><tr><td align="center">BACK SPACE</td><td align="center">退格键，删除光标前一个字符</td></tr><tr><td align="center">DEL</td><td align="center">删除键，删除光标后一个字符</td></tr><tr><td align="center">方向键</td><td align="center">在文本中移动光标</td></tr><tr><td align="center">HOME&#x2F;END</td><td align="center">移动光标到行首&#x2F;行尾</td></tr><tr><td align="center">Page Up&#x2F;Page Down</td><td align="center">上&#x2F;下翻页</td></tr><tr><td align="center">Insert</td><td align="center">切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</td></tr><tr><td align="center">ESC</td><td align="center">退出输入模式，切换到命令模式</td></tr></tbody></table><p><strong style="color:red; font-family:'仿宋';">底线命令模式<br></strong></p><blockquote><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p></blockquote><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><table><thead><tr><th align="center">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">:w</td><td align="center">保存文件</td></tr><tr><td align="center">:q</td><td align="center">退出 Vim 编辑器</td></tr><tr><td align="center">:wq</td><td align="center">保存文件并退出 Vim 编辑器</td></tr><tr><td align="center">:q!</td><td align="center">强制退出Vim编辑器，不保存修改</td></tr></tbody></table><p>三个模式表示图</p><p><img src="/./images/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/vim-vi-workmodel.png" alt=" "></p><p>移动光标的方法</p><table><thead><tr><th align="center">按键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">h 或 向左箭头键(←)</td><td align="center">光标向左移动一个字符</td></tr><tr><td align="center">j 或 向下箭头键(↓)</td><td align="center">光标向下移动一个字符</td></tr><tr><td align="center">k 或 向上箭头键(↑)</td><td align="center">光标向上移动一个字符</td></tr><tr><td align="center">l 或 向右箭头键(→)</td><td align="center">光标向右移动一个字符</td></tr></tbody></table><p>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</p><table><thead><tr><th align="center">按键组合</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">[Ctrl] + [f]</td><td align="center">屏幕向下移动一页，相当于 [Page Down] 按键 (常用)</td></tr><tr><td align="center">[Ctrl] + [b]</td><td align="center">屏幕向上移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="center">[Ctrl] + [d]</td><td align="center">屏幕向下移动半页</td></tr><tr><td align="center">[Ctrl] + [u]</td><td align="center">屏幕向上移动半页</td></tr><tr><td align="center">+</td><td align="center">光标移动到非空格符的下一行</td></tr><tr><td align="center">-</td><td align="center">光标移动到非空格符的上一行</td></tr></tbody></table><table><thead><tr><th align="center">按键组合</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">n&lt;space&gt;</td><td align="center">n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离</td></tr><tr><td align="center">0 或功能键[Home]</td><td align="center">移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="center">$ 或功能键[End]</td><td align="center">移动到这一行的最后面字符处(常用)</td></tr><tr><td align="center">H</td><td align="center">光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="center">M</td><td align="center">光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="center">L</td><td align="center">光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="center">G</td><td align="center">移动到这个档案的最后一行(常用)</td></tr><tr><td align="center">nG</td><td align="center">n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="center"><strong>&#x2F;word</strong></td><td align="center"><strong>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 bird 这个字符串，就输入 &#x2F;bird</strong></td></tr><tr><td align="center"><strong>?word</strong></td><td align="center"><strong>向光标之上寻找一个字符串名称为 word 的字符串</strong></td></tr><tr><td align="center"><strong>n</strong></td><td align="center"><strong>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说，我要连续找到 bird 并按下 n 后，会向下继续找到下一个名称为 vbird 的字符串</strong></td></tr><tr><td align="center"><strong>N</strong></td><td align="center"><strong>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作</strong></td></tr><tr><td align="center"><strong>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</strong></td><td align="center">**n1 与 n2 为数字，在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为word2举例来说，在 100 到 200 行之间搜寻 bird 并取代为 BIRD 则：<code>:100,200s/bird/BIRD/g</code></td></tr><tr><td align="center">:1,$s&#x2F;word1&#x2F;word2&#x2F;g 或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td><td align="center">从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2</td></tr><tr><td align="center">:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc</td><td align="center">从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代</td></tr><tr><td align="center">dd</td><td align="center">剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴</td></tr><tr><td align="center">ndd</td><td align="center">n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴</td></tr><tr><td align="center">d1G</td><td align="center">删除光标所在到第一行的所有数据</td></tr><tr><td align="center">dG</td><td align="center">删除光标所在到最后一行的所有数据</td></tr><tr><td align="center">d$</td><td align="center">删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="center">d0</td><td align="center">那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="center">yy</td><td align="center">复制游标所在的那一行(常用)</td></tr><tr><td align="center">nyy</td><td align="center">n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="center">y1G</td><td align="center">复制游标所在行到第一行的所有数据</td></tr><tr><td align="center">yG</td><td align="center">复制游标所在行到最后一行的所有数据</td></tr><tr><td align="center">y0</td><td align="center">复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="center">y$</td><td align="center">复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="center">J</td><td align="center">将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="center">c</td><td align="center">重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="center"><strong>u</strong></td><td align="center"><strong>复原前一个动作</strong></td></tr><tr><td align="center"><strong>[Ctrl]+r</strong></td><td align="center"><strong>重做上一个动作</strong></td></tr><tr><td align="center"><strong>.</strong></td><td align="center"><strong>重复前一个动作的意思</strong></td></tr></tbody></table><p>第三部分：一般模式切换到指令行模式的可用的按钮说明</p><table><thead><tr><th align="center">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">:w</td><td align="center">将编辑的数据写入硬盘档案中</td></tr><tr><td align="center">:w!</td><td align="center">若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="center">:q</td><td align="center">离开 vi</td></tr><tr><td align="center">:q!</td><td align="center">若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="center">:wq</td><td align="center">储存后离开，若为 :wq! 则为强制储存后离开</td></tr><tr><td align="center">ZZ</td><td align="center">这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="center">ZQ</td><td align="center">不保存，强制退出。效果等同于 :q!</td></tr><tr><td align="center">:w [filename]</td><td align="center">将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="center">:r [filename]</td><td align="center">在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="center">:n1,n2 w [filename]</td><td align="center">将 n1 到 n2 的内容储存成 filename 这个档案</td></tr><tr><td align="center">:! command</td><td align="center">暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr></tbody></table><p>vim 环境的变更</p><table><thead><tr><th align="center">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">:set nu</td><td align="center">显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="center">:set nonu</td><td align="center">与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p><p><img src="/./images/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/morden1.png" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 教程 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TurtleBot3</title>
      <link href="/2024/10/10/TurtleBot3/"/>
      <url>/2024/10/10/TurtleBot3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TurtleBot3 是一个基于ros的小型可编程开源机器人,广泛用于教育和研究领域,本文将介绍Turtlebot3的一些基本玩法,基于gazebo仿真系统(他也是基于ros系统的)进行仿真导航建图等操作<br><a href="https://emanual.robotis.com/docs/en/platform/turtlebot3/simulation/#gazebo-simulation">TurtleBot3官方文档</a><br><a href="https://blog.csdn.net/leo0308/article/details/138868282">CSDN:ROS2+TurtleBot3+Cartographer+Nav2实现slam建图和导航</a><br><a href="https://book.guyuehome.com/ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/">古月居-Gazebo进阶配置教程</a></p></blockquote><h1 id="TurtleBOt3安装"><a href="#TurtleBOt3安装" class="headerlink" title="TurtleBOt3安装"></a>TurtleBOt3安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-humble-turtlebot3*</span><br><span class="line">sudo apt install ros-humble-gazebo*</span><br><span class="line">sudo apt install ros-humble-cartogarpher</span><br><span class="line">sudo apt install ros-humble-cartographer_ros</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> apt install ros-humble-cartographer*</span></span><br><span class="line">sudo apt install ros-humble-navigation2</span><br><span class="line">sudo apt install ros-humble-nav2-bringup</span><br><span class="line">sudo apt install ros-humble-releop-twist-keyboard #键盘控制程序包安装</span><br></pre></td></tr></table></figure><h1 id="carto导航"><a href="#carto导航" class="headerlink" title="carto导航"></a>carto导航</h1><h2 id="加载gazebo仿真地图"><a href="#加载gazebo仿真地图" class="headerlink" title="加载gazebo仿真地图"></a>加载gazebo仿真地图</h2><blockquote><p>你可以创建一个新的工作空间存放源码进行虚拟仿真导航实验,也可以直接用sudo apt install安装的包直接运行,新手最好先直接用sudo的包最有保障,在&#x2F;opt&#x2F;ros&#x2F;humble&#x2F;share&#x2F;目录下,若git的包和apt的包不兼容,后期调试可能会有奇怪的报错,若两者兼容,则会将你工作空间的包覆盖apt的包</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/turtlebot_ws/src/</span><br><span class="line">cd ~/turtlebot3_ws/src/</span><br><span class="line">git clone https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git</span><br><span class="line">cd ~/turtlebot3_ws &amp;&amp; colcon build --symlink-install #symlink是创建链接符号,保障在修改工作空间代码后会直接生效,不用再source install/setup.bash</span><br></pre></td></tr></table></figure><p>在~&#x2F;.bashrc中加入turtlebot的机器人的相关环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export TURTLEBOT3_MODEL=burger&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span>是打印出后面的字符串, &gt;&gt; 表示把他追加到.bashrc文件中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;export TURTLEBOT3_MODEL=burger&#x27;</span> &gt; ~/.bashrc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意只有一个 &gt; 的表示将内容覆盖.bashrc文件,不要输错啦</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>⚠️ 此处要注意添加进入.bashrc中就是永久更改,后续要替换其他model要删除此条命令然后再换其他的,如果不想永久更改,可以使用如下命令,只在此终端生效,之后再打开另一个终端就要再输入一遍(.bashrc本质上就是打开终端后自动执行一些指令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TURTLEBOT3_MODEL=burger</span><br></pre></td></tr></table></figure><p>因为不同的turtlebot可能有不同的机器人参数,我们这里选择burger的model模型,当然你也可以选择其他模型,如waffle</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TURTLEBOT3_MODEL=waffle</span><br></pre></td></tr></table></figure><p>添加完成后记得source环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>也可以选择不同的文本编辑器进入~&#x2F;.bashrc直接修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bahsrc</span><br><span class="line">gedit ~/.bashrc </span><br><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>同样修改完成后需要在终端source一下</p><p>运行仿真地图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py</span><br></pre></td></tr></table></figure><p>如果成功,大概率可以看到如图所示地图<br><img src="/./images/TurtleBot3/1.png" alt=" "></p><blockquote><p><strong style="color: red ; font-family:'仿宋';">报错0:</strong>gazebo无法打开<br><img src="/./images/TurtleBot3/%E6%8A%A5%E9%94%990.png" alt=" "><br>一般下载完gazebo后自动加入自启动到环境变量,如果没加入,需要自行source,加入到.bashrc<br>检查是否是setup.bash问题<br>终端输入 source &#x2F;usr&#x2F;share&#x2F;gazebo&#x2F;setup.bash<br>重新运行gazebo ,如果成功了,继续下面步骤添加source到.bashrc<br>在终端输入 echo “source &#x2F;usr&#x2F;share&#x2F;gazebo&#x2F;setup.bash” &gt;&gt; ~&#x2F;.bashrc<br>source ~&#x2F;.bashrc即可</p></blockquote><blockquote><p><strong style="color: red ; font-family:'仿宋';">报错1:</strong>gazebo加载地图失败,崩溃退出<br><img src="/./images/TurtleBot3/%E6%8A%A5%E9%94%991.png" alt=" "><br>其实是gazebo后台没有完全关闭的原因<br>终端输入 killall gzserver 后重新运行指令即可</p></blockquote><blockquote><p>如果能打开gazebo但是地图出不来也可能是model没有下载或者链接不成功<br><strong style="color: red ; font-family:'仿宋';">方法一</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /opt/ros/humble/share/turtlebot3_gazebo/models</span><br></pre></td></tr></table></figure><p>看看是否有models文件,如果存在,执行下面指令,确保路径链接正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/opt/ros/humble/share/turtlebot3_gazebo/models</span><br></pre></td></tr></table></figure><p><strong style="color: red ; font-family:'仿宋';">方法二</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.gazebo/</span><br><span class="line">git clone https://github.com/osrf/gazebo_models models</span><br></pre></td></tr></table></figure><p>需要删除.git不然可能会出错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf models/.git</span><br></pre></td></tr></table></figure><p>这样应该model就能链接到了</p></blockquote><h2 id="进行slam建图"><a href="#进行slam建图" class="headerlink" title="进行slam建图"></a>进行slam建图</h2><p>新建一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlebot3_cartographer cartographer.launch.py use_sim_time:=True</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在gazebo中虚拟仿真时间戳sim_time设置为<span class="literal">true</span>,实时建图设置为<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><p>再新建一个终端,启动刚刚gazebo地图节点的功能包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py</span><br></pre></td></tr></table></figure><p>再新建一个终端,启动键盘控制节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlebot3_teleop teleop_keyboard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据指令操作时候必须在终端内,不能点到其他地方</span></span><br></pre></td></tr></table></figure><p>正常情况用键盘操控机器人走一圈地图会有如下效果<br><img src="/./images/TurtleBot3/2.png" alt=" "></p><blockquote><p><strong style="color: red ; font-family:'仿宋';">报错2:</strong>:tf树transform错误<br><img src="/./images/TurtleBot3/%E6%8A%A5%E9%94%992.png" alt=" "><br>确保终端输入指令是use_sim_time &#x3D; True , 重新运行<br>若还未解决,检查launch,lua文件链接到的urdf文件,确保父节点的joint链接正确,一般父节点是base_link,每个frame_id都要核对清楚</p></blockquote><h2 id="save-map"><a href="#save-map" class="headerlink" title="save map"></a>save map</h2><p>将刚刚建立的地图保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run nav2_map_server map_saver_cli -f ~/map</span><br></pre></td></tr></table></figure><p><strong>-f</strong> 是一个选项,用于保存地图路径的文件名,即会在~&#x2F;目录下生成map.pgm和map.yaml文件,注意可以修改为其他目录路径,但最后都应为&#x2F;map的形式结尾,否则无法生成地图</p><h1 id="nav2导航"><a href="#nav2导航" class="headerlink" title="nav2导航"></a>nav2导航</h1><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlebot3_cartographer cartographer.launch.py use_sim_time:=True</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:=True map:=~/rm/sllidar/src/turtlrbot3/map.yaml</span><br></pre></td></tr></table></figure><p>确保开启第一,二个指令后开启第三个才会接收数据,地图存放位置就是前面建图保存的yaml文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 导航 </tag>
            
            <tag> turtlebot </tag>
            
            <tag> gazebo </tag>
            
            <tag> 虚拟仿真 </tag>
            
            <tag> slam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terminate终端</title>
      <link href="/2024/10/10/Terminate%E7%BB%88%E7%AB%AF/"/>
      <url>/2024/10/10/Terminate%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍一些好玩好用的终端插件,分享一些diy设置</p></blockquote><h1 id="Terminator"><a href="#Terminator" class="headerlink" title="Terminator"></a>Terminator</h1><blockquote><p>Terminator 是linux中一个非常实用且开源的终端仿真器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure><p>以后打开终端便会自动是用terminator,要想修改可以自行查询更改</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote><p>下面介绍一些常见的指令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//第一部份：关于在同一个标签内的操作</span><br><span class="line">Alt+Up                          //移动到上面的终端</span><br><span class="line">Alt+Down                        //移动到下面的终端</span><br><span class="line">Alt+Left                        //移动到左边的终端</span><br><span class="line">Alt+Right                       //移动到右边的终端</span><br><span class="line">Ctrl+Shift+O                    //水平分割终端</span><br><span class="line">Ctrl+Shift+E                    //垂直分割终端</span><br><span class="line">Ctrl+Shift+Right                //在垂直分割的终端中将分割条向右移动</span><br><span class="line">Ctrl+Shift+Left                 //在垂直分割的终端中将分割条向左移动</span><br><span class="line">Ctrl+Shift+Up                   //在水平分割的终端中将分割条向上移动</span><br><span class="line">Ctrl+Shift+Down                 //在水平分割的终端中将分割条向下移动</span><br><span class="line">Ctrl+Shift+S                    //隐藏/显示滚动条</span><br><span class="line">Ctrl+Shift+F                    //搜索</span><br><span class="line">Ctrl+Shift+C                    //复制选中的内容到剪贴板</span><br><span class="line">Ctrl+Shift+V                    //粘贴剪贴板的内容到此处</span><br><span class="line">Ctrl+Shift+W                    //关闭当前终端</span><br><span class="line">Ctrl+Shift+Q                    //退出当前窗口，当前窗口的所有终端都将被关闭</span><br><span class="line">Ctrl+Shift+X                    //最大化显示当前终端</span><br><span class="line">Ctrl+Shift+Z                    //最大化显示当前终端并使字体放大</span><br><span class="line">Ctrl+Shift+N or Ctrl+Tab        //移动到下一个终端</span><br><span class="line">Ctrl+Shift+P or Ctrl+Shift+Tab  //Crtl+Shift+Tab 移动到之前的一个终端</span><br><span class="line"> </span><br><span class="line">//第二部份：有关各个标签之间的操作</span><br><span class="line">F11                             //全屏开关</span><br><span class="line">Ctrl+Shift+T                    //打开一个新的标签</span><br><span class="line">Ctrl+PageDown                   //移动到下一个标签</span><br><span class="line">Ctrl+PageUp                     //移动到上一个标签</span><br><span class="line">Ctrl+Shift+PageDown             //将当前标签与其后一个标签交换位置</span><br><span class="line">Ctrl+Shift+PageUp               //将当前标签与其前一个标签交换位置</span><br><span class="line">Ctrl+Plus (+)                   //增大字体</span><br><span class="line">Ctrl+Minus (-)                  //减小字体</span><br><span class="line">Ctrl+Zero (0)                   //恢复字体到原始大小</span><br><span class="line">Ctrl+Shift+R                    //重置终端状态</span><br><span class="line">Ctrl+Shift+G                    //重置终端状态并clear屏幕</span><br><span class="line">Super+g                         //绑定所有的终端，以便向一个输入能够输入到所有的终端</span><br><span class="line">Super+Shift+G                   //解除绑定</span><br><span class="line">Super+t                         //绑定当前标签的所有终端，向一个终端输入的内容会自动输入到其他终端</span><br><span class="line">Super+Shift+T                   //解除绑定</span><br><span class="line">Ctrl+Shift+I                    //打开一个窗口，新窗口与原来的窗口使用同一个进程</span><br><span class="line">Super+i                         //打开一个新窗口，新窗口与原来的窗口使用不同的进程</span><br></pre></td></tr></table></figure><blockquote><p>可以终端内右键,首选项自行配置</p></blockquote><p>这里再分享一个比较好的CSDN教程 <a href="https://blog.csdn.net/u011895157/article/details/130608150">Ubuntu高效工具——autojump、terminator(快捷键失灵问题)</a></p><p>…以后有时间再更新玩玩哈哈哈<br>waiting…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Linux </tag>
            
            <tag> 视觉组 </tag>
            
            <tag> ubuntu </tag>
            
            <tag> terminate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的butterfiy主题的博客配置教程</title>
      <link href="/2024/09/22/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84butterfiy%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2024/09/22/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84butterfiy%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>scaffolds 修改post.md的默认模板(layout在_config.yml内默认设置为post时)</p></blockquote><h2 id="hexo-懒人包"><a href="#hexo-懒人包" class="headerlink" title="hexo 懒人包"></a>hexo 懒人包</h2><p>可用于U盘部署 不用安装nodejs npm等  适用于windows版本<br><a href="https://github.com/BitMOE/PortableHexo">PortableHexo-GitHub</a></p><p>Ubuntu Linux 的 node 另外下载解压<br><a href="https://nodejs.org/en/download">nodejs下载官网</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xJf node-v18.20.2-linux-x64.tar.xz -C /media/whale/Media/BLOG/Whaltze-BLOG/blog-demo/support/</span><br><span class="line">mv /media/whale/Media/BLOG/Whaltze-BLOG/blog-demo/support/node-v18.20.2-linux-x64 /media/whale/Media/BLOG/Whaltze-BLOG/blog-demo/support/nodejs</span><br></pre></td></tr></table></figure><p>解压对应压缩包 并且修改名字</p><p>验证 Node.js 是否可用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nodejs/bin/node -v</span><br><span class="line">./nodejs/bin/npm -v   </span><br></pre></td></tr></table></figure><h2 id="修改评论区-小剪刀分割线"><a href="#修改评论区-小剪刀分割线" class="headerlink" title="修改评论区 小剪刀分割线"></a>修改评论区 小剪刀分割线</h2><blockquote><p>参考 <a href="https://luoyuy.top/posts/5c76ad4123cd/#%E5%89%8D%E8%A8%80">洛语 の Blog</a></p></blockquote><ul><li>法一：修改 _config.butterfly.yml 文件中的 hr_icon -&gt; icon 内容（推荐）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The setting of divider icon (水平分隔線圖標設置)</span></span><br><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;f005&#x27;</span> <span class="comment"># the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><ul><li>法二：修改 <code>themes\butterfly\source\css\_global\index.styl</code> 文件中的 <code>hr -&gt; &amp;:before -&gt; content</code> 内容</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hr</span></span><br><span class="line">    <span class="string">//</span> <span class="string">...</span></span><br><span class="line">    <span class="string">&amp;:before</span></span><br><span class="line">    <span class="string">//</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">$hr-icon</span> <span class="string">//</span> <span class="string">同样修改为如</span> <span class="string">&#x27;\3423&#x27;</span> <span class="string">形式</span></span><br></pre></td></tr></table></figure><p><strong>如果想去除浮动图标，仅需将参数修改为 ‘’ 即可，例如 <code>icon: &#39;&#39;</code></strong></p><h2 id="Font-Awesome-icon-图标"><a href="#Font-Awesome-icon-图标" class="headerlink" title="Font Awesome icon 图标"></a>Font Awesome icon 图标</h2><p>the unicode value of Font Awesome icon 获取方法：</p><p>打开 Font Awesome 网址：<a href="https://fontawesome.com/v5/search">Search v5 Icons | Font Awesome</a></p><p>通过搜索栏选择并点击自己心仪的图标</p><p>下图中 所<code>Unicode</code>即为所需 <code>f005</code> 小星星图标</p><p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84butterfiy%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/image-6"></p><h2 id="删除comment-水平分割线-小剪刀图标"><a href="#删除comment-水平分割线-小剪刀图标" class="headerlink" title="删除comment 水平分割线 小剪刀图标"></a>删除comment 水平分割线 小剪刀图标</h2><p>进入 <code>M:\BLOG\Whaltze-BLOG\blog-demo\node_modules\hexo-theme-butterfly\scripts\events</code>文件夹</p><p>找到<code>merge_config</code>文件 修改 为<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon</span>: &#123;</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&#x27;icon-top&#x27;</span>: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84butterfiy%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/image-7"></p><p>删除分割线 </p><p>进入<code>M:\BLOG\Whaltze-BLOG\blog-demo\node_modules\hexo-theme-butterfly\source\css\_global\function.styl</code></p><p>找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">custom</span>-hr</span><br><span class="line"><span class="attr">position</span>: relative</span><br><span class="line"><span class="attr">margin</span>: 40px auto</span><br><span class="line"><span class="attr">border</span>: 2px dashed <span class="title function_">var</span>(--hr-border)</span><br></pre></td></tr></table></figure><p>修改 <code>2px</code> 为 <code>0</code> 即可</p><p>或者 更直接 删除Comment 图标</p><p><code>M:\BLOG\Whaltze-BLOG\blog-demo\node_modules\hexo-theme-butterfly\layout\includes\third-party\comments\index.pug</code></p><p>修改 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//- hr.custom-hr</span><br><span class="line">#post-comment // 注释：定义一个自定义样式的水平线（hr）元素，类名为custom-hr</span><br><span class="line">  .comment-head // 注释：定义一个ID为post-comment的容器，用于包含评论相关的元素</span><br><span class="line">    //- .comment-headline // 注释：定义一个类名为comment-head的容器，用于包含评论头部的元素</span><br><span class="line">    //-   i.fas.fa-comments.fa-fw // 注释：注释掉的代码，原本可能包含一个类名为comment-headline的容器，用于显示评论标题</span><br><span class="line">    //-   span= &#x27; &#x27; + _p(&#x27;comment&#x27;) // 注释：注释掉的代码，原本可能包含一个图标元素，使用Font Awesome库的fas、fa-comments和fa-fw类，表示评论图标</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84butterfiy%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/image-14"></p><h2 id="批量初始化-Gitalk-评论"><a href="#批量初始化-Gitalk-评论" class="headerlink" title="批量初始化 Gitalk 评论"></a>批量初始化 Gitalk 评论</h2><blockquote><p>以下信息由 DeepSeek生成</p></blockquote><div style="background-color: hsla(0, 0.00%, 49.00%, 0.25); color: white; padding: 10px; margin: 0 auto; margin-top: 20px; border-left: 1px hsla(213, 88.40%, 62.90%, 0.94); border-right: 1px hsla(213, 88.40%, 62.90%, 0.94); text-align: center; font-family: 'Comic Sans MS', cursive; font-size: 17px;  color:hsl(0, 0.00%, 93.70%);">没有成功 已经弃用 后续有时间再看看 (目前进入博客自动初始化)</div><hr><h3 id="🔍-问题根源分析"><a href="#🔍-问题根源分析" class="headerlink" title="🔍 问题根源分析"></a>🔍 问题根源分析</h3><ol><li><p><strong>Gitalk 客户端匹配机制</strong>：</p><ul><li>通过 <code>id</code> 参数匹配 Issue</li><li>通过 <code>labels</code> 过滤 Issue</li><li>需要与脚本中的生成逻辑完全一致</li></ul></li><li><p><strong>当前存在的矛盾</strong>：</p><pre><code class="highlight mermaid">graph LRA[脚本生成Issue] --&gt; B&#123;标签/id生成方式&#125;C[前端Gitalk配置] --&gt; BB --&gt;|不一致| D[无法匹配]</code></pre></li></ol><hr><h3 id="🛠️-完整解决方案"><a href="#🛠️-完整解决方案" class="headerlink" title="🛠️ 完整解决方案"></a>🛠️ 完整解决方案</h3><h4 id="第一步：统一前后端标识生成逻辑"><a href="#第一步：统一前后端标识生成逻辑" class="headerlink" title="第一步：统一前后端标识生成逻辑"></a>第一步：统一前后端标识生成逻辑</h4><p>修改 <strong><code>scripts/auto-gitalk.js</code></strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve, dirname &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 新增模块引入 ==========</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 修复 fs 未定义问题</span></span><br><span class="line"><span class="comment">// ================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全加载配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadConfig</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">      <span class="title function_">readFileSync</span>(<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../comment-config.json&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>) <span class="comment">// 修正路径</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;❌ 配置文件加载失败:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有文章路径</span></span><br><span class="line"><span class="keyword">const</span> matter = <span class="built_in">require</span>(<span class="string">&#x27;gray-matter&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getLocalPosts</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> postsDir = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../source/_posts&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> fs.<span class="title function_">readdirSync</span>(postsDir)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">file</span> =&gt;</span> file.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>))</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fullPath = <span class="title function_">resolve</span>(postsDir, file);</span><br><span class="line">      <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(fullPath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">data</span>: frontmatter &#125; = <span class="title function_">matter</span>(content);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取规范化的日期格式</span></span><br><span class="line">      <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(frontmatter.<span class="property">date</span> || fs.<span class="title function_">statSync</span>(fullPath).<span class="property">birthtime</span>);</span><br><span class="line">      <span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">      <span class="keyword">const</span> month = <span class="title class_">String</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> day = <span class="title class_">String</span>(date.<span class="title function_">getDate</span>() - <span class="number">1</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成与Hexo一致的路径</span></span><br><span class="line">      <span class="keyword">const</span> filename = file.<span class="title function_">replace</span>(<span class="regexp">/\.md$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> slug = frontmatter.<span class="property">permalink</span> || filename;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">title</span>: frontmatter.<span class="property">title</span> || filename,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">`/<span class="subst">$&#123;year&#125;</span>/<span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;day&#125;</span>/<span class="subst">$&#123;slug&#125;</span>/`</span>.<span class="title function_">replace</span>(<span class="regexp">/\/+/g</span>, <span class="string">&#x27;/&#x27;</span>), <span class="comment">// 处理多余斜杠</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">`https://whaltze.github.io/<span class="subst">$&#123;year&#125;</span>/<span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;day&#125;</span>/<span class="subst">$&#123;slug&#125;</span>/`</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GitHub API 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GitHubClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;config.username&#125;</span>/<span class="subst">$&#123;config.repo&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;config.token&#125;</span>`</span>,</span><br><span class="line">        <span class="title class_">Accept</span>: <span class="string">&#x27;application/vnd.github+json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-GitHub-Api-Version&#x27;</span>: <span class="string">&#x27;2022-11-28&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getIssues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">&#x27;/issues?state=all&amp;per_page=100&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 createIssue 方法中增加标准化处理</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">createIssue</span>(<span class="params">post</span>) &#123;</span><br><span class="line">    <span class="comment">// 保持与前端完全一致的路径处理</span></span><br><span class="line">    <span class="keyword">const</span> rawPath = post.<span class="property">path</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/\/$/</span>, <span class="string">&#x27;&#x27;</span>)    <span class="comment">// 移除末尾斜杠</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/\.html$/</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 适配Hexo生成路径</span></span><br><span class="line">      .<span class="title function_">toLowerCase</span>();         <span class="comment">// 统一小写处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> id = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">      .<span class="title function_">update</span>(rawPath)</span><br><span class="line">      .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">post</span>(<span class="string">&#x27;/issues&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">`[评论] <span class="subst">$&#123;post.title&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">`文章永久链接：<span class="subst">$&#123;post.url&#125;</span>\n\nGitalk ID: <span class="subst">$&#123;id&#125;</span>`</span>, <span class="comment">// 添加ID调试信息</span></span><br><span class="line">      <span class="attr">labels</span>: [<span class="string">&#x27;Gitalk&#x27;</span>, id]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主流程</span></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀 开始评论系统初始化...&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> config = <span class="title function_">loadConfig</span>().<span class="property">github</span>;</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">GitHubClient</span>(config);</span><br><span class="line">  <span class="keyword">const</span> localPosts = <span class="title function_">getLocalPosts</span>();</span><br><span class="line">  <span class="keyword">const</span> issues = <span class="keyword">await</span> client.<span class="title function_">getIssues</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对比差异</span></span><br><span class="line">  <span class="keyword">const</span> newPosts = localPosts.<span class="title function_">filter</span>(<span class="function"><span class="params">post</span> =&gt;</span> </span><br><span class="line">    !issues.<span class="title function_">some</span>(<span class="function"><span class="params">issue</span> =&gt;</span> </span><br><span class="line">      issue.<span class="property">body</span>.<span class="title function_">includes</span>(post.<span class="property">url</span>) &amp;&amp; issue.<span class="property">state</span> === <span class="string">&#x27;open&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newPosts.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;✅ 没有需要初始化的新文章&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🔄 需要初始化 <span class="subst">$&#123;newPosts.length&#125;</span> 篇文章`</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 批量处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [index, post] <span class="keyword">of</span> newPosts.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> client.<span class="title function_">createIssue</span>(post);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`(<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;newPosts.length&#125;</span>) <span class="subst">$&#123;post.title&#125;</span> 初始化成功`</span>);</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1500</span>)); <span class="comment">// 防止速率限制</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`⚠️  <span class="subst">$&#123;post.title&#125;</span> 失败：<span class="subst">$&#123;error.response?.data?.message || error.message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="第二步：修正-Butterfly-主题配置"><a href="#第二步：修正-Butterfly-主题配置" class="headerlink" title="第二步：修正 Butterfly 主题配置"></a>第二步：修正 Butterfly 主题配置</h4><p>修改 <strong><code>_config.butterfly.yml</code></strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk 配置</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">clientID:</span> <span class="string">&#x27;你的GitHub应用ID&#x27;</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">&#x27;你的GitHub应用Secret&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;Whaltze.github.io&#x27;</span> <span class="comment"># 必须与脚本中的repo一致</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">&#x27;Whaltze&#x27;</span></span><br><span class="line">  <span class="attr">admin:</span> [<span class="string">&#x27;Whaltze&#x27;</span>]</span><br><span class="line">  <span class="attr">id:</span> <span class="string">&#x27;md5(location.pathname)&#x27;</span> <span class="comment"># 核心修改点！</span></span><br><span class="line">  <span class="attr">labels:</span> [<span class="string">&#x27;Gitalk&#x27;</span>] <span class="comment"># 只需要基础标签</span></span><br><span class="line">  <span class="attr">perPage:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="第三步：修改主题模板文件"><a href="#第三步：修改主题模板文件" class="headerlink" title="第三步：修改主题模板文件"></a>第三步：修改主题模板文件</h4><p>修改 <strong><code>themes/butterfly/layout/includes/comments/gitalk.pug</code></strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">- const &#123; client_id, client_secret, repo, owner, admin, option &#125; = theme.gitalk</span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  (() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 新增路径标准化处理</span><br><span class="line">    const getGitalkId = () =&gt; &#123;</span><br><span class="line">      const path = window.location.pathname</span><br><span class="line">        .replace(/\/$/, &#x27;&#x27;)    // 移除末尾斜杠</span><br><span class="line">        .replace(/\.html$/, &#x27;&#x27;) // 适配Hexo生成路径</span><br><span class="line">        .toLowerCase();         // 统一小写处理</span><br><span class="line">      return CryptoJS.MD5(path).toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const initGitalk = () =&gt; &#123;</span><br><span class="line">      const gitalk = new Gitalk(Object.assign(&#123;</span><br><span class="line">        clientID: &#x27;!&#123;client_id&#125;&#x27;,</span><br><span class="line">        clientSecret: &#x27;!&#123;client_secret&#125;&#x27;,</span><br><span class="line">        repo: &#x27;!&#123;repo&#125;&#x27;,</span><br><span class="line">        owner: &#x27;!&#123;owner&#125;&#x27;,</span><br><span class="line">        admin: [&#x27;!&#123;admin&#125;&#x27;],</span><br><span class="line">        id: &#x27;!&#123;md5(page.path)&#125;&#x27;,</span><br><span class="line">        updateCountCallback: commentCount</span><br><span class="line">      &#125;,!&#123;JSON.stringify(option)&#125;))</span><br><span class="line"></span><br><span class="line">      gitalk.render(&#x27;gitalk-container&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const loadGitalk = async() =&gt; &#123;</span><br><span class="line">      if (typeof Gitalk === &#x27;function&#x27;) initGitalk()</span><br><span class="line">      else &#123;</span><br><span class="line">        await getCSS(&#x27;!&#123;url_for(theme.asset.gitalk_css)&#125;&#x27;)</span><br><span class="line">        await getScript(&#x27;!&#123;url_for(theme.asset.gitalk)&#125;&#x27;)</span><br><span class="line">        initGitalk()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const commentCount = n =&gt; &#123;</span><br><span class="line">      const isCommentCount = document.querySelector(&#x27;#post-meta .gitalk-comment-count&#x27;)</span><br><span class="line">      if (isCommentCount) &#123;</span><br><span class="line">        isCommentCount.textContent= n</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (&#x27;!&#123;theme.comments.use[0]&#125;&#x27; === &#x27;Gitalk&#x27; || !!&#123;theme.comments.lazyload&#125;) &#123;</span><br><span class="line">      if (!&#123;theme.comments.lazyload&#125;) btf.loadComment(document.getElementById(&#x27;gitalk-container&#x27;), loadGitalk)</span><br><span class="line">      else loadGitalk()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      window.loadOtherComment = loadGitalk</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure><h4 id="第四步：添加-MD5-支持"><a href="#第四步：添加-MD5-支持" class="headerlink" title="第四步：添加 MD5 支持"></a>第四步：添加 MD5 支持</h4><p>在主题布局文件中注入 <strong><code>crypto-js</code></strong>（修改 <strong><code>themes/butterfly/layout/includes/head.pug</code></strong>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//- 在 head 末尾添加</span><br><span class="line">if theme.comments.use.includes(&#x27;Gitalk&#x27;)</span><br><span class="line">  script(src=&#x27;https://cdn.bootcdn.net/ajax/libs/crypto-js/4.1.1/crypto-js.min.js&#x27;)</span><br></pre></td></tr></table></figure><hr><h3 id="✅-验证流程"><a href="#✅-验证流程" class="headerlink" title="✅ 验证流程"></a>✅ 验证流程</h3><ol><li><p>创建新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;测试评论关联&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>运行初始化脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node scripts/auto-gitalk.js</span><br></pre></td></tr></table></figure></li><li><p>查看生成内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># GitHub Issue 应包含：</span></span><br><span class="line"><span class="bullet">-</span> Label: Gitalk + md5哈希值</span><br><span class="line"><span class="bullet">-</span> Body: 包含文章完整URL</span><br></pre></td></tr></table></figure></li><li><p>本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s --debug</span><br></pre></td></tr></table></figure></li></ol><h3 id="🌐-GitHub-应用配置指南"><a href="#🌐-GitHub-应用配置指南" class="headerlink" title="🌐 GitHub 应用配置指南"></a>🌐 GitHub 应用配置指南</h3><ol><li>访问 <a href="https://github.com/settings/developers">GitHub OAuth Apps</a></li><li>创建新应用：<ul><li><strong>Application name</strong>: 你的博客名称</li><li><strong>Homepage URL</strong>: 你的博客地址</li><li><strong>Authorization callback URL</strong>: 你的博客地址</li></ul></li><li>获取 <code>Client ID</code> 和 <code>Client Secret</code></li></ol><h2 id="隐藏式选项卡"><a href="#隐藏式选项卡" class="headerlink" title="隐藏式选项卡"></a>隐藏式选项卡</h2><p><a href="https://butterfly.js.org/posts/ceeb73f/#Tag-hide">Tag-hide官方文档</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs &#123;&#123; title &#125;&#125;, [index] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一個Tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**tab 名字為第一個 Tab**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**只有圖標 沒有 Tab 名字**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸彈@fas fa-bomb --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h2 id="数学公式渲染"><a href="#数学公式渲染" class="headerlink" title="数学公式渲染"></a>数学公式渲染</h2><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$</span></span><br><span class="line">\begin&#123;pmatrix&#125;  </span><br><span class="line">  a_&#123;11&#125; &amp; a_&#123;12&#125; &amp; a_&#123;13&#125; \\  </span><br><span class="line">  a_&#123;21&#125; &amp; a_&#123;22&#125; &amp; a_&#123;23&#125; \\  </span><br><span class="line">  a_&#123;31&#125; &amp; a_&#123;32&#125; &amp; a_&#123;33&#125;  </span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$</span></span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><span>$$\begin{pmatrix}    a_{11} & a_{12} & a_{13} \\    a_{21} & a_{22} & a_{23} \\    a_{31} & a_{32} & a_{33}  \end{pmatrix}$$</span><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">质能方程：$E = mc^2$，其中 $m$ 是质量。</span><br></pre></td></tr></table></figure><p>质能方程：$E &#x3D; mc^2$，其中 $m$ 是质量。</p><h3 id="段落公示"><a href="#段落公示" class="headerlink" title="段落公示"></a>段落公示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$</span></span><br><span class="line">I(x, y) \in \mathbb&#123;R&#125;^&#123;M \times N&#125;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$</span></span><br></pre></td></tr></table></figure><p>$$<br>I(x, y) \in \mathbb{R}^{M \times N}<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Cartographer算法的RPLIDAR激光雷达导航</title>
      <link href="/2024/09/22/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/"/>
      <url>/2024/09/22/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ubuntu22.04-ros2-humble<br>环境为 conda activate rm (待更新)<br>从功能包入手介绍建图过程<br>工程根目录为sllidar,下设src文件存放各种功能包,编译目录为~&#x2F;rm&#x2F;sllidar</p></blockquote><blockquote><p>一些好的学习资料<br><a href="https://book.guyuehome.com/ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/">古月居-URDF讲解-机器人建模方法</a><br><a href="https://book.guyuehome.com/ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/">古月居-TF树讲解-机器人坐标系管理神器</a><br><a href="https://wiki.ros.org/navigation/Tutorials">ROS-Wiki-导航教程</a></p></blockquote><h1 id="sllidar-ros"><a href="#sllidar-ros" class="headerlink" title="sllidar_ros"></a>sllidar_ros</h1><blockquote><p><a href="https://github.com/Slamtec/sllidar_ros2">Github-sllidar_ros</a></p></blockquote><blockquote><p><a href="https://www.slamtec.com/cn/Support#rplidar-c1">rplidar_c1官网资料</a><br>第一个功能包,调试雷达正常驱动运行,我使用的是思岚rplidar_c1雷达</p></blockquote><p>在src中打开终端,切换rm环境后开始git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Slamtec/sllidar_ros2.git</span><br></pre></td></tr></table></figure><p>source一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /opt/ros/humble/setup.bash</span><br></pre></td></tr></table></figure><p>接下来编译构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --symlink-install</span><br></pre></td></tr></table></figure><blockquote><p>启用–symlink-install后将不会把文拷贝到install目录，而是通过创建符号链接的方式,允许通过更改src下的部分文件来改变install,每次调整 python 脚本时都不必重新build了</p></blockquote><p>如果构建功能包没问题,继续source</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./install/setup.bash</span><br></pre></td></tr></table></figure><blockquote><p>如果想要添加永久工作区环境变量。 每次启动新 shell 时都会自动将 ROS2 环境变量添加到您的 bash 会话中：运行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source &lt;your_own_ros2_ws&gt;/install/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>为 rplidar 创建 udev 规则</p><p>sllidar_ros2运行需要串行设备的读写权限。 您可以使用以下命令手动修改它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /dev/ttyUSB0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 666 /dev/ttyUSB0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记住每次连接雷达都要输入这个指令,不然后期报错查的很痛苦hh</span></span><br></pre></td></tr></table></figure><p>但更好的方法是创建一个 udev 规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/sllidar_ros/</span><br><span class="line"><span class="built_in">source</span> scripts/create_udev_rules.sh</span><br></pre></td></tr></table></figure><p>启动sllidar_ros功能包<br>运行rplidar_c1 并在rviz中查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch sllidar_ros2 view_sllidar_c1_launch.py</span><br></pre></td></tr></table></figure><p>看到下图所示点云图,即启动成功<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/1.png" alt=" "></p><h1 id="cartographer-cartographer-ros"><a href="#cartographer-cartographer-ros" class="headerlink" title="cartographer &amp;&amp; cartographer_ros"></a>cartographer &amp;&amp; cartographer_ros</h1><blockquote><p>成功驱动雷达后,我们需要考虑如何构建地图,有点云的,稠密or稀疏,栅格地图occupancy_grid_map等等</p></blockquote><p>确保ros和cartographer的相关依赖已经安装完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y \</span><br><span class="line">    build-essential cmake git wget curl unzip \</span><br><span class="line">    python3-vcstool python3-pip python3-numpy \</span><br><span class="line">    libceres-dev libprotobuf-dev protobuf-compiler \</span><br><span class="line">    libboost-all-dev libgflags-dev libgoogle-glog-dev \</span><br><span class="line">    liblua5.3-dev ninja-build stow clang \</span><br><span class="line">    libeigen3-dev libopencv-dev</span><br></pre></td></tr></table></figure><h2 id="安装ros-humble版本的cartographer依赖"><a href="#安装ros-humble版本的cartographer依赖" class="headerlink" title="安装ros-humble版本的cartographer依赖"></a>安装ros-humble版本的cartographer依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y ros-humble-cartographer ros-humble-cartographer-ros ros-humble-cartographer-ros-msgs</span><br></pre></td></tr></table></figure><p>也可以直接git clone 举个例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ros2/cartographer_ros.git</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下建议有apt安装方式的直接apt install,官方整合包最方便,不容易出错,其次再考虑git clone<br>安装apt后,再在工作空间git相同的包,要事先确保两者兼容,不然可能会有冲突,两者如果兼容是可以覆盖&#x2F;opt&#x2F;目录内的包的</p></blockquote><p>检查是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg list | grep cartogrpaher</span><br></pre></td></tr></table></figure><h2 id="backpack-2d-launch-py"><a href="#backpack-2d-launch-py" class="headerlink" title="backpack_2d.launch.py"></a>backpack_2d.launch.py</h2><p>找到cartographer_ros包内的backpack_2d.launch.py</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/ros/humble/share/cartographer_ros/launch/</span><br><span class="line">sudo vim backpack_2d.launch</span><br></pre></td></tr></table></figure><p>修改如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> launch <span class="keyword">import</span> LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch.actions <span class="keyword">import</span> DeclareLaunchArgument, IncludeLaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch.conditions <span class="keyword">import</span> IfCondition, UnlessCondition</span><br><span class="line"><span class="keyword">from</span> launch.substitutions <span class="keyword">import</span> LaunchConfiguration</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions <span class="keyword">import</span> Node, SetRemap</span><br><span class="line"><span class="keyword">from</span> launch_ros.substitutions <span class="keyword">import</span> FindPackageShare</span><br><span class="line"><span class="keyword">from</span> launch.launch_description_sources <span class="keyword">import</span> PythonLaunchDescriptionSource</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_launch_description</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">## ***** Launch arguments *****</span></span><br><span class="line">    use_sim_time_arg = DeclareLaunchArgument(<span class="string">&#x27;use_sim_time&#x27;</span>, default_value = <span class="string">&#x27;False&#x27;</span>)</span><br><span class="line">    <span class="comment"># 我们是实时建图 use_sim_time设置为false,仿真则需要时间戳</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ***** File paths ****** 根据自己文件路径修改</span></span><br><span class="line">    pkg_share = FindPackageShare(<span class="string">&#x27;cartographer_ros&#x27;</span>).find(<span class="string">&#x27;cartographer_ros&#x27;</span>)</span><br><span class="line">    urdf_dir = os.path.join(pkg_share, <span class="string">&#x27;urdf&#x27;</span>)</span><br><span class="line">    urdf_file = os.path.join(urdf_dir, <span class="string">&#x27;backpack_2d.urdf&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(urdf_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> infp:</span><br><span class="line">        robot_desc = infp.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## ***** Nodes *****</span></span><br><span class="line">    robot_state_publisher_node = Node(</span><br><span class="line">        package = <span class="string">&#x27;robot_state_publisher&#x27;</span>,</span><br><span class="line">        executable = <span class="string">&#x27;robot_state_publisher&#x27;</span>,</span><br><span class="line">        parameters=[</span><br><span class="line">            &#123;<span class="string">&#x27;robot_description&#x27;</span>: robot_desc&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;use_sim_time&#x27;</span>: LaunchConfiguration(<span class="string">&#x27;use_sim_time&#x27;</span>)&#125;],</span><br><span class="line">        output = <span class="string">&#x27;screen&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    cartographer_node = Node(</span><br><span class="line">        package = <span class="string">&#x27;cartographer_ros&#x27;</span>,</span><br><span class="line">        executable = <span class="string">&#x27;cartographer_node&#x27;</span>,</span><br><span class="line">        parameters = [&#123;<span class="string">&#x27;use_sim_time&#x27;</span>: LaunchConfiguration(<span class="string">&#x27;use_sim_time&#x27;</span>)&#125;],</span><br><span class="line">        arguments = [</span><br><span class="line">            <span class="string">&#x27;-configuration_directory&#x27;</span>, FindPackageShare(<span class="string">&#x27;cartographer_ros&#x27;</span>).find(<span class="string">&#x27;cartographer_ros&#x27;</span>) + <span class="string">&#x27;/configuration_files&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;-configuration_basename&#x27;</span>, <span class="string">&#x27;carto_rpc1.lua&#x27;</span>],</span><br><span class="line">         remappings = [</span><br><span class="line">             (<span class="string">&#x27;scan&#x27;</span>, <span class="string">&#x27;scan&#x27;</span>)],</span><br><span class="line"></span><br><span class="line">        output = <span class="string">&#x27;screen&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    cartographer_occupancy_grid_node = Node(</span><br><span class="line">        package = <span class="string">&#x27;cartographer_ros&#x27;</span>,</span><br><span class="line">        executable = <span class="string">&#x27;cartographer_occupancy_grid_node&#x27;</span>,</span><br><span class="line">        parameters = [</span><br><span class="line">            &#123;<span class="string">&#x27;use_sim_time&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;resolution&#x27;</span>: <span class="number">0.05</span>&#125;],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LaunchDescription([</span><br><span class="line">        use_sim_time_arg,</span><br><span class="line">        <span class="comment"># Nodes</span></span><br><span class="line">        robot_state_publisher_node,</span><br><span class="line">        cartographer_node,</span><br><span class="line">        cartographer_occupancy_grid_node,</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><h2 id="lua文件"><a href="#lua文件" class="headerlink" title=".lua文件"></a>.lua文件</h2><p>修改.lua文件<br>我在官方backpack_2d.lua的基础上做了修改,新建carto_rpc1.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">include <span class="string">&quot;map_builder.lua&quot;</span></span><br><span class="line">include <span class="string">&quot;trajectory_builder.lua&quot;</span></span><br><span class="line"></span><br><span class="line">options = &#123;</span><br><span class="line">  map_builder = MAP_BUILDER,</span><br><span class="line">  trajectory_builder = TRAJECTORY_BUILDER,</span><br><span class="line">  map_frame = <span class="string">&quot;map&quot;</span>,</span><br><span class="line">  tracking_frame = <span class="string">&quot;base_link&quot;</span>,  <span class="comment">-- 这里base_link是机器人的基础中心节点,后续会根据urdf文件配置,也可根据自己需要配置</span></span><br><span class="line">  published_frame = <span class="string">&quot;base_link&quot;</span>, </span><br><span class="line"><span class="comment">--  scan_topic = &quot;scan&quot;, </span></span><br><span class="line"><span class="comment">--  tracking_frame = &quot;horizontal_laser_link&quot;,  --如果有imu填imu,没有imu则用base_link</span></span><br><span class="line"><span class="comment">--  published_frame = &quot;horizontal_laser_link&quot;,   --有odom一般用odom，没有odom一般用base_link</span></span><br><span class="line">  odom_frame = <span class="string">&quot;odom&quot;</span>,</span><br><span class="line">  provide_odom_frame = <span class="literal">true</span>,  <span class="comment">--底盘提供了里程计，这里不使用算法提供的里程计；如果没有底盘提供，则可以用cartographer提供的里程计，这里摄制成true</span></span><br><span class="line">  publish_frame_projected_to_2d = <span class="literal">false</span>,</span><br><span class="line">  use_pose_extrapolator = <span class="literal">true</span>,</span><br><span class="line">  use_odometry = <span class="literal">false</span>,</span><br><span class="line">  use_nav_sat = <span class="literal">false</span>,</span><br><span class="line">  use_landmarks = <span class="literal">false</span>,</span><br><span class="line">  num_laser_scans = <span class="number">1</span>,  <span class="comment">-- 这要注意不要把下面的multi写成1了,博主就用rplidar_c1雷达,有需要可以自行配置</span></span><br><span class="line">  num_multi_echo_laser_scans = <span class="number">0</span>,</span><br><span class="line">  num_subdivisions_per_laser_scan = <span class="number">1</span>,</span><br><span class="line">  num_point_clouds = <span class="number">0</span>,</span><br><span class="line">  lookup_transform_timeout_sec = <span class="number">0.2</span>,</span><br><span class="line">  submap_publish_period_sec = <span class="number">0.3</span>,</span><br><span class="line">  pose_publish_period_sec = <span class="number">5e-3</span>,</span><br><span class="line">  trajectory_publish_period_sec = <span class="number">30e-3</span>,</span><br><span class="line">  rangefinder_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  odometry_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  fixed_frame_pose_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  imu_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  landmarks_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--TRAJECTORY_BUILDER_2D = &#123;</span></span><br><span class="line"><span class="comment">--    laser_frame = &quot;laser&quot;,</span></span><br><span class="line"><span class="comment">--    use_imu_data = false,</span></span><br><span class="line"><span class="comment">--  &#125;</span></span><br><span class="line">MAP_BUILDER.use_trajectory_builder_2d = <span class="literal">true</span>  <span class="comment">-- 选择true,会将trajectory_builder_2d文件里面的false改成true进行2d建图</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.num_accumulated_range_data = <span class="number">10</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.use_online_correlative_scan_matching = <span class="literal">true</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.num_accumulated_range_data = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> options</span><br></pre></td></tr></table></figure><h2 id="urdf"><a href="#urdf" class="headerlink" title=".urdf"></a>.urdf</h2><p>修改机器人配置文件.urdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/ros/humble/share/cartographer_ros/urdf/</span><br><span class="line">sudo vim backpack_2d.urdf</span><br></pre></td></tr></table></figure><p>修改如下(主要加入了雷达scan的laser框架)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;robot name=&quot;cartographer_backpack_2d&quot;&gt;</span><br><span class="line">  &lt;material name=&quot;orange&quot;&gt;</span><br><span class="line">    &lt;color rgba=&quot;1.0 0.5 0.2 1&quot; /&gt;</span><br><span class="line">  &lt;/material&gt;</span><br><span class="line">  &lt;material name=&quot;gray&quot;&gt;</span><br><span class="line">    &lt;color rgba=&quot;0.2 0.2 0.2 1&quot; /&gt;</span><br><span class="line">  &lt;/material&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link name=&quot;imu_link&quot;&gt;</span><br><span class="line">    &lt;visual&gt;</span><br><span class="line">      &lt;origin xyz=&quot;0 0 0&quot; /&gt;</span><br><span class="line">      &lt;geometry&gt;</span><br><span class="line">        &lt;box size=&quot;0.06 0.04 0.02&quot; /&gt;</span><br><span class="line">      &lt;/geometry&gt;</span><br><span class="line">      &lt;material name=&quot;orange&quot; /&gt;</span><br><span class="line">    &lt;/visual&gt;</span><br><span class="line">  &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加雷达的坐标系 我的是laser --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link name=&quot;laser&quot;&gt;</span><br><span class="line">    &lt;visual&gt;</span><br><span class="line">      &lt;origin xyz=&quot;0 0 0&quot; /&gt;</span><br><span class="line">      &lt;geometry&gt;</span><br><span class="line">        &lt;cylinder length=&quot;0.05&quot; radius=&quot;0.03&quot; /&gt;</span><br><span class="line">      &lt;/geometry&gt;</span><br><span class="line">      &lt;material name=&quot;gray&quot; /&gt;</span><br><span class="line">    &lt;/visual&gt;</span><br><span class="line">  &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link name=&quot;horizontal_laser_link&quot;&gt;</span><br><span class="line">    &lt;visual&gt;</span><br><span class="line">      &lt;origin xyz=&quot;0 0 0&quot; /&gt;</span><br><span class="line">      &lt;geometry&gt;</span><br><span class="line">        &lt;cylinder length=&quot;0.05&quot; radius=&quot;0.03&quot; /&gt;</span><br><span class="line">      &lt;/geometry&gt;</span><br><span class="line">      &lt;material name=&quot;gray&quot; /&gt;</span><br><span class="line">    &lt;/visual&gt;</span><br><span class="line">  &lt;/link&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">  &lt;link name=&quot;vertical_laser_link&quot;&gt;</span><br><span class="line">    &lt;visual&gt;</span><br><span class="line">      &lt;origin xyz=&quot;0 0 0&quot; /&gt;</span><br><span class="line">      &lt;geometry&gt;</span><br><span class="line">        &lt;cylinder length=&quot;0.05&quot; radius=&quot;0.03&quot; /&gt;</span><br><span class="line">      &lt;/geometry&gt;</span><br><span class="line">      &lt;material name=&quot;gray&quot; /&gt;</span><br><span class="line">    &lt;/visual&gt;</span><br><span class="line">  &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link name=&quot;base_link&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;joint name=&quot;imu_link_joint&quot; type=&quot;fixed&quot;&gt;</span><br><span class="line">    &lt;parent link=&quot;base_link&quot; /&gt;</span><br><span class="line">    &lt;child link=&quot;imu_link&quot; /&gt;</span><br><span class="line">    &lt;origin xyz=&quot;0 0 0&quot; /&gt;</span><br><span class="line">  &lt;/joint&gt;</span><br><span class="line"></span><br><span class="line">  &lt;joint name=&quot;horizontal_laser_link_joint&quot; type=&quot;fixed&quot;&gt;</span><br><span class="line">    &lt;parent link=&quot;base_link&quot; /&gt;</span><br><span class="line">    &lt;child link=&quot;horizontal_laser_link&quot; /&gt;</span><br><span class="line">    &lt;origin xyz=&quot;0.1007 0 0.0558&quot; /&gt;</span><br><span class="line">  &lt;/joint&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 主要是这部份改成自己的雷达链接与base_link链接 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;joint name=&quot;laser_link_joint&quot; type=&quot;fixed&quot;&gt;</span><br><span class="line">    &lt;parent link=&quot;base_link&quot; /&gt;</span><br><span class="line">    &lt;child link=&quot;laser&quot; /&gt;</span><br><span class="line">    &lt;origin rpy=&quot;0 0 0&quot; xyz=&quot;0.05 0 0.2&quot; /&gt;</span><br><span class="line">  &lt;/joint&gt;</span><br><span class="line"></span><br><span class="line">  &lt;joint name=&quot;vertical_laser_link_joint&quot; type=&quot;fixed&quot;&gt;</span><br><span class="line">    &lt;parent link=&quot;base_link&quot; /&gt;</span><br><span class="line">    &lt;child link=&quot;vertical_laser_link&quot; /&gt;</span><br><span class="line">    &lt;origin rpy=&quot;0 -1.570796 3.141593&quot; xyz=&quot;0.1007 0 0.1814&quot; /&gt;</span><br><span class="line">  &lt;/joint&gt;</span><br><span class="line"></span><br><span class="line">&lt;/robot&gt;</span><br></pre></td></tr></table></figure><h2 id="开始建图"><a href="#开始建图" class="headerlink" title="开始建图"></a>开始建图</h2><p>运行启动雷达</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch sllidar_ros2 view_sllidar_c1_launch.py </span><br></pre></td></tr></table></figure><p>运行启动carto建图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch cartographer_ros backpack_2d.launch.py </span><br></pre></td></tr></table></figure><p>选择&#x2F;map</p><h2 id="报错征途"><a href="#报错征途" class="headerlink" title="报错征途"></a>报错征途</h2><p>如果你也和我一样,没能成功运行,接下来等着你的将会是无尽的困难</p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/2.png" alt=" "></p><p>可以看到主要问题是tf树变换不到位以及map消息接收不到</p><p>对tf树变换不到位的,请返回urdf文件,认真核对修改即可</p><p>对于&#x2F;map消息无法接收的情况,我主要采取了以下排查步骤</p><p><strong>首先</strong> 我通过rqt_graph 确认了当前节点间的链接状态，和在仿真turtlebot3中的图片进行了对比，发现主要就是缺少&#x2F;map</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph # 需要保持launch运行，另起一个终端，有时不是很灵敏，要多实验几次</span><br></pre></td></tr></table></figure><blockquote><p>这张图可以看出没有正确链接scan到cartographer_node<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/3.png" alt=" "></p></blockquote><blockquote><p>这张图保证雷达接收正确,但是没有正确接收map消息<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/4.png" alt=" "></p></blockquote><blockquote><p>基于turtlebot3正确的graph<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/5.png" alt=" "></p></blockquote><p>反复对照,发现不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic hz /map</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic echo /map #查看特定消息</span><br></pre></td></tr></table></figure><p>发现均没有输出,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list</span><br></pre></td></tr></table></figure><p>我发现却又存在&#x2F;map</p><p>调试了非常长一段时间,灵光乍现 思考map消息message不到可能是发送频率不够<br>我修改了lua文件中的相应选项,提高hz</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lookup_transform_timeout_sec = <span class="number">0.5</span>, <span class="comment">--变换查找超时时间。如果转换在指定的时间内没有找到，系统将停止查找。增加至0.5</span></span><br><span class="line">submap_publish_period_sec = <span class="number">0.1</span>,  <span class="comment">--子图的发布周期。配置为每 0.1 秒发布一次子图 10hz</span></span><br></pre></td></tr></table></figure><p>重新运行那两个指令,发现map的message还是接收不到,但我惊喜的发现rqt_graph中出现了&#x2F;map链接</p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/6.png" alt=" "></p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/7.png" alt=" "></p><p>非常惊喜,有两次都有出现map的链接</p><p>在这中的过程,我还在cartographer_ros功能包的backpack_2d.launch.py配置了rviz的启动node,观察到demo_backpack_2d.launch.py中用了demo_2d.rviz文件,就借鉴过来了</p><p>在backpack_2d.launch.py中添加以下节点(已经做了修改)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rviz_node = Node(</span><br><span class="line">    package = <span class="string">&#x27;rviz2&#x27;</span>,</span><br><span class="line">    executable = <span class="string">&#x27;rviz2&#x27;</span>,</span><br><span class="line">    arguments = [<span class="string">&#x27;-d&#x27;</span>, FindPackageShare(<span class="string">&#x27;cartographer_ros&#x27;</span>).find(<span class="string">&#x27;cartographer_ros&#x27;</span>) + <span class="string">&#x27;/configuration_files/demo_2d.rviz&#x27;</span>],</span><br><span class="line">    parameters = [&#123;<span class="string">&#x27;use_sim_time&#x27;</span>: <span class="literal">False</span>&#125;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最后也要加上这个节点名称</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> LaunchDescription([</span><br><span class="line">        use_sim_time_arg,</span><br><span class="line">        <span class="comment"># Nodes</span></span><br><span class="line">        robot_state_publisher_node,</span><br><span class="line">        cartographer_node,</span><br><span class="line">        cartographer_occupancy_grid_node,</span><br><span class="line">        rviz_node, <span class="comment"># 添加rviz_node节点</span></span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>结束之后,运行backpack_2d.launch.py便会跳出rviz2界面,虽然好像没什么用哈哈,但是我发现,原来rviz中的contraints(约束)选项原本显示的是message hz at xxx,现在都不报错了,不知道是不是因为更改的原因,有大佬知道的,文章最后有联系方式,希望能一起讨论学习,(后面我把lua的相关参数改回去,也还是不报错了hhh好奇怪)</p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/9.png" alt=" "></p><p>言归正传,继续排查问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run cartographer_ros cartographer_occupancy_grid_node -resolution 0.05 -publish_period_sec 1.0 --ros-args --log-level debug</span><br></pre></td></tr></table></figure><p>我开启debug模式,运行了occupancy_grid_node,发现目前地图信息已经有被正确发布并且message,基本确定就是base_link和map的连接问题</p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/10.png" alt="occupancy_grid_node"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run tf2_ros tf2_echo map base_link</span><br></pre></td></tr></table></figure><p>针对性的观察map和base_link之间的tf连接是否正确<br>发现不存在两者的连接<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/11.png" alt=" "></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run tf2_tools view_frames</span><br></pre></td></tr></table></figure><p>建立tf树,发现确实到base_link就断开连接了<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/12.png" alt=" "></p><blockquote><p>再次陷入僵局,调试许久未果,开始反复看turtlebot3成功的文件程序和tf连接,进行各种尝试</p></blockquote><p>忽然发现之前查看tf树hide了好多信息,左上角那些选项可以勾选,对最新的图片进行比对,发现一些不同,进而更改</p><p>顺便介绍一下之前hide的参数</p><table><thead><tr><th>概念名称</th><th>解释</th></tr></thead><tbody><tr><td>Dead Sinks</td><td>订阅了某个主题的节点，但是没有其他节点正在发布该主题的消息。换句话说，这些节点正在等待永远不会到来的消息。</td></tr><tr><td>Leaf Topics</td><td>这些是没有任何节点订阅的主题。换句话说，尽管有节点在发布这些主题的消息，但是没有节点在接收这些消息。</td></tr><tr><td>Debug</td><td>这个选项通常用于启用或禁用额外的调试信息。在rqt_graph中，启用调试可能会显示更多的细节，例如消息的数据类型和频率。</td></tr><tr><td>TF</td><td>TF（Transform Framework）是ROS中用于维护不同坐标系之间变换的一个系统。在rqt_graph中，TF相关的条目显示了发布和订阅TF变换的节点。</td></tr><tr><td>Unreachable</td><td>这通常指的是由于网络问题或其他原因，某些节点无法与其他节点通信。这可能导致节点或主题在计算图中显示为不可达。</td></tr><tr><td>Params</td><td>参数（Parameters）是ROS中用于配置节点和整个系统的键值对。在rqt_graph中，参数可能显示为节点的一部分，但通常不会显示参数之间的连接。</td></tr></tbody></table><blockquote><p>turtlebot3的TF树<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/turtlebot3_tf.png" alt="turtlebot3的TF树"></p></blockquote><blockquote><p>turtlebot3的graph<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/rosgraph.png" alt="turtlebot3的graph"></p></blockquote><blockquote><p>目前自己调试的graph<br><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/13.png" alt="目前自己调试的graph"></p></blockquote><p>反复观察,我又增加了一些rosgraph,忽然发现了应该很可笑但非常严重的问题,话题消息似乎都传到了rviz上,注意是rviz,不是<strong>rviz2</strong>!!!,下面显示两张明显错误图片</p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/wrong1.png" alt=" "></p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/wrong2.png" alt=" "></p><p>我们发现除了scan话题信息,几乎所有message都走了rviz,而不是rviz2,要知道,我们现在使用的是ros2版本对应是rviz2,破案了!!!</p><p>立马修改先前配置!!!!<br>一顿操作猛如虎,没有任何效果,依旧收不到,而且发现有时候rqt_graph的图形显示有些rviz2的数据也传到了rosout去了<br>怀疑可能不是这个原因,退回最初状态,这时候就体现副本的重要性质了hhh</p><p><del>rviz2修改未果,我又开始了胡乱调试</del></p><blockquote><p>漏了说,还是有做了些许更改</p></blockquote><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/15.png" alt=" "></p><p>对这个报错,进入.rviz相关文件,删除这几个class即可</p><p>继续调试</p><p>加入了launch中的tf静态变换,确保map和base_link连接</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static_transform_publisher = Node(</span><br><span class="line">    package=<span class="string">&#x27;tf2_ros&#x27;</span>,</span><br><span class="line">    executable=<span class="string">&#x27;static_transform_publisher&#x27;</span>,</span><br><span class="line">    arguments=[<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;map&#x27;</span>, <span class="string">&#x27;base_link&#x27;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>记得末尾还需要添加node,</p><p>tf树显示连接上了,map的message还是连接不上</p><blockquote><p>map与base_link是实时连接的,静态发布不太行,脑子也是糊涂了</p></blockquote><p>迎来转机!!!!</p><p>这天吃饭突发奇想map和base_link中间是不是还有节点,lua文件可能还是没有配置好,<br>决定直接禁用imu看看效果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Copyright 2016 The Cartographer Authors</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">-- you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">-- You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">-- distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">-- See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">-- limitations under the License.</span></span><br><span class="line"></span><br><span class="line">include <span class="string">&quot;map_builder.lua&quot;</span></span><br><span class="line">include <span class="string">&quot;trajectory_builder.lua&quot;</span></span><br><span class="line"></span><br><span class="line">options = &#123;</span><br><span class="line">  map_builder = MAP_BUILDER,</span><br><span class="line">  trajectory_builder = TRAJECTORY_BUILDER,</span><br><span class="line">  map_frame = <span class="string">&quot;map&quot;</span>,</span><br><span class="line">  tracking_frame = <span class="string">&quot;base_link&quot;</span>,  </span><br><span class="line">  published_frame = <span class="string">&quot;base_link&quot;</span>, </span><br><span class="line"><span class="comment">--  scan_topic = &quot;scan&quot;, </span></span><br><span class="line"><span class="comment">--  tracking_frame = &quot;horizontal_laser_link&quot;,  --如果有imu填imu,没有imu则用base_link</span></span><br><span class="line"><span class="comment">--  published_frame = &quot;horizontal_laser_link&quot;,   --有odom一般用odom，没有odom一般用base_link</span></span><br><span class="line">  odom_frame = <span class="string">&quot;odom&quot;</span>,</span><br><span class="line">  provide_odom_frame = <span class="literal">true</span>,  <span class="comment">--底盘提供了里程计，这里不使用算法提供的里程计；如果没有底盘提供，则可以用cartographer提供的里程计，这里摄制成true</span></span><br><span class="line">  publish_frame_projected_to_2d = <span class="literal">false</span>,</span><br><span class="line">  use_pose_extrapolator = <span class="literal">true</span>,</span><br><span class="line">  use_odometry = <span class="literal">false</span>,</span><br><span class="line">  use_nav_sat = <span class="literal">false</span>,</span><br><span class="line">  use_landmarks = <span class="literal">false</span>,</span><br><span class="line">  num_laser_scans = <span class="number">1</span>,</span><br><span class="line">  num_multi_echo_laser_scans = <span class="number">0</span>,</span><br><span class="line">  num_subdivisions_per_laser_scan = <span class="number">1</span>,</span><br><span class="line">  num_point_clouds = <span class="number">0</span>,</span><br><span class="line">  lookup_transform_timeout_sec = <span class="number">0.2</span>,</span><br><span class="line">  submap_publish_period_sec = <span class="number">0.3</span>,</span><br><span class="line">  pose_publish_period_sec = <span class="number">5e-3</span>,</span><br><span class="line">  trajectory_publish_period_sec = <span class="number">30e-3</span>,</span><br><span class="line">  rangefinder_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  odometry_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  fixed_frame_pose_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">  imu_sampling_ratio = <span class="number">0.</span>,  <span class="comment">-- 设置为0,禁用imu</span></span><br><span class="line">  landmarks_sampling_ratio = <span class="number">1.</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--TRAJECTORY_BUILDER_2D = &#123;</span></span><br><span class="line"><span class="comment">--    laser_frame = &quot;laser&quot;,</span></span><br><span class="line"><span class="comment">--    use_imu_data = false,</span></span><br><span class="line"><span class="comment">--  &#125;</span></span><br><span class="line">MAP_BUILDER.use_trajectory_builder_2d = <span class="literal">true</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.num_accumulated_range_data = <span class="number">10</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.use_online_correlative_scan_matching = <span class="literal">true</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.num_accumulated_range_data = <span class="number">1</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.use_imu_data = <span class="literal">false</span>  <span class="comment">-- 禁用IMU数据</span></span><br><span class="line"><span class="keyword">return</span> options</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imu_sampling_ratio = <span class="number">0.</span>,  <span class="comment">-- 设置为0,禁用imu</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.use_imu_data = <span class="literal">false</span>  <span class="comment">-- 禁用IMU数据</span></span><br></pre></td></tr></table></figure><p>禁用之后imu_sampling_ratio不修改也没事哈哈哈</p><p>非常amazing啊,再次运行那两个launch文件,建图成功了,但是没有imu数据的支持<br>效果也是非常感人</p><p><img src="/./images/%E5%9F%BA%E4%BA%8ECartographer%E7%AE%97%E6%B3%95%E7%9A%84RPLIDAR%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E5%AF%BC%E8%88%AA/14.png" alt=" "></p><p>可以看到没有imu,没有里程计odom,建图效果是非常差劲的,接下来,我考虑接入imu,看看会不会好一点</p><h2 id="imu"><a href="#imu" class="headerlink" title="imu"></a>imu</h2><p>报错征途的下一形态hhh</p><p>看了一些别人家的例子哈哈<br><a href="https://blog.csdn.net/qq_39502099/article/details/125969577">cartographer接入2D雷达laser+imu实时建图</a></p><p><a href="https://blog.csdn.net/qq_46274948/article/details/127012313?spm=1001.2101.3001.6650.2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Ctr-2-127012313-blog-125969577.235%5Ev43%5Epc_blog_bottom_relevance_base9">Cartographer（3）lidar+IMU建图</a></p><blockquote><p>又调试了很久,最后发现rplidar_c1的思岚雷达压根不具备imu惯性测量单元功能,(哭)</p></blockquote><blockquote><p>也算是完结撒花了hh,后续会出一个精简版文档,这个算流水账记录了,之后用mid360会再写一个文档</p></blockquote><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><blockquote><p>感谢各路大佬的帮忙 以下为部分借鉴参考文献</p></blockquote><p><a href="https://whaltze.github.io/2025/02/14/RM2025%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/">WHALTZE - RM2025导航调试</a></p><p><a href="https://blog.csdn.net/qq_48580785/article/details/135821380">Ubuntu22.04如何安装卸载gazebo和模型等一些问题</a></p><p><a href="https://blog.csdn.net/wujialing99/article/details/51911465">gazebo环境变量问题设置问题</a></p><p><a href="https://blog.csdn.net/weixin_45661757/article/details/114026865">机器人SLAM与自主导航（三）——SLAM功能包</a></p><p><a href="https://blog.csdn.net/aidimoli123/article/details/112154918">激光SLAM之Gmapping（1）安装与测试</a></p><p><a href="https://wiki.ros.org/">wiki.ros.org</a></p><p><a href="http://www.autolabor.com.cn/book/ROSTutorials/">autolabor.com.cn</a>  </p><p><a href="http://www.autolabor.com.cn/book/ROSTutorials/di-7-zhang-ji-qi-ren-dao-822a28-fang-771f29/72-dao-hang-shi-xian/721-dao-hang-shi-xian-01-slam.html">autolabor.com.cn 文档 - 导航实现01_SLAM建图</a></p><p><a href="https://wiki.ros.org/hector_slam/Tutorials/SettingUpForYourRobot">How to set up hector_slam for your robot</a></p><p><a href="https://blog.csdn.net/cyx610481953/article/details/121728830">用自己的雷达和IMU运行cartographer</a></p><p><a href="https://blog.csdn.net/qq_39502099/article/details/125969577">cartographer接入2D雷达laser+imu实时建图</a></p><p><a href="https://blog.csdn.net/qq_46274948/article/details/127012313?spm=1001.2101.3001.6650.2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Ctr-2-127012313-blog-125969577.235%5Ev43%5Epc_blog_bottom_relevance_base9">Cartographer（3）lidar+IMU建图</a></p><p><a href="https://blog.csdn.net/learning_tortosie/article/details/102581261">Ubuntu中终端分屏工具terminator的安装和使用</a></p><p><a href="https://answers.ros.org/question/388322/">How to troubleshoot Rviz2 not receiving map from cartographer?</a></p><p><a href="https://zhuanlan.zhihu.com/p/354723907">Cartographer建图实操</a></p><p><a href="https://blog.csdn.net/qq_40216084/article/details/104599308">cartographer跑自己的数据包-2d建图篇（laser+Imu建图篇）</a></p><p><a href="https://blog.csdn.net/m0_48639942/article/details/129963434">Gmapping：rviz中map显示no map received</a></p><p><a href="https://fishros.org.cn/forum/topic/2661/%E9%B1%BC%E5%93%A5%E9%B1%BC%E5%93%A5-rviz2%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9B%BE%E6%97%B6%E6%97%A0%E6%B3%95%E5%87%BA%E7%8E%B0%E5%9C%B0%E5%9B%BE/11">鱼哥鱼哥，rviz2加载地图时无法出现地图</a></p><p><a href="https://www.cnblogs.com/CloudFlame/p/16531301.html">CloudFlame【cartographer ros】九： 建图和定位</a></p><p><a href="https://blog.csdn.net/qq_41821678/article/details/119632675">【1】Cartographer建图后的原始图像处理（Rviz插件修图）</a></p><p><a href="https://google-cartographer-ros.readthedocs.io/en/latest/your_bag.html">Cartographer ROS 官方文档</a></p><p><a href="https://blog.csdn.net/zkk9527/article/details/109096142">Cartographer配置文件参数解释</a></p><p><a href="https://blog.csdn.net/qq_41821678/article/details/119115783">cartographer建图参数注释及配置修改</a></p><p><a href="https://blog.csdn.net/Cloud_H/article/details/125442783">【cartographer_ros】四： 发布和订阅里程计odom信息</a></p><p><a href="https://blog.csdn.net/qq_41821678/article/details/119841104">cartographer+navigation定位及里程计调试实验记录（一）</a></p><p><a href="https://blog.csdn.net/Ai_Smith/article/details/107627904">ROS小车记录系列（二）IMU采集、过滤，与odom数据融合，发布新的odom话题</a></p><p><a href="https://blog.csdn.net/qq_43112859/article/details/132879387">IMU+激光雷达融合使用LIO-SAM建图学习笔记——详细、长文、多图、全流程</a></p><p><a href="https://blog.csdn.net/qq_42108414/article/details/131517632">【SLAM学习】获取IMU和雷达消息并发布</a></p><p><a href="https://zhuanlan.zhihu.com/p/563264225">Cartographer 3D实时建图教程(超详细) - 镭神C16 + IMU （一）</a></p><p><a href="https://blog.csdn.net/qq_43961980/article/details/118113609">ROS只使用思岚A1激光雷达进行slam建图</a></p><p><a href="https://www.zhihu.com/question/51743133">cartographer构图后如何保存，以备下次使用，避免重复构图？</a></p><p><a href="https://blog.csdn.net/u013834525/article/details/84622496">ROS Navigation之map_server完全详解</a></p><p><a href="https://blog.csdn.net/wudong11/article/details/125028064#:~:text=.%2FCartographerSaveMap.sh,%E5%8D%B3%E5%8F%AF%E4%BF%9D%E5%AD%98%E5%9C%B0%E5%9B%BE%E3%80%82">在ROS下Cartographer保存地图并加载地图</a></p><p><a href="https://github.com/HaoQChen/map_server">map_server</a></p><p><a href="https://blog.csdn.net/qq_40216084/article/details/107784339">Python-pcl的安装</a></p><p><a href="https://blog.csdn.net/qq_40216084/article/details/107619250">激光SLAM之NDT算法（2）-建图</a></p><p><a href="https://github.com/ros2/cartographer">Cartographer GITHUB</a></p><p><a href="https://blog.csdn.net/qq_41821678/article/details/119139295">cartographer跑纯定位的配置文件</a></p><p><a href="https://blog.csdn.net/zkk9527/article/details/116160508?spm=1001.2101.3001.6650.3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-116160508-blog-128287297.235%5Ev38%5Epc_relevant_anti_vip&utm_relevant_index=4">SLAM学习笔记（十九）开源3D激光SLAM总结大全——Cartographer3D,LOAM,Lego-LOAM,LIO-SAM,LVI-SAM,Livox-LOAM的原理解析及区别</a></p><p><a href="https://blog.csdn.net/HandsomeHong/article/details/122402395">CMake基础教程（24）add_executable生成目标可执行文件</a></p><p><a href="https://blog.csdn.net/qq_38880380/article/details/131406336">机器人开发–Cartographer详细介绍</a></p><p><a href="https://blog.csdn.net/tiancailx/article/details/112133226">从零开始搭二维激光SLAM — 栅格地图的构建</a></p><p><a href="https://zhuanlan.zhihu.com/p/107607879">cartographer的一些学习笔记（2）–运行示例数据包</a></p><p><a href="https://blog.csdn.net/weixin_44362628/article/details/122496140">【踩坑记录】Slam-Gmapping建图失败–已解决</a></p><p><a href="https://blog.csdn.net/scarecrow_sun/article/details/127978254">ROS2+cartorgrapher+激光雷达建图并保存</a></p><p><a href="https://blog.csdn.net/c417469898/article/details/117790918">cartographer trajectory_builder_2d.lua参数备忘</a></p><p><a href="https://blog.csdn.net/YGG12022/article/details/124044466">Cartographer基础之Scan、Node、Submap、Trajectory</a></p><p><a href="https://blog.csdn.net/qq_28087491/article/details/109179151">ROS中的setup.bash</a></p><p><a href="https://blog.csdn.net/AI_INDUSTRY/article/details/108833296">ROS运行gazebo提示“process has die”问题-已解决</a></p><p><a href="https://robotics.stackexchange.com/questions/60437/warning-no-map-received-occurs-when-trying-to-visualize-map-in-rviz">Warning “No map received” occurs, when trying to visualize map in rviz</a></p><p><a href="https://www.cnblogs.com/gary-guo/p/10607593.html">cartographer保存二维地图，实测有效</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 导航 </tag>
            
            <tag> 视觉组 </tag>
            
            <tag> RPLIDAR </tag>
            
            <tag> Cartographer </tag>
            
            <tag> RoboMaster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象代数</title>
      <link href="/2024/09/22/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/"/>
      <url>/2024/09/22/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一时兴起 小记一番 后搁置</p></blockquote><h2 id="第一章-群论"><a href="#第一章-群论" class="headerlink" title="第一章 群论"></a>第一章 群论</h2><h3 id="1-1-基本定理"><a href="#1-1-基本定理" class="headerlink" title="1.1 基本定理"></a>1.1 基本定理</h3><blockquote><p>在数学中，群（Group）是一个有结构的集合，而群论是研究这些结构的数学分支</p></blockquote><ul><li>群是一个集合，用 <strong>𝐺</strong> 来表示这个集合,集合中的元素可以是数字、矩阵、函数、变换等</li><li>群上需要定义一个运算（比如加法或乘法），通常我们用符号 <strong>*</strong> 来表示这个运算。</li></ul><p>:star: <strong>一些定义</strong></p><ul><li><p><strong>二元运算：</strong> 设 $C$ 是一个集合，$x$ 是 $C$ 上的一个函数，对任意 $a, p ∈ C，$记 $x(a, p)$ 为 $x$ 的作用，即 $a$ 和 $p$ 的组合。我们通常写作 $a * p$</p></li><li><p><strong>结合律：</strong> 对任意 $a, p, q ∈ C ，$ 如果 a * (p * q) &#x3D; (a * p) * q，则称运算 * 在 C 上满足结合律。$<br>交换律：对任意 a, p ∈ C，如果 a * p &#x3D; p * a，则称运算 * 在 C 上满足交换律</p></li><li><p><strong>单位元：</strong> 对于 C 中的元素 e，如果对任意 a ∈ C，都有 a * e &#x3D; e * a &#x3D; a，则称 e 是 C 上的单位元</p></li><li><p><strong>逆元：</strong> 对于 C 中的元素 a，如果存在 b ∈ C，使得 $a * b &#x3D; b * a &#x3D; e$ ，则称 b 是 a 的逆元</p></li></ul><blockquote><p>加法 (+) 是整数集 Z 上的交换运算。<br>乘法 (*) 是整数集 Z 上的交换运算。<br>减法 (-) 不是整数集 Z 上的运算。</p></blockquote><p><strong>群必须满足以下四个基本公理：</strong></p><ul><li><p><strong>封闭性（Closure）：</strong> 对集合 𝐺 中任意两个元素 a 和 𝑏 运算 𝑎∗𝑏 仍在 $G$ 中</p><p>对于整数集合 𝑍 中，任意两个整数相加的结果仍是一个整数。</p></li><li><p><strong>结合律（Associativity）：</strong> 对任意  $ 𝑎 , 𝑏 , 𝑐 ∈ G $ ，有 $(a∗b)∗c&#x3D;a∗(b∗c)$ 。</p></li><li><p><strong>单位元（Identity element）：</strong>  单位元  𝑒 ，满足 $𝑒∗𝑎&#x3D;𝑎∗𝑒&#x3D;𝑎$<br>在整数加法下，0 是单位元 有 $0+a&#x3D;a+0&#x3D;a$</p></li><li><p><strong>逆元（Inverse element）：</strong> 对每个 a∈G，都存在一个元素 $b∈G$ ，使得 $a∗b&#x3D;b∗a&#x3D;e$ ，即 b 是 𝑎 的逆元。</p><p>对于整数加法，每个数 a 都有一个逆元 −a，因为 a+(−a)&#x3D;0。</p></li></ul><p><strong>:star: 重要命题</strong></p><ol><li>群的单位元是唯一的。</li><li>每个元素的逆元是唯一的。</li><li>逆元满足结合律：对于任意 a ∈ G，都有 $( a^{-1} )^{-1} &#x3D; a$ 。</li><li>逆元满足消去律：对于任意 $a, b, c ∈ G$ ，如果 $a * b &#x3D; a * c$ ，则 b &#x3D; c；如果 $b * a &#x3D; c * a$ ，则 $b &#x3D; c$ 。</li><li>集合中元素的乘积与括号无关（称为广义结合律）。</li><li>对于任意群 G 和 a, b ∈ G，方程 $a * x &#x3D; b 和 x * b &#x3D; a$ 有唯一解。</li><li>左消去律和右消去律成立，即如果 $a * x &#x3D; a * y$ ，则 $x &#x3D; y$；如果 $x * b &#x3D; y * b$ ，则 $x &#x3D; y$ 。<br>定义</li></ol><p><strong>元素的阶：</strong> 对于群 G 中的元素 a，如果存在最小的正整数 n，使得 $a^n &#x3D; e$ ，则称 n 是 a 的阶，记作 $|a|$ 。如果 a 的任何正整数次幂都不是单位元，则称 $|a| &#x3D; ∞$</p><p><strong>循环子群：</strong> 由 G 中元素的幂生成的子群称为循环子群。</p><blockquote><p>单位元的阶是 1。<br>在加法群 Z, Q, R, C 中，每个非零元素的阶都是无穷大。<br>在乘法群 Z-{0}, Q-{0} 中，-1 的阶是 2，其他非单位元的阶都是无穷大。</p></blockquote><p><strong>乘法表：</strong> 对于有限群 G，其乘法表是一个方阵，其对角线上的元素是单位元，其他元素是 G 中元素的乘积。</p><h3 id="1-2-二面体群"><a href="#1-2-二面体群" class="headerlink" title="1.2 二面体群"></a>1.2 二面体群</h3><p>群作用描述了群如何作用在某个集合上。设 G 是一个群，X 是一集合。如果群 G 的每个元素都能“作用”在 X 上，使得 G 的群运算和集合上的操作相容，我们就说 G 作用在集合 X 上。</p><p>而对二面体群是一类重要的群，其元素是关于几何对象的对称性。</p><p> <strong>有如下定义：</strong></p><p>Dihedral groups 是一类重要的群，其元素是几何对象的对称性。这些几何对象中最简单的一类是正多边形</p><p>对于一个正 n 边形，其对称性是指能够将这个多边形通过某种方式移动到原来的位置，并覆盖它本身的刚性运动。这些对称性可以表示为 n 个顶点的排列，即一个将 {1, 2, …, n} 映射到其自身的双射函数。例如，对于一个正方形，其对称性包括旋转和反射，可以用以下排列来表示：</p><ul><li>旋转 90°: (1234)</li><li>旋转 180°: (13)(24)</li><li>旋转 270°: (1432)</li><li>反射关于对角线： (1324), (2413)</li></ul><p>我们可以将这些对称性组合起来，形成一个群，称为二面体群 Dn，其中，Dn 的中心是一个包含单位元和 $r^n&#x2F;2$ 的子群。Dn 的元素是所有 n 个顶点的排列，其二元运算定义为排列的复合。Dn 的阶数为 2n，即 n 个旋转和 n 个反射。</p><p><strong>生成元和关系</strong></p><p>为了简化计算和理解二面体群的结构，我们可以使用生成元和关系来表示 Dn。Dn 的生成元通常选择旋转 r (顺时针旋转 $2π&#x2F;n$ 弧度) 和反射 s (关于经过顶点 1 和中心的对称轴的反射)。Dn 的关系如下：<br>$r^n &#x3D; 1$ (旋转 n 次回到原位)<br>$s^2 &#x3D; 1$ (反射两次回到原位)<br>$rs &#x3D; sr^{-1}$ (旋转和反射的顺序可以交换，但旋转次数要减半)</p><p><strong>性质</strong></p><ul><li>阶数为 2n: Dn 的阶数是旋转和反射的数量之和。</li><li>非交换性: 旋转和反射不满足交换律，例如 rs ≠ sr。</li><li>循环子群: 对于每个 n，Dn 都包含一个循环子群，由 r 的幂次组成。</li></ul><p><strong>视觉算法中可能的群论应用</strong></p><blockquote><p>以下资料来源于网络</p></blockquote><p>群论特别在图像处理和计算机视觉领域中有广泛应用，尤其是在图像对称性、旋转、平移等几何变换的处理中。</p><ul><li><p><strong>图像变换:</strong> 在视觉算法中，图像可能需要执行旋转、缩放或平移等操作。可以用群来描述这些变换。例如，旋转可以用一个特殊的矩阵群来表示。(矩阵群在后续章节会介绍学习)</p></li><li><p><strong>对称性检测:</strong> 很多视觉问题涉及检测物体的对称性。对称群（如二面体群）可以帮助描述物体的对称变换，使得算法能识别具有对称性的对象。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SMART</title>
      <link href="/2024/09/22/SMART/"/>
      <url>/2024/09/22/SMART/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文章记载零碎知识,报错，供查阅</p></blockquote><h2 id="sh文件权限不够"><a href="#sh文件权限不够" class="headerlink" title=".sh文件权限不够"></a>.sh文件权限不够</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &lt;filename&gt;.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> +x start.sh</span></span><br></pre></td></tr></table></figure><h2 id="中英文符号切换"><a href="#中英文符号切换" class="headerlink" title="中英文符号切换"></a>中英文符号切换</h2><p>windows自带输入法,进入设置开启中英文标点符号切换功能,默认为 <strong>ctrl+.</strong> ctrl加句号,便可实现中文输入法状态下,输出英文字符</p><h2 id="source-setup-bash"><a href="#source-setup-bash" class="headerlink" title="source &#x2F;setup.bash"></a>source &#x2F;setup.bash</h2><blockquote><p><a href="https://blog.csdn.net/qq_28087491/article/details/109179151">CSDN-ROS中的setup.bash</a></p></blockquote><p>在创建了ROS的workspace后，需要将workspace中的setup.bash文件写入~&#x2F;.bashrc 文件中，让其启动，就像这个样子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /opt/ros/melodic/setup.bash</span><br></pre></td></tr></table></figure><p>写入和打开方式（vim打开也阔以）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>这句话的目的就是在开新的terminal的时候，运行这个setup.bash，而这个setup.bash的作用是让一些ROS* 开头的命令可以使用。</p><p>在工作空间的devel文件夹中存在几个setup.*sh形式的环境变量设置脚本。使用source命令运行这些脚本文件，则工作空间的环境变量设置可以生效（如可以找到该工作空间内的项目）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure><p>为了确保环境变量已经生效，可以使用如下命令进行检查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $ROS_PACKAGE_PATH</span><br></pre></td></tr></table></figure><p>如果打印的路径中已经包含当前工作空间的路径，则说明环境变量设置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/yinji/catkin_ws/src:/opt/ros/melodic/share</span><br></pre></td></tr></table></figure><p>没有用source运行该脚本时，打印的路径为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/ros/melodic/share</span><br></pre></td></tr></table></figure><p>有时候可通过命令行添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/rm/rplidar_c1/install</span><br></pre></td></tr></table></figure><p>在终端中使用source命令设置的环境变量只能在当前终端中生效，如果希望环境变量在所有终端中有效，则需要在终端的配置文件中加入环境变量的设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo “source /WORKSPACE/devel/setup.bash”&gt;&gt;~/.bashrc</span><br></pre></td></tr></table></figure><p>请使用工作空间路径替代 WORKSPACE。（将source &#x2F;catkin_ws&#x2F;devel&#x2F;setup.bash命令放入.bashrc文件内）</p><h2 id="功能包的构建"><a href="#功能包的构建" class="headerlink" title="功能包的构建"></a>功能包的构建</h2><blockquote><p><a href="https://blog.csdn.net/wangmj_hdu/article/details/119985553">[ROS] 手把手教你如何从无到有构建一个ROS软件包</a></p></blockquote><h2 id="查看-杀死进程ps"><a href="#查看-杀死进程ps" class="headerlink" title="查看&#x2F;杀死进程ps"></a>查看&#x2F;杀死进程ps</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef #查看所有进程(不限制此终端)</span><br></pre></td></tr></table></figure><blockquote><p>选项-r表示只显示正在运行的程序<br>选项-a表示显示当前终端下的所有程序</p></blockquote><p>查看所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | less</span><br></pre></td></tr></table></figure><p>查看特定进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grey rviz2 #用rviz2进程举例</span><br></pre></td></tr></table></figure><p>找到对应进程的PID,用kill指令杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill &lt;PID&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 &lt;PID&gt; #强制杀死</span><br></pre></td></tr></table></figure><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="rviz2-x11-wayland不兼容"><a href="#rviz2-x11-wayland不兼容" class="headerlink" title="rviz2-x11-wayland不兼容"></a>rviz2-x11-wayland不兼容</h2><blockquote><p>rviz2不兼容wayland,rviz和gazebo必须在X11&#x2F;Xorg才能启动（原因为Wayland只支持GLES并且rviz和gazebo用的库不支持GLES）。因此必须要用XWayland才能启动,博主不知道为什么有一天更新软件包后就不能使用rviz2了,出现如下报错</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(rm) whaltze@Ubuntu:~/rm/sllidar$ ros2 launch sllidar_ros2 view_sllidar_c1_launch.py </span><br><span class="line">[INFO] [launch]: All log files can be found below /home/whaltze/.ros/log/2024-10-12-17-29-29-395549-Ubuntu-437180</span><br><span class="line">[INFO] [launch]: Default logging verbosity is set to INFO</span><br><span class="line">[INFO] [sllidar_node-1]: process started with pid [437181]</span><br><span class="line">[INFO] [rviz2-2]: process started with pid [437183]</span><br><span class="line">[rviz2-2] Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.</span><br></pre></td></tr></table></figure><p>经查询,当前会话类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $XDG_SESSION_TYPE</span><br></pre></td></tr></table></figure><p>发现输出wayland,查询GPT,我安装了wayland QT插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qtwayland5</span><br></pre></td></tr></table></figure><p>发现没什么用处</p><p>之后我又在~&#x2F;.bashrc中加入x11</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export QT_QPA_PLATFORM=xcb &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>成功解决,但在后来学习中了解到用 export QT_QPA_PLATFORM&#x3D;xcb，这样会导致本来支持Wayland的App强制使用XWayland导致性能或者效果出现异常,所以我更改了~&#x2F;.bashrc中的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QT_QPA_PLATFORM=xcb gazebo</span><br><span class="line">QT_QPA_PLATFORM=xcb rviz2</span><br></pre></td></tr></table></figure><p>这样大概率就可以了,博主本人修改后运行carto功能包再运行雷达功能包打开rviz2时候会warning,一直不行,找不到原因,最后是重启解决了(笑),但是开启后雷达终端仍然有warning,但不影响后面调试了</p><h2 id="cartographer-ros-msgs-符号连接创建失败"><a href="#cartographer-ros-msgs-符号连接创建失败" class="headerlink" title="cartographer_ros_msgs 符号连接创建失败"></a>cartographer_ros_msgs 符号连接创建失败</h2><p>colcon build后出现如下报错</p><p><img src="/./images/SMART/%E6%8A%A5%E9%94%992.png" alt=" "></p><p>进入相关工作空间文件&#x2F;build下<br>把ament_cmake_python整个文件夹删除后再colcon build<br>就可以啦</p><h2 id="VMware虚拟机-网络不显示有线连接"><a href="#VMware虚拟机-网络不显示有线连接" class="headerlink" title="VMware虚拟机 网络不显示有线连接"></a>VMware虚拟机 网络不显示有线连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service NetworkManager stop</span><br><span class="line">sudo rm /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">sudo service NetworkManager start</span><br></pre></td></tr></table></figure><h2 id="在ubuntu安装edge"><a href="#在ubuntu安装edge" class="headerlink" title="在ubuntu安装edge"></a>在ubuntu安装edge</h2><p><a href="https://www.sysgeek.cn/ubuntu-install-microsoft-edge/">如何在 Ubuntu 上安装 Microsoft Edge 浏览器</a></p><p>从 Ubuntu 中卸载 Microsoft Edge 浏览器</p><p>执行命令卸载 Edge</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove microsoft-edge-stable</span><br></pre></td></tr></table></figure><p>删除 GPG 密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/share/keyrings/microsoft-edge.gpg</span><br></pre></td></tr></table></figure><p>从系统中移除 Microsoft Edge 的软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/apt/sources.list.d/microsoft-edge.list</span><br></pre></td></tr></table></figure><h2 id="使用-代理-Clone-Github"><a href="#使用-代理-Clone-Github" class="headerlink" title="使用 代理 Clone Github"></a>使用 代理 Clone Github</h2><p><a href="https://flowus.cn/lihanchen/share/c2e8bab3-4be9-437b-ab2a-50bc11971c6d">北极熊-陈佬博客-使用代理Clone Github</a></p><h2 id="VScode-折叠所有代码块"><a href="#VScode-折叠所有代码块" class="headerlink" title="VScode 折叠所有代码块"></a>VScode 折叠所有代码块</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crtl + K + 0</span><br></pre></td></tr></table></figure><p>展开<br><code>ctrl + K + J</code></p><h2 id="在VScode直接粘贴图片-编写markdown"><a href="#在VScode直接粘贴图片-编写markdown" class="headerlink" title="在VScode直接粘贴图片 编写markdown"></a>在VScode直接粘贴图片 编写markdown</h2><p><a href="https://blog.csdn.net/seek97/article/details/139220331#:~:text=%E5%9C%A8VS%20Code%E4%B8%AD%EF%BC%8C%E6%8C%89%E4%B8%8B%20Ctrl%20%2B%20%2C%EF%BC%8C%E6%89%93%E5%BC%80%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E3%80%82%20%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE%E9%A1%B9%20key%20%E4%B8%BA,%E4%BD%A0%E7%9A%84%E7%9B%AE%E6%A0%87%E8%B7%AF%E5%BE%84%E3%80%82%20%E6%AF%94%E5%A6%82%E6%88%91%E6%83%B3%E5%B0%86%E5%9B%BE%E7%89%87%E6%94%BE%E5%9C%A8%20photo%E7%9B%AE%E5%BD%95%E4%B8%8B%20markdown%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E6%88%91%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E4%B8%BAphoto%E3%80%82%20%E4%BF%9D%E5%AD%98%E8%AE%BE%E7%BD%AE%E5%8D%B3%E5%8F%AF%E3%80%82%20%EF%BC%881%EF%BC%89%E6%B3%A8%E6%84%8F%E4%B8%8D%E8%A6%81%E5%8A%A0%22%22%20%EF%BC%882%EF%BC%89%E4%B8%8D%E7%94%A8%E9%87%8D%E5%90%AF%E4%B9%9F%E4%BC%9A%E7%94%9F%E6%95%88%E3%80%82%20%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E9%98%85%E8%AF%BB1.4k%E6%AC%A1%EF%BC%8C%E7%82%B9%E8%B5%9E5%E6%AC%A1%EF%BC%8C%E6%94%B6%E8%97%8F8%E6%AC%A1%E3%80%82">如何设置VS Code 中 Markdown粘贴图片的位置</a></p><p>设置搜索 <code>maekdown.copy</code></p><p>修改如下</p><p><img src="/images/SMART/image.png"></p><h2 id="VScode-只能打开单个选项卡页面"><a href="#VScode-只能打开单个选项卡页面" class="headerlink" title="VScode 只能打开单个选项卡页面"></a>VScode 只能打开单个选项卡页面</h2><p><img src="/images/SMART/image-1.png"></p><h2 id="博客内容缺失"><a href="#博客内容缺失" class="headerlink" title="博客内容缺失"></a>博客内容缺失</h2><p>今天提交 Ubuntu双系统博客的时候 忽然出现大段内容缺失</p><p>进入 github 仓库 源码查看<br>一一对比 没有发现问题<br><code>F12</code> edge 开发者模式 查看 发现有一处开始大段文字被注释</p><p>进入md源码查看 发现 md 推送到网页 不能用 <code>&lt;!--   --&gt;</code> 符号进行注释 会导致网页端错误 进而导致后续内容缺失删除符号后遂可</p><h2 id="修改-博客置顶"><a href="#修改-博客置顶" class="headerlink" title="修改 博客置顶"></a>修改 博客置顶</h2><p>打开博客目录<br><code>node_modules\hexo-generator-index\lib</code></p><p>其中的<code>generator.js</code>文件就是我们所要修改的文件。</p><p>实现该功能需要在<code>const posts = locals.posts.sort(config.index_generator.order_by);</code><br>代码下添加一下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">posts.<span class="property">data</span> = posts.<span class="property">data</span>.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(a.<span class="property">top</span> &amp;&amp; b.<span class="property">top</span>) &#123; <span class="comment">// 两篇文章都有top，top大的在前</span></span><br><span class="line">    <span class="keyword">if</span>(a.<span class="property">top</span> == b.<span class="property">top</span>)</span><br><span class="line">        <span class="keyword">return</span> b.<span class="property">date</span> - a.<span class="property">date</span>; <span class="comment">// 若top值一样，最新的文章在前面</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> b.<span class="property">top</span> - a.<span class="property">top</span>; <span class="comment">// top大的在前面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="property">top</span> &amp;&amp; !b.<span class="property">top</span>) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!a.<span class="property">top</span> &amp;&amp; b.<span class="property">top</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> b.<span class="property">date</span> - a.<span class="property">date</span>; <span class="comment">//都没有top标签，最新的文章在前面</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>之后 在文章前添加 top 值 即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: SMART</span><br><span class="line">date: 2024-09-22 17:00:00</span><br><span class="line"><span class="section"># top<span class="emphasis">_img: /img/SMART.png # 顶部背景图</span></span></span><br><span class="line"><span class="emphasis"><span class="section">cover: /img/SMART.png   # 文章封面</span></span></span><br><span class="line"><span class="emphasis"><span class="section">tags:</span></span></span><br><span class="line"><span class="emphasis"><span class="section">- Blog</span></span></span><br><span class="line"><span class="emphasis"><span class="section">- SMART</span></span></span><br><span class="line"><span class="emphasis"><span class="section">top: 100</span></span></span><br><span class="line"><span class="emphasis"><span class="section">output: pdf_</span>document</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="博客加入评论系统-Gitalk"><a href="#博客加入评论系统-Gitalk" class="headerlink" title="博客加入评论系统 Gitalk"></a>博客加入评论系统 Gitalk</h2><p><a href="https://blog.csdn.net/qq_33384402/article/details/107200465">Hexo-butterfly评论系统配置: Gittalk</a></p><h2 id="博客-npm-安装treee"><a href="#博客-npm-安装treee" class="headerlink" title="博客 npm 安装treee"></a>博客 npm 安装treee</h2><p><a href="https://blog.csdn.net/weixin_44375151/article/details/140546831">windows tree 生成目录结构</a></p><h2 id="HTML编写隐藏段落块"><a href="#HTML编写隐藏段落块" class="headerlink" title="HTML编写隐藏段落块"></a>HTML编写隐藏段落块</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><div class="custom-toggle" onclick="this.nextElementSibling.classList.toggle('show')"      style="background-color: hsla(213, 88.40%, 62.90%, 0.94); color: white; padding: 10px; margin: 0 auto 30px; text-align: center; font-family: 'Comic Sans MS', cursive; font-size: 18px; cursor: pointer;">点击</div><div class="code-container" style="display: none;"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这是一个隐藏框</span></span><br></pre></td></tr></table></figure></div><script>document.querySelectorAll('.custom-toggle').forEach(btn => {  btn.addEventListener('click', () => {    const codeBlock = btn.nextElementSibling;    codeBlock.style.display = codeBlock.style.display === 'none' ? 'block' : 'none';  });});</script><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-toggle&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;this.nextElementSibling.classList.toggle(&#x27;show&#x27;)&quot;</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">&quot;background-color: hsla(213, 88.40%, 62.90%, 0.94); color: white; padding: 10px; margin: 0 auto 30px; text-align: center; font-family: &#x27;Comic Sans MS&#x27;, cursive; font-size: 18px; cursor: pointer;&quot;</span>&gt;</span></span><br><span class="line">点击</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">&#123;% codeblock lang:yml %&#125;</span><br><span class="line">这是一个隐藏框</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.custom-toggle&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">btn</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> codeBlock = btn.<span class="property">nextElementSibling</span>;</span></span><br><span class="line"><span class="language-javascript">    codeBlock.<span class="property">style</span>.<span class="property">display</span> = codeBlock.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;none&#x27;</span> ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><!-- 折叠标题 --><div class="custom-toggle"      style="background-color: hsla(213, 88.40%, 62.90%, 0.94);             color: white;             padding: 12px 40px 12px 20px;            margin: 0 auto 30px;            border: 2px solid hsla(213, 88%, 63%, 0.3);            border-radius: 8px 8px 0 0;            font-family: 'Comic Sans MS', cursive;             font-size: 18px;             cursor: pointer;            position: relative;            transition: all 0.3s ease;"> 嘿嘿  <!-- 动态箭头 -->  <span class="toggle-arrow" style="position: absolute;                                   right: 15px;                                   top: 50%;                                  transform: translateY(-50%);                                  color: rgba(255,255,255,0.8);                                  transition: transform 0.3s ease;">    ▼  </span></div><!-- 代码容器 --><div class="code-container" style="display: none;                                 border: 2px solid hsla(213, 88%, 63%, 0.3);                                 border-top: none;                                 border-radius: 0 0 8px 8px;                                 background: hsla(213, 88.40%, 62.90%, 0.06);                                 padding: 15px;                                 margin-top: -2px;">  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">增加一些美化细节</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></div><script>document.querySelectorAll('.custom-toggle').forEach(btn => {  const arrow = btn.querySelector('.toggle-arrow');  const codeBlock = btn.nextElementSibling;  btn.addEventListener('click', () => {    // 切换显示状态    const isShowing = codeBlock.style.display === 'block';    codeBlock.style.display = isShowing ? 'none' : 'block';        // 箭头动画    arrow.style.transform = isShowing       ? 'translateY(-50%) rotate(0deg)'       : 'translateY(-50%) rotate(180deg)';        // 边框动画    btn.style.borderRadius = isShowing       ? '8px 8px 0 0'       : '8px';    codeBlock.style.borderRadius = isShowing       ? '0 0 8px 8px'       : '0 0 8px 8px';  });});</script><style>/* 悬停效果 */.custom-toggle:hover {  background-color: hsla(213, 88.40%, 62.90%, 0.98) !important;  box-shadow: 0 2px 8px hsla(213, 88%, 63%, 0.2);}.custom-toggle:hover .toggle-arrow {  color: #fff;}/* 代码块过渡动画 */.code-container {  transition: opacity 2.0s ease, transform 2.0s ease;  opacity: 0;  transform: translateY(-10px);}.code-container[style*="display: block"] {  opacity: 1;  transform: translateY(0);}/* 移动端优化 */@media (max-width: 768px) {  .custom-toggle {    font-size: 16px !important;    padding: 10px 35px 10px 15px !important;  }  .toggle-arrow {    right: 12px !important;    font-size: 14px;  }}</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 折叠标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-toggle&quot;</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">&quot;background-color: hsla(213, 88.40%, 62.90%, 0.94); </span></span></span><br><span class="line"><span class="string"><span class="tag">            color: white; </span></span></span><br><span class="line"><span class="string"><span class="tag">            padding: 12px 40px 12px 20px;</span></span></span><br><span class="line"><span class="string"><span class="tag">            margin: 0 auto 30px;</span></span></span><br><span class="line"><span class="string"><span class="tag">            border: 2px solid hsla(213, 88%, 63%, 0.3);</span></span></span><br><span class="line"><span class="string"><span class="tag">            border-radius: 8px 8px 0 0;</span></span></span><br><span class="line"><span class="string"><span class="tag">            font-family: &#x27;Comic Sans MS&#x27;, cursive; </span></span></span><br><span class="line"><span class="string"><span class="tag">            font-size: 18px; </span></span></span><br><span class="line"><span class="string"><span class="tag">            cursor: pointer;</span></span></span><br><span class="line"><span class="string"><span class="tag">            position: relative;</span></span></span><br><span class="line"><span class="string"><span class="tag">            transition: all 0.3s ease;&quot;</span>&gt;</span></span><br><span class="line"> 嘿嘿</span><br><span class="line">  <span class="comment">&lt;!-- 动态箭头 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toggle-arrow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; </span></span></span><br><span class="line"><span class="string"><span class="tag">                                  right: 15px; </span></span></span><br><span class="line"><span class="string"><span class="tag">                                  top: 50%;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                  transform: translateY(-50%);</span></span></span><br><span class="line"><span class="string"><span class="tag">                                  color: rgba(255,255,255,0.8);</span></span></span><br><span class="line"><span class="string"><span class="tag">                                  transition: transform 0.3s ease;&quot;</span>&gt;</span></span><br><span class="line">    ▼</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 代码容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 border: 2px solid hsla(213, 88%, 63%, 0.3);</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 border-top: none;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 border-radius: 0 0 8px 8px;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 background: hsla(213, 88.40%, 62.90%, 0.06);</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 padding: 15px;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 margin-top: -2px;&quot;</span>&gt;</span></span><br><span class="line">  &#123;% codeblock lang:yml %&#125;</span><br><span class="line">增加一些美化细节</span><br><span class="line">  &#123;% endcodeblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.custom-toggle&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">btn</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> arrow = btn.<span class="title function_">querySelector</span>(<span class="string">&#x27;.toggle-arrow&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> codeBlock = btn.<span class="property">nextElementSibling</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 切换显示状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> isShowing = codeBlock.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    codeBlock.<span class="property">style</span>.<span class="property">display</span> = isShowing ? <span class="string">&#x27;none&#x27;</span> : <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头动画</span></span></span><br><span class="line"><span class="language-javascript">    arrow.<span class="property">style</span>.<span class="property">transform</span> = isShowing </span></span><br><span class="line"><span class="language-javascript">      ? <span class="string">&#x27;translateY(-50%) rotate(0deg)&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">      : <span class="string">&#x27;translateY(-50%) rotate(180deg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 边框动画</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">style</span>.<span class="property">borderRadius</span> = isShowing </span></span><br><span class="line"><span class="language-javascript">      ? <span class="string">&#x27;8px 8px 0 0&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">      : <span class="string">&#x27;8px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    codeBlock.<span class="property">style</span>.<span class="property">borderRadius</span> = isShowing </span></span><br><span class="line"><span class="language-javascript">      ? <span class="string">&#x27;0 0 8px 8px&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">      : <span class="string">&#x27;0 0 8px 8px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 悬停效果 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.custom-toggle</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">213</span>, <span class="number">88.40%</span>, <span class="number">62.90%</span>, <span class="number">0.98</span>) <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">8px</span> <span class="built_in">hsla</span>(<span class="number">213</span>, <span class="number">88%</span>, <span class="number">63%</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.custom-toggle</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.toggle-arrow</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 代码块过渡动画 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.code-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: opacity <span class="number">2.0s</span> ease, transform <span class="number">2.0s</span> ease;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.code-container</span><span class="selector-attr">[style*=<span class="string">&quot;display: block&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 移动端优化 */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.custom-toggle</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">35px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.toggle-arrow</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">12px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><title>显示/隐藏代码块</title><style>  .code-block {    display: none; /* 初始状态隐藏代码块 */    margin-top: 10px;  }</style></head><body><p><button id="toggleButton">这是一个神秘按钮</button></p><div class="code-block">  <pre>    <code>        嘿嘿 祝你健康幸福 万事顺遂 !    </code>  </pre></div><script>  document.getElementById('toggleButton').addEventListener('click', function() {    var codeBlock = document.querySelector('.code-block');    if (codeBlock.style.display === 'none') {      codeBlock.style.display = 'block';    } else {      codeBlock.style.display = 'none';    }  });</script></body></html><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>显示/隐藏代码块<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.code-block</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none; <span class="comment">/* 初始状态隐藏代码块 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;toggleButton&quot;</span>&gt;</span>这是一个神秘按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code-block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">        嘿嘿 祝你健康幸福 万事顺遂 !</span><br><span class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;toggleButton&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> codeBlock = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.code-block&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (codeBlock.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;none&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      codeBlock.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      codeBlock.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Ubuntu-终端查看所有指令"><a href="#Ubuntu-终端查看所有指令" class="headerlink" title="Ubuntu 终端查看所有指令"></a>Ubuntu 终端查看所有指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script cmd.log</span><br></pre></td></tr></table></figure><p>开始记录终端中执行的所有命令，并保存到当前文件夹下的cmd.log文件中 文件名字后缀都可更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>退出记录</p><h2 id="Ubuntu-虚拟串口-socat"><a href="#Ubuntu-虚拟串口-socat" class="headerlink" title="Ubuntu 虚拟串口 socat"></a>Ubuntu 虚拟串口 socat</h2><p>安装 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install socat</span><br></pre></td></tr></table></figure><p>生成虚拟串口对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -d -d pty,b115200 pty,b115200</span><br></pre></td></tr></table></figure><p><code>/dev/pts/7</code>和<code>/dev/pts/8</code>就是生成的虚拟串口对</p><h2 id="编写虚拟串口"><a href="#编写虚拟串口" class="headerlink" title="编写虚拟串口"></a>编写虚拟串口</h2><p><code>virtualPort.py</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/env python</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">coding=utf-8</span></span><br><span class="line"></span><br><span class="line">import pty</span><br><span class="line">import os</span><br><span class="line">import select</span><br><span class="line"></span><br><span class="line">def mkpty():</span><br><span class="line">    master1, slave = pty.openpty()</span><br><span class="line">    slaveName1 = os.ttyname(slave)</span><br><span class="line">    master2, slave = pty.openpty()</span><br><span class="line">    slaveName2 = os.ttyname(slave)</span><br><span class="line">    print (&#x27;Virtual serial port : &#x27;, slaveName1, slaveName2)</span><br><span class="line">    return master1, master2</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    master1, master2 = mkpty()</span><br><span class="line">    while True:</span><br><span class="line">        rl, wl, el = select.select([master1,master2], [], [], 1)</span><br><span class="line">        for master in rl:</span><br><span class="line">            data = os.read(master, 128)</span><br><span class="line">            print (&quot;read %d data.&quot; % len(data))</span><br><span class="line">            if master==master1:</span><br><span class="line">                os.write(master2, data)</span><br><span class="line">            else:</span><br><span class="line">                os.write(master1, data)</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp SerialPort.cpp -o read -lpthread -D VITRUALPROT -D READ</span><br><span class="line">g++ main.cpp SerialPort.cpp -o write -lpthread -D VITRUALPROT -D WRITE</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 virtualPort.py     //virtualPort.py 为我上面虚拟串口程序的文件名</span><br></pre></td></tr></table></figure><p>打开另一个终端 开始读写</p><p><strong>修改名称</strong></p><p>指定虚拟串口的名称：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -d -d pty,raw,echo=0,link=$HOME/socatpty7 pty,raw,echo=0,link=$HOME/socatpty8</span><br></pre></td></tr></table></figure><p>其中，$HOME&#x2F;socatpty7和$HOME&#x2F;socatpty8是自己设定的串口名称</p><h3 id="测试串口"><a href="#测试串口" class="headerlink" title="测试串口"></a>测试串口</h3><p>启动串口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -d -d pty,b115200 pty,b115200</span><br></pre></td></tr></table></figure><p>测试文件 向&#x2F;dev&#x2F;pts&#x2F;7写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    serial = serial.Serial(<span class="string">&quot;/dev/pts/7&quot;</span>, <span class="number">115200</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> serial.isOpen():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open failed&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        serial.write(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;send: test&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>测试文件 从&#x2F;dev&#x2F;pts&#x2F;8读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    serial = serial.Serial(<span class="string">&quot;/dev/pts/7&quot;</span>, <span class="number">115200</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> serial.isOpen():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open failed&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        serial.write(<span class="string">&quot;test&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;send: test&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>读取&#x2F;dev&#x2F;pts&#x2F;8串口代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">serial</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = serial.read_all()</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        sleep(<span class="number">0.02</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    serial = serial.Serial(<span class="string">&quot;/dev/pts/8&quot;</span>, <span class="number">115200</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> serial.isOpen():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open failed&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = recv(serial)</span><br><span class="line">        <span class="keyword">if</span> data != <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;receive:&quot;</span>, data)</span><br><span class="line">            serial.write(data)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pyserial</span><br><span class="line">python3 tx.py</span><br><span class="line">python3 rx.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> SMART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Git上传本地项目至Github</title>
      <link href="/2024/09/15/%E9%80%9A%E8%BF%87Git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E8%87%B3Github/"/>
      <url>/2024/09/15/%E9%80%9A%E8%BF%87Git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E8%87%B3Github/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><blockquote><p>Linux系统-Ubuntu22.04</p></blockquote><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git # 安装Git</span><br><span class="line"></span><br><span class="line">git --version # 安装成功后显示版本 git version 2.34.1</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;name&quot; # 配置用户名</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;email&quot; # 配置用户邮箱</span><br><span class="line"></span><br><span class="line">git config --list # 查看全局配置</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C email # 生成ssh-key 目录root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将id_rsa.pub里面的内容复制到github账户中</p><h2 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com # 测试链接</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>出现以下内容即表示成功<br>You’ve successfully authenticated, but GitHub does not provide shell access. # 成功</p></blockquote><p>PS 如果上面配置账户不成功，你也可以手动添加账户，进入config 写入用户信息</p><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><blockquote><p>开始前先下载 Git 插件，因博主配置博客时已经接触git，这里不再演示，下面给出官方下载地址和教程，供自行学习查阅<br><a href="https://git-scm.com/">Git 官方下载地址</a><br><a href="https://blog.csdn.net/m0_71102932/article/details/141326014">详细下载教程</a></p></blockquote><p>进入要上传项目的本地文件夹，在文件夹内鼠标右键，看到 <em><strong>Open Git Bash here</strong></em> 和 <em><strong>Open Git GUI here</strong></em> 两个选项说明前面下载git成功</p><p>点击Open Git Bash here，在命令行对话框中输入如下指令，创建初始文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这里要注意，他是隐身的，要打开勾选隐藏的项目才能看到</p><p>然后依次输入以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m &quot;commit&quot;  </span><br><span class="line">git remote add origin https://自己的仓库url地址 </span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>第一条指令是将项目上所有文件添加到该库中，如果要添加特定的文件，把 <strong>。</strong> 改成这个特定的文件即可</p></blockquote><blockquote><p>第二个指令表示你对这次提交的注释，引号内容可修改</p></blockquote><blockquote><p>将本地的仓库关联到github上，根据个人不同进行修改</p></blockquote><blockquote><p>将代码上传至github，正常情况输入完成账号密码即可</p></blockquote><p>具体上传情况可能会有点延迟，稍等片刻即可</p><h1 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h1><p><img src="/./images/%E9%80%9A%E8%BF%87Git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E8%87%B3Github/1.png" alt=" "><br><a href="https://www.cnblogs.com/daniel-hutao/p/open-a-pr-in-github.html">如何参与开源项目 - 细说 GitHub 上的 PR 全过程</a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>建立本地分支最好单独在一个空目录下，在此目录下执行完git remote add origin <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#109;">git@github.com</a>:name&#x2F;repo.git后再执行后面的指令不会出错，此后不管是push、pull、rm都在这个目录进行，这里name&#x2F;repo为自己账户名字和库名字，如Whaltze&#x2F;Robot</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><blockquote><p>查看提交历史记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>删除上传的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached xxx //xxx为文件名,这里不能为目录</span><br><span class="line">git commit -m &quot;xxx&quot; //xxx为注释</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>同步本地分支和github分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>克隆分支库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b 分支名称 https://gitee.com/项目(仓库地址).git</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决VMware下Ubuntu22.04无法联网问题</title>
      <link href="/2024/08/26/%E8%A7%A3%E5%86%B3VMware%E4%B8%8BUbuntu22.04%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98/"/>
      <url>/2024/08/26/%E8%A7%A3%E5%86%B3VMware%E4%B8%8BUbuntu22.04%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>尝试了很多方法，网上大多是重启网络适配器等，后来发现虚拟机里系统桌面右上角并没有有线网络图标<br>尝试删除网络缓存文件后，重启网络后 问题解决</p></blockquote><p>在终端中输入以下命令 删除NetworkManager缓存文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo service NetworkManager stop </span><br><span class="line"></span><br><span class="line">sudo rm /var/lib/NetworkManager/NetworkManager.state </span><br><span class="line"></span><br><span class="line">sudo service NetworkManager start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开Ubuntu内置的火狐浏览器 发现可以上网啦</p>]]></content>
      
      
      
        <tags>
            
            <tag> obstacle </tag>
            
            <tag> Ubuntu22.04 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office 激活</title>
      <link href="/2024/08/25/office%20%E6%BF%80%E6%B4%BB/"/>
      <url>/2024/08/25/office%20%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="E5-教程"><a href="#E5-教程" class="headerlink" title="E5 教程"></a>E5 教程</h1><blockquote><p>参考链接<br><a href="https://logi.im/script/permanently-keeping-an-office-e5-account.html">https://logi.im/script/permanently-keeping-an-office-e5-account.html</a></p></blockquote><blockquote><p><a href="https://entra.microsoft.com/#view/Microsoft_AAD_IAM/TenantOverview.ReactView">https://entra.microsoft.com/#view/Microsoft_AAD_IAM/TenantOverview.ReactView</a></p></blockquote><blockquote><p>开发者申请页面<br><a href="https://developer.microsoft.com/en-us/microsoft-365/profile">https://developer.microsoft.com/en-us/microsoft-365/profile</a></p></blockquote><h1 id="Office-Tool-Plus"><a href="#Office-Tool-Plus" class="headerlink" title="Office Tool Plus"></a>Office Tool Plus</h1><blockquote><p><a href="https://www.coolhub.top/archives/14">https://www.coolhub.top/archives/14</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Office </tag>
            
            <tag> E5 </tag>
            
            <tag> Office Tool Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks卸载重装流程</title>
      <link href="/2024/08/21/Solidworks%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/08/21/Solidworks%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="删除-SOLIDWORKS"><a href="#删除-SOLIDWORKS" class="headerlink" title="删除 SOLIDWORKS"></a>删除 SOLIDWORKS</h1><blockquote><p>首先完成设置内卸载Solidworks-&gt;弹出Solidworks自带删除程序-&gt;修改高级选项，全部删除</p></blockquote><h2 id="删除SolidWorks-Flexnet-Server"><a href="#删除SolidWorks-Flexnet-Server" class="headerlink" title="删除SolidWorks_Flexnet_Server"></a>删除SolidWorks_Flexnet_Server</h2><h3 id="删除-server-remove"><a href="#删除-server-remove" class="headerlink" title="删除 server_remove"></a>删除 server_remove</h3><p>找到 C盘内 SolidWorks_Flexnet_Server 文件夹，进入找到server_remove 右键管理员身份运行，显示如下说明成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SolidWorks Flexnet Server 服务正在停止.</span><br><span class="line">SolidWorks Flexnet Server 服务已成功停止。</span><br><span class="line"></span><br><span class="line">[SC] DeleteService 成功</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>若未安装此服务返回服务名无效，服务未安装</p><h3 id="删除server-install"><a href="#删除server-install" class="headerlink" title="删除server_install"></a>删除server_install</h3><p>继续右键管理员身份运行server_install.bat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FLEXnet License Manager is successfully installed</span><br><span class="line">as one of your Windows Services.  Some handy tips:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        * The FLEXnet License Manager will be automatically started</span><br><span class="line">          every time your system is booted.</span><br><span class="line"></span><br><span class="line">        * The FLEXnet service log file is lmgrd.log in your NT system</span><br><span class="line">          directory.</span><br><span class="line"></span><br><span class="line">        * To remove FLEXnet License Manager, type &#x27;installs -r&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">********************************************************</span><br><span class="line"> The permissions of one of the files that you just installed seems</span><br><span class="line"> to have the correct settings.</span><br><span class="line">SolidWorks Flexnet Server 服务正在启动 .</span><br><span class="line">SolidWorks Flexnet Server 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">请按任意键继续. . .</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除依赖sql软件包"><a href="#删除依赖sql软件包" class="headerlink" title="删除依赖sql软件包"></a>删除依赖sql软件包</h2><p>进入设置-&gt;应用卸载，找到以下软件包并卸载</p><blockquote><p>micrsoft sql server ··· </p></blockquote><p>这里后续和sql有关的我都给删除了</p><h2 id="停止Imgrd-exe-进程"><a href="#停止Imgrd-exe-进程" class="headerlink" title="停止Imgrd.exe 进程"></a>停止Imgrd.exe 进程</h2><blockquote><p>Ctrl+Shift+Esc 打开任务管理器<br>结束Imgrd.exe进程</p></blockquote><h2 id="删除残留注册表"><a href="#删除残留注册表" class="headerlink" title="删除残留注册表"></a>删除残留注册表</h2><blockquote><p>win+R<br>regedit<br>找到HKEY_LOCAL_MACHINE\SOFTWARE\ 和 HKEY_CURRENT_USER\Software\ 目录下SOLIDWORDKS有关文件 删除</p></blockquote><h2 id="删除solidworks残余的文件"><a href="#删除solidworks残余的文件" class="headerlink" title="删除solidworks残余的文件"></a>删除solidworks残余的文件</h2><p>删除以下文件</p><blockquote><p>C:\Documents and Settings\【登录用户名】\Application Data\【所有相关SolidWorks的文件夹 】<br>C:\Documents and Settings\【登录用户名】\Local Settings\Application Data\【所有相关SolidWorks的文件夹 】<br>C:\SolidWorks Data （这是toolbox文件，如果有定制内容，请不要删除，安装时根据选项使用现有数据）<br>C:\Documents and Settings\Administrator\Local Settings\Temp 该目录清空<br>X:\Program Files\SolidWorks Corp ，X就是安装SolidWorks所在的盘符</p></blockquote><p>卸载完成之后建议在C盘搜索一下是否还有与SolidWorks相关的文件（Ctrl+f搜索），如有，并进行删除。</p><h2 id="下载Windows-Installer-Clean-Up"><a href="#下载Windows-Installer-Clean-Up" class="headerlink" title="下载Windows Installer Clean Up"></a>下载Windows Installer Clean Up</h2><p>选择solidworks相关，点击remove</p><h1 id="下载SOLIDWORKS"><a href="#下载SOLIDWORKS" class="headerlink" title="下载SOLIDWORKS"></a>下载SOLIDWORKS</h1><p>右键解压缩软件管家-&gt;SOLIDWORKS2024（U盘） ，打开<br>右键点击 <strong>Crack</strong> 选择解压到<strong>Crack</strong></p><blockquote><p>解压Crack前需关闭所有杀毒软件，否则可能被杀毒软件误杀清除程序导致无法正常运行</p></blockquote><p>双击打开Crack 运行 sw2024_network_··· -&gt; 是 -&gt; 确定</p><p>鼠标右键点击 SolidWorks_Flexnet_Server 选择复制 进入C盘粘贴(C盘主目录即可) -&gt; 双击打开 -&gt; 鼠标右击管理员身份运行server_install</p><p>显示如下说明成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FLEXnet License Manager is successfully installed</span><br><span class="line">as one of your Windows Services.  Some handy tips:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        * The FLEXnet License Manager will be automatically started</span><br><span class="line">          every time your system is booted.</span><br><span class="line"></span><br><span class="line">        * The FLEXnet service log file is lmgrd.log in your NT system</span><br><span class="line">          directory.</span><br><span class="line"></span><br><span class="line">        * To remove FLEXnet License Manager, type &#x27;installs -r&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">********************************************************</span><br><span class="line"> The permissions of one of the files that you just installed seems</span><br><span class="line"> to have the correct settings.</span><br><span class="line">SolidWorks Flexnet Server 服务正在启动 .</span><br><span class="line">SolidWorks Flexnet Server 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">请按任意键继续. . .</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>回到安装包文件夹 双击打开Setup文件夹 管理员身份运行setup鼠标右键<strong>安装管理程序</strong> 选择 <strong>禁用因特尔网访问</strong><br><img src="/./images/Solidworks%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85%E6%B5%81%E7%A8%8B/1.png" alt=" "><br>点击下一步 勾选自己需要的产品 更改安装位置</p></blockquote><p>返回摘要<br>点击Toolbox后方的更改<br>修改安装路径到A盘<br>点击Electrical（若没有购买此产品就不用）修改路径到A<br>返回摘要 勾选接受条款 点击现在安装 -&gt; 确定 -&gt; 确定</p><p>等待安装···<br>安装成功 -&gt; 取消候选<strong>为我显示···新增功能</strong> -&gt; 选择 <strong>不，谢谢</strong> -&gt; 点击完成 -&gt; 以后重新启动</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>回到下载的Solidworks 2024 （64bit）安装包文件夹 -&gt; 双击打开Crack下的SolidSQUADLoaderEnabler -&gt; 点击 是 -&gt; 确定</p><p>鼠标右键复制Crack下的Program Files文件夹 -&gt; 打开之前设置的solidworks2024的安装路径 粘贴替换之前的文件(正常应该替换4个文件)</p><p>双击桌面 SOLIDWORKS 2024 图标 即可启动成功 进入后点击接受条款 开启建模之旅</p><blockquote><p>你可能会遇到一些错误<br>自定义安装路径下没有Program Files文件 无法替换<br>进入Crack内的Files文件 把里面内容一键复制，到你的Solidworks安装目录内粘贴即可，成功后如下图所示(底部为桌面移植的快捷方式)</p></blockquote><p><img src="/./images/Solidworks%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85%E6%B5%81%E7%A8%8B/2.png" alt=" "></p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://www.123pan.com/s/PyfZjv-ERwZh.html">SolidWorks下载链接（无限速）</a></p><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><p>向下兼容低版本失败显示 <em>保存到先前版本需要SLIDWORKS 订阅服务</em><br><strong>解决办法</strong><br>用记事本打开破解时候的 “C:\SolidWorks_Flexnet_Server\sw_d_SSQ.lic” 文件，如下</p><p><img src="/./images/Solidworks%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85%E6%B5%81%E7%A8%8B3.png" alt=" "></p><p>将 sd&#x3D;10-16-2019 替换为 10-16-2030<br>ctrl+s保存<br>重启电脑即可生效</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Solidworks </tag>
            
            <tag> 机械 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dso安装及实验数据分析(内含miniconda3环境配置)</title>
      <link href="/2024/08/20/dso%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%9E%E9%AA%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90(%E5%86%85%E5%90%ABminiconda3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE)/"/>
      <url>/2024/08/20/dso%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%9E%E9%AA%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90(%E5%86%85%E5%90%ABminiconda3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE)/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Environment </tag>
            
            <tag> miniconda3 </tag>
            
            <tag> dso </tag>
            
            <tag> tec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu终端下载速度慢_换源</title>
      <link href="/2024/08/18/Ubuntu%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2_%E6%8D%A2%E6%BA%90/"/>
      <url>/2024/08/18/Ubuntu%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2_%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对Ubuntu终端下载速度慢的问题主要两种解决方案</p><ul><li>把&#x2F;etc&#x2F;apt&#x2F;sources.list文件里的源更换一下，改成阿里云或者其它的镜像的文件</li><li>更换 software&amp;updates 里的select best server改成其他服务器</li></ul><p>本文主要针对第一种给出教学</p></blockquote><h2 id="备份源列表sources-list"><a href="#备份源列表sources-list" class="headerlink" title="备份源列表sources.list"></a>备份源列表sources.list</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources list /etc/apt/sources.list_backup</span><br></pre></td></tr></table></figure><h2 id="修改sources-list"><a href="#修改sources-list" class="headerlink" title="修改sources.list"></a>修改sources.list</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h2><p>在文件最前面添加镜像源(这里博主替换为阿里源，后面还有其他供选择)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">阿里源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>别忘了Ctrl+S保存哦</p></blockquote><h2 id="刷新列表"><a href="#刷新列表" class="headerlink" title="刷新列表"></a>刷新列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt updata</span><br><span class="line"></span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line">sudo apt install build-essential</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大功告成</p><h2 id="其他源"><a href="#其他源" class="headerlink" title="其他源"></a>其他源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">163源</span></span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清华源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="锦囊"><a href="#锦囊" class="headerlink" title="锦囊"></a>锦囊</h2><p>如果下载速度还是很慢(博主不幸遇到，还未知道原因)可以采用如下下载方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//以下载opencv为例子</span><br><span class="line">pip install  -i https://pypi.tuna.tsinghua.edu.cn/simple   opencv=3.5</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> obstacle </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉处理之ROS与OpenCV的修改转换</title>
      <link href="/2024/08/01/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/"/>
      <url>/2024/08/01/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文章为202302暑期RM视觉培训总结<br>具体实现目标任务如下<br>• 安装usb_cam或其他USB摄像头驱动包驱动笔记本电脑自带的摄像头<br>• 新建功能包，编写节点实时订阅摄像头发布的图像话题消息并将ROS图像消息转换为OpenCV图像<br>• 在图像右上角绘制矩形，再将OpenCV图像转换回ROS图像消息重新发布到一个新的话题<br>• 用rviz或者rqt_image_view显示图像消息</p></blockquote><h2 id="打开摄像头"><a href="#打开摄像头" class="headerlink" title="打开摄像头"></a>打开摄像头</h2><h3 id="安装-usb-cam摄像头驱动"><a href="#安装-usb-cam摄像头驱动" class="headerlink" title="安装 usb_cam摄像头驱动"></a>安装 usb_cam摄像头驱动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-humble-usb_cam # 笔者这里用的是humble版本，不同版本自行替换</span><br></pre></td></tr></table></figure><p>也可以通过cheese</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cheese #下载</span><br><span class="line">cheese  # 运行茄子</span><br></pre></td></tr></table></figure><p>进入后适当修改分辨率会更流畅</p><blockquote><p><strong>注意记得先更新</strong><br>sudo apt update</p></blockquote><h3 id="运行camera-launch-py"><a href="#运行camera-launch-py" class="headerlink" title="运行camera.launch.py"></a>运行camera.launch.py</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch usb_cam camera.launch.py</span><br></pre></td></tr></table></figure><blockquote><p>错误1<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/1.png" alt=" "><br>解决方法<br>pip install pydantic&#x3D;&#x3D;1.10.14<br>这里笔者下载时版本不够，没有model_validator,报错如下</p><ul><li>ImportError: cannot import name ‘model_validator’ from ‘pydantic’ (&#x2F;home&#x2F;whaltze&#x2F;.local&#x2F;lib&#x2F;python3.10&#x2F;site-packages&#x2F;pydantic&#x2F;<em>_init</em>_.cpython-310-x86_64-linux-gnu.so)<br>后续需要进行更新  pip install –upgrade pydantic</li></ul></blockquote><p>再次运行即可<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/2.png" alt=" "></p><h2 id="运行摄像头"><a href="#运行摄像头" class="headerlink" title="运行摄像头"></a>运行摄像头</h2><h3 id="使用rqt-image-view"><a href="#使用rqt-image-view" class="headerlink" title="使用rqt_image_view"></a>使用rqt_image_view</h3><p>另外开启一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-humble-rqt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rqt <span class="comment"># 运行rqt</span></span></span><br><span class="line">ros2 run rqt_image_view rqt_image_view</span><br></pre></td></tr></table></figure><p>选择&#x2F;camera1&#x2F;image_raw 即可看到图像消息</p><h3 id="使用rviz"><a href="#使用rviz" class="headerlink" title="使用rviz"></a>使用rviz</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-humble-rviz2</span><br><span class="line">ros2 run rviz2 rviz2</span><br></pre></td></tr></table></figure><p>选择左下角Add，如图即可看到视频图像<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/3.png" alt=" "></p><h2 id="编写节点"><a href="#编写节点" class="headerlink" title="编写节点"></a>编写节点</h2><h3 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h3><p>进入工作空间（这里笔者的是&#x2F;home&#x2F;whaltze&#x2F;rm&#x2F;202302&#x2F;ros2）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/rm/202302/ros2/src #进入src文件夹</span><br><span class="line">ros2 pkg create --build-type ament_python camera #创建功能包</span><br><span class="line">cd camera</span><br></pre></td></tr></table></figure><h3 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h3><p>在camera中创建setup.py </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages, setup</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&#x27;camera&#x27;</span></span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=package_name,</span><br><span class="line">    version=<span class="string">&#x27;0.0.0&#x27;</span>,</span><br><span class="line">    packages=find_packages(exclude=[<span class="string">&#x27;test&#x27;</span>]),</span><br><span class="line">    data_files=[</span><br><span class="line">        (<span class="string">&#x27;share/ament_index/resource_index/packages&#x27;</span>,</span><br><span class="line">            [<span class="string">&#x27;resource/&#x27;</span> + package_name]),</span><br><span class="line">        (<span class="string">&#x27;share/&#x27;</span> + package_name, [<span class="string">&#x27;package.xml&#x27;</span>]),</span><br><span class="line">    ],</span><br><span class="line">    install_requires=[<span class="string">&#x27;setuptools&#x27;</span>],</span><br><span class="line">    zip_safe=<span class="literal">True</span>,</span><br><span class="line">    maintainer=<span class="string">&#x27;whaltze&#x27;</span>,</span><br><span class="line">    maintainer_email=<span class="string">&#x27;whaltze@todo.todo&#x27;</span>,</span><br><span class="line">    description=<span class="string">&#x27;TODO: Package description&#x27;</span>,</span><br><span class="line">    license=<span class="string">&#x27;TODO: License declaration&#x27;</span>,</span><br><span class="line">    tests_require=[<span class="string">&#x27;pytest&#x27;</span>],</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">&#x27;console_scripts&#x27;</span>: [<span class="string">&#x27;camera_node = camera.camera_node:main&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>笔者在创建功能包的时候已经自动创建了setup程序，没有的自行添加<br>中间的文件名，用户名记得修改</p><h3 id="camera-node-py"><a href="#camera-node-py" class="headerlink" title="camera_node.py"></a>camera_node.py</h3><blockquote><p>cd &#x2F;src&#x2F;camera&#x2F;camera&#x2F;</p></blockquote><p>创建camera_node.py程序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> cv_bridge <span class="keyword">import</span> CvBridge</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CameraNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;camera_node&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.subscription = <span class="variable language_">self</span>.create_subscription(</span><br><span class="line">            Image,</span><br><span class="line">            <span class="string">&#x27;/camera1/image_raw&#x27;</span>,  <span class="comment"># 图像话题，根据实际设置情况更改</span></span><br><span class="line">            <span class="variable language_">self</span>.listener_callback,</span><br><span class="line">            <span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.publisher1 = <span class="variable language_">self</span>.create_publisher(Image, <span class="string">&#x27;rec_image&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.bridge = CvBridge()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">listener_callback</span>(<span class="params">self, msg</span>):</span><br><span class="line">        cv_image = <span class="variable language_">self</span>.bridge.imgmsg_to_cv2(msg, <span class="string">&quot;bgr8&quot;</span>)   <span class="comment">#转换为OpenCV图像</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在图像右上角绘制矩形</span></span><br><span class="line">        height, width, _ = cv_image.shape</span><br><span class="line">        cv2.rectangle(cv_image, (width - <span class="number">100</span>, <span class="number">0</span>), (width, <span class="number">100</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将 OpenCV 图像转换回 ROS 图像消息</span></span><br><span class="line">        ros_image = <span class="variable language_">self</span>.bridge.cv2_to_imgmsg(cv_image, <span class="string">&quot;bgr8&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 发布处理后的图像</span></span><br><span class="line">        <span class="variable language_">self</span>.publisher1.publish(ros_image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)</span><br><span class="line">    camera_node = CameraNode()</span><br><span class="line">    rclpy.spin(camera_node)</span><br><span class="line">    camera_node.destroy_node()</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>笔者这里直接将最后结果图像右上角画一个白色矩形，转换为ROS图像消息输出</p><h2 id="成果检验"><a href="#成果检验" class="headerlink" title="成果检验"></a>成果检验</h2><p>回到ros2工作目录，打开终端，输入</p><blockquote><p>ros2 launch usb_cam camera.launch.py<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/4.png" alt=" "></p></blockquote><p>再打开一个终端输入</p><blockquote><p>source install&#x2F;setup.bash<br>ros2 run camera camera_node<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/5.png" alt=" "></p></blockquote><p>再打开一个终端，输入</p><blockquote><p>ros2 run rqt_image_view rqt_image_view<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/6.png" alt=" "></p></blockquote><p>最终效果如图（笔者有点害羞，就用手遮住摄像头啦）<br><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/7.png" alt=" "></p><h2 id="进阶讲解-camera-node"><a href="#进阶讲解-camera-node" class="headerlink" title="进阶讲解 - camera_node"></a>进阶讲解 - camera_node</h2><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br></pre></td></tr></table></figure><p>rclpy是针对Python语言的ROS2客户端库，提供了初始化、创建节点、发布和订阅话题等功能<br>这里贴两个链接 &nbsp; &nbsp; <a href="https://docs.ros2.org/latest/api/rclpy/index.html">RCLPY文档</a> &nbsp;  &nbsp; <a href="https://github.com/ros2/rclpy">RCLPY源码</a></p><p>Node 类是 rclpy 中定义的基本类，用于创建 ROS 2 节点。一个节点是 ROS 2 系统中的基本通信实体，可以发布和订阅话题、提供和调用服务等</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><p>Image 消息类型定义在 sensor_msgs 包中，用于传输图像数据。它包含图像的元数据（如高度、宽度、编码等）和实际的图像数据。<br>在 ROS 2 中，图像数据通常通过 Image 消息在节点之间传输。</p><p><a href="https://qiangsun89.github.io/2023/04/25/%E4%BB%8B%E7%BB%8DROS%E4%B8%ADsensor-msgs/">介绍ROS中的sensor_msgs</a> &nbsp; &nbsp;  <a href="https://blog.csdn.net/I_canjnu/article/details/124855613">sensor_msgs::Image消息及其参数</a></p><p><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/8.png" alt=" "></p></blockquote><p>注意 <em><strong>sensor_msgs&#x2F;Image</strong></em> 是原始的未经压缩的图像消息，通常用于传输原始图像数据，例如 RGB、灰度或深度图像。而 <em><strong>sensor_msgs&#x2F;CompressedImage</strong></em> 是经过压缩的图像消息，数据量较少，压缩格式通常是 JPEG 或 PNG</p><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cv_bridge <span class="keyword">import</span> CvBridge</span><br></pre></td></tr></table></figure><p>CvBridge 是用于在 ROS 图像消息 (sensor_msgs&#x2F;Image) 和 OpenCV 图像 (numpy 数组) 之间转换的工具包，OpenCV 提供了丰富的图像处理功能，而 ROS 使用 Image 消息进行图像传输。这样的转化便于图像处理，笔者后续也基于此构建矩形</p><p><img src="/./images/%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86%E4%B9%8BROS%E4%B8%8EOpenCV%E7%9A%84%E4%BF%AE%E6%94%B9%E8%BD%AC%E6%8D%A2/9.png" alt=" "></p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure><p>cv2 非常著名，是 OpenCV 的 Python 接口。OpenCV 作为一个开源计算机视觉库，提供了丰富的图像处理和计算机视觉功能。在这个节点中，我们使用 OpenCV 来处理和修改图像，例如在图像上绘制矩形。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CameraNode</span>(<span class="title class_ inherited__">Node</span>):</span><br></pre></td></tr></table></figure><p>定义一个名为 CameraNode 的类，继承自 Node，这是一个自定义的 ROS 2 节点类。Node 是从 rclpy.node 导入的类，它提供了 ROS 2 节点的基础功能。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br></pre></td></tr></table></figure><p>定义构造函数，初始化节点,<em>_init</em>_ 方法是类的构造函数。当创建一个类的实例（对象）时，Python 会自动调用这个方法来初始化对象的属性。<br>即 定义类的构造函数，<em>_init</em>_ 方法会在创建 CameraNode 实例时自动调用，用于初始化对象的属性。<br><a href="https://blog.csdn.net/pengneng123/article/details/137555573">__init__函数的用法详解！</a> &nbsp;  <strong><a href="https://gitcode.csdn.net/65e6e3c51a836825ed786deb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjQ2ODkyOSwiZXhwIjoxNzIzNjkxNzA1LCJpYXQiOjE3MjMwODY5MDUsInVzZXJuYW1lIjoiV2hhbHR6ZSJ9.MPDTDnoa4X65mIZkrlOYZDICEPI7liFNoYmGol6ViOs"><em>_init</em>_ + super详解</a></strong></p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>().__init__(<span class="string">&#x27;camera_node&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用父类（Node）的构造函数，并传递节点名称 ‘camera_node’。这将创建一个名为 ‘camera_node’ 的 ROS 2 节点。<br>其中，super() 函数用于调用父类（基类）的方法。它允许子类调用从父类继承的方法，而不是覆盖它们。在这个例子中，我们用它来调用父类的构造函数。即super() 函数返回父类（Node）的对象，然后使用 . 访问父类的方法（<em>_init</em>_）</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.subscription = <span class="variable language_">self</span>.create_subscription(</span><br><span class="line">    Image,</span><br><span class="line">    <span class="string">&#x27;/camera1/image_raw&#x27;</span>,  <span class="comment"># 图像话题，根据实际设置情况更改</span></span><br><span class="line">    <span class="variable language_">self</span>.listener_callback,</span><br><span class="line">    <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>创建一个订阅者，用于订阅 &#x2F;usb_cam&#x2F;image_raw 话题。订阅的消息类型是 Image。<br>当接收到消息时，调用 listener_callback 函数进行处理。</p></blockquote><p>self.subscription 表示访问当前对象（self）的 subscription 属性。<br>self.create_subscription 表示访问当前对象（self）的 create_subscription 方法。</p><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.publisher1 = <span class="variable language_">self</span>.create_publisher(Image, <span class="string">&#x27;rec_image&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>创建一个发布者，用于发布处理后的图像。发布的话题名称是 ‘rec_image’，消息类型是 Image。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.bridge = CvBridge()</span><br></pre></td></tr></table></figure><p>创建一个 CvBridge 实例，用于在 ROS 图像消息和 OpenCV 图像之间进行转换<br>self.bridge 是类的属性，用于存储 CvBridge 对象。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listener_callback</span>(<span class="params">self, msg</span>):</span><br></pre></td></tr></table></figure><p>定义回调函数，当接收到图像消息时调用。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv_image = <span class="variable language_">self</span>.bridge.imgmsg_to_cv2(msg, <span class="string">&quot;bgr8&quot;</span>)   <span class="comment">#转换为OpenCV图像</span></span><br></pre></td></tr></table></figure><p>使用 CvBridge 将 ROS 图像消息转换为 OpenCV 图像（numpy 数组）。图像编码为 “bgr8”，表示 8-bit BGR 图像。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">height, width, _ = cv_image.shape</span><br></pre></td></tr></table></figure><p>获取图像的高度和宽度</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.rectangle(cv_image, (width - <span class="number">100</span>, <span class="number">0</span>), (width, <span class="number">100</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>在图像右上角绘制一个白色矩形，宽度为 100 像素，高度为 100 像素，线条宽度为 2 像素。<br>注意图像原点在左上角</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros_image = <span class="variable language_">self</span>.bridge.cv2_to_imgmsg(cv_image, <span class="string">&quot;bgr8&quot;</span>)</span><br></pre></td></tr></table></figure><p>将处理后的 OpenCV 图像转换回 ROS 图像消息。</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.publisher1.publish(ros_image)</span><br></pre></td></tr></table></figure><p>发布处理后的图像消息。</p></blockquote><p>主函数部分<br> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):          <span class="comment">#定义主函数</span></span><br><span class="line">    rclpy.init(args=args)      <span class="comment">#初始化 ROS 2 客户端库。</span></span><br><span class="line">    camera_node = CameraNode() <span class="comment">#创建 CameraNode 实例。</span></span><br><span class="line">    rclpy.spin(camera_node)    <span class="comment">#进入 ROS 2 节点的事件循环，等待并处理事件（例如接收消息）。</span></span><br><span class="line">    camera_node.destroy_node() <span class="comment">#销毁节点。</span></span><br><span class="line">    rclpy.shutdown()           <span class="comment">#关闭 ROS 2 客户端库。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:     <span class="comment">#如果脚本作为主程序运行，调用 main() 函数。</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><blockquote><p>参考文章<br><a href="https://blog.csdn.net/hltt3838/article/details/107646737">ROS系列：八、图像消息和OpenCV图像之间进行转换-cv_bridge</a><br><a href="https://blog.csdn.net/sansanjinli/article/details/102998069">在ROS中 opencv 发布和接收图像消息 学习总结</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> ubuntu22.04 </tag>
            
            <tag> ROS </tag>
            
            <tag> humble </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于yolov5的数字识别</title>
      <link href="/2024/07/16/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2024/07/16/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em><b><font  face="微软雅黑">开始前，请确保已经正确配置 <em><strong><a href="https://whaltze.github.io/2024/07/15/Deploy%20Environment%20to%20Anaconda3/">Anaconda3</a></strong></em> </font></b></em></p></blockquote><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create --name yolov5_env python=<span class="number">3.9</span> <span class="comment">//建立新环境yolov5 搭载python3.9</span></span><br><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch <span class="comment">//安装pytorch2.3.1</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/ultralytics/yolov5  # clone yolov5</span></span><br><span class="line">cd yolov5 <span class="comment">//转到yolov5目录下</span></span><br><span class="line">pip install -r requirements.<span class="property">txt</span>  # install 安装各种包<span class="comment">//安装yolov5 v6.0</span></span><br></pre></td></tr></table></figure><p>这里博主只用了cpuonly来跑，要用GPU自行搜索CUDA下载配置，后续会更新用阿里云服务器进行训练</p><blockquote><p>配置完环境后如下图所示<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/1.png" alt="env_done" title="env_done"></p></blockquote><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><h2 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h2><p>  在下载好的 yolov5 文件夹中创建一个新的文件夹 VOCData 进入后再新建两个文件夹 Annotations 和 images</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在yolov5目录下打开终端</span></span><br><span class="line">mkdir <span class="title class_">VOCData</span></span><br><span class="line">cd <span class="title class_">VOCData</span></span><br><span class="line">mkdir <span class="title class_">Annotations</span> <span class="comment">//用于存放标注后的内容（.xml）</span></span><br><span class="line">mkdir images <span class="comment">//用于存放要标注的图片（.jpg）</span></span><br></pre></td></tr></table></figure><h2 id="Labelimg-标注"><a href="#Labelimg-标注" class="headerlink" title="Labelimg 标注"></a>Labelimg 标注</h2><h3 id="Preparing"><a href="#Preparing" class="headerlink" title="Preparing"></a>Preparing</h3><blockquote><p>下载 <em><strong><a href="https://github.com/tzutalin/labelImg">Labelimg</a></strong></em><br>下载后存放到yolov5同级目录下面</p></blockquote><p>在Labelimg文件夹中打开终端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate yolov5_env <span class="comment">//进入创建的新环境</span></span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda update -n base -c defaults conda <span class="comment">//更新conda</span></span><br><span class="line">conda install pyqt=<span class="number">5</span> <span class="comment">//安装pyqt</span></span><br><span class="line">conda install -c anaconda lxml</span><br><span class="line">pyrcc5 -o libs/resources.<span class="property">py</span> resources.<span class="property">qrc</span> <span class="comment">//使用pyrcc5工具，将resources.qrc资源文件转换为一个名为resources.py的Python模块，并将其放置在libs目录下。在开发Qt应用程序时，这个生成的Python模块可以被主程序导入，从而使用资源文件中的资源。</span></span><br></pre></td></tr></table></figure><blockquote><p>如果成功显示如下<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/2.png" alt=" "></p></blockquote><h3 id="Labelimg-的使用"><a href="#Labelimg-的使用" class="headerlink" title="Labelimg 的使用"></a>Labelimg 的使用</h3><p>为避免后续添加标签较为麻烦可提前添加标准类别，否则每次都需添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd data</span><br><span class="line">gedit predefined_classes.<span class="property">txt</span> <span class="comment">//打开文件</span></span><br></pre></td></tr></table></figure><blockquote><p>如图，因博主循迹识别需要，这里我只添加了one~eight 八个类<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/3.png" alt=" "></p></blockquote><p>运行Labelimg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python labelimg.<span class="property">py</span> <span class="comment">//这里博主是python环境，非python3</span></span><br></pre></td></tr></table></figure><blockquote><p>注意这里的运行环境记得切换，我ubuntu22.04 环境是python3 3.10，基于yolov5的数字识别_env当时设置的是python 3.9<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/4.png" alt=" "></p></blockquote><p>成功打开后界面如下<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/5.png" alt=" "></p><p>labelImg的操作比较简单，首先，左上角打开之前创建的images文件，选择第一张图片（此处默认你已经把需要训练的数据集放入&#x2F;VOCData&#x2F;images中），然后左边选创建区块，用矩形框圈中你要识别的对象后，选择右侧标签，最后点左侧保存，保存到Annotations中（保存为xml文件格式）（可以自动保存文件夹，选择打开文件夹，下一张下一张的框出就行，而且一张图可以进行多个矩形框的框选）</p><blockquote><p>这里贴一个链接 <em><strong><a href="https://blog.csdn.net/qq_42257666/article/details/122813608">如何使用LabelImg标注数据集</a></strong></em></p></blockquote><blockquote><p><b><font  color=red >标完一张图一定要记得修改右侧的类的标签，不要全部标完才发现标签都是同一个，血的教训，大家引以为戒!!!</font></b></p></blockquote><h2 id="所需程序"><a href="#所需程序" class="headerlink" title="所需程序"></a>所需程序</h2><h3 id="split-train-val-py"><a href="#split-train-val-py" class="headerlink" title="split_train_val.py"></a>split_train_val.py</h3><p>在 VOCData 目录下创建程序 split_train_val.py 并运行程序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"> </span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"><span class="comment">#xml文件的地址，根据自己的数据进行修改 xml一般存放在Annotations下</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--xml_path&#x27;</span>, default=<span class="string">&#x27;Annotations&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;input xml label path&#x27;</span>)</span><br><span class="line"><span class="comment">#数据集的划分，地址选择自己数据下的ImageSets/Main</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--txt_path&#x27;</span>, default=<span class="string">&#x27;ImageSets/Main&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;output txt label path&#x27;</span>)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"> </span><br><span class="line">trainval_percent = <span class="number">1.0</span>  <span class="comment"># 训练集和验证集所占比例。 这里没有划分测试集</span></span><br><span class="line">train_percent = <span class="number">0.9</span>     <span class="comment"># 训练集所占比例，可自己进行调整</span></span><br><span class="line">xmlfilepath = opt.xml_path</span><br><span class="line">txtsavepath = opt.txt_path</span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(txtsavepath):</span><br><span class="line">    os.makedirs(txtsavepath)</span><br><span class="line"> </span><br><span class="line">num = <span class="built_in">len</span>(total_xml)</span><br><span class="line">list_index = <span class="built_in">range</span>(num)</span><br><span class="line">tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">trainval = random.sample(list_index, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"> </span><br><span class="line">file_trainval = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/trainval.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_test = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_train = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/train.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_val = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/val.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_index:</span><br><span class="line">    name = total_xml[i][:-<span class="number">4</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        file_trainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            file_train.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_val.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_test.write(name)</span><br><span class="line"> </span><br><span class="line">file_trainval.close()</span><br><span class="line">file_train.close()</span><br><span class="line">file_val.close()</span><br><span class="line">file_test.close()</span><br></pre></td></tr></table></figure><p>运行完后会在VOCData\ImagesSets\Main下生成 测试集、训练集、训练验证集和验证集<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/6.png" alt=" "></p><blockquote><p>此时你可能会碰到一些错误<br>错误1<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/7.png" alt=" "></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决方法</span></span><br><span class="line">cd <span class="title class_">VOCData</span> <span class="comment">//找不到Annotations是没有在VOCData中打开终端并运行</span></span><br></pre></td></tr></table></figure><p>此时在yolov5_env环境下且位于VOCData目录再运行split_train_val.py即可成功</p><h3 id="转化xml格式为yolo-txt格式"><a href="#转化xml格式为yolo-txt格式" class="headerlink" title="转化xml格式为yolo_txt格式"></a>转化xml格式为yolo_txt格式</h3><p>在VOCData目录下创建text_to_yolo.py并运行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开头classes改成自己的类，博主是数字</span></span><br><span class="line"><span class="comment">#后面路径也要改成自己的</span></span><br><span class="line"><span class="comment">#倒三行后缀.jpg/.png也要注意一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br><span class="line"> </span><br><span class="line">sets = [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]</span><br><span class="line">classes = [<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>,<span class="string">&quot;six&quot;</span>,<span class="string">&quot;seven&quot;</span>,<span class="string">&quot;eight&quot;</span>]  <span class="comment">#改成自己的类别</span></span><br><span class="line">abs_path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(abs_path)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span> / (size[<span class="number">0</span>])</span><br><span class="line">    dh = <span class="number">1.</span> / (size[<span class="number">1</span>])</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> x, y, w, h</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">image_id</span>):</span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/Annotations/%s.xml&#x27;</span> % (image_id), encoding=<span class="string">&#x27;UTF-8&#x27;</span>)     <span class="comment">#改成自己的目录</span></span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/labels/%s.txt&#x27;</span> % (image_id), <span class="string">&#x27;w&#x27;</span>)    <span class="comment">#改成自己的目录</span></span><br><span class="line">    tree = ET.parse(in_file) </span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        <span class="comment"># difficult = obj.find(&#x27;Difficult&#x27;).text</span></span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        b1, b2, b3, b4 = b</span><br><span class="line">        <span class="comment"># 标注越界修正</span></span><br><span class="line">        <span class="keyword">if</span> b2 &gt; w:</span><br><span class="line">            b2 = w</span><br><span class="line">        <span class="keyword">if</span> b4 &gt; h:</span><br><span class="line">            b4 = h</span><br><span class="line">        b = (b1, b2, b3, b4)</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">wd = getcwd()</span><br><span class="line"><span class="keyword">for</span> image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/labels/&#x27;</span>):    <span class="comment">#改成自己的目录</span></span><br><span class="line">        os.makedirs(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/labels/&#x27;</span>)     <span class="comment">#改成自己的目录</span></span><br><span class="line">    image_ids = <span class="built_in">open</span>(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/ImageSets/Main/%s.txt&#x27;</span> % (image_set)).read().strip().split()  <span class="comment">#改成自己的目录</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/dataSet_path/&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/dataSet_path/&#x27;</span>)   <span class="comment">#改成自己的目录</span></span><br><span class="line"> </span><br><span class="line">    list_file = <span class="built_in">open</span>(<span class="string">&#x27;dataSet_path/%s.txt&#x27;</span> % (image_set), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">&#x27;/home/whaltze/yolov5/VOCData/images/%s.JPG\n&#x27;</span> % (image_id))     <span class="comment">#改成自己的目录</span></span><br><span class="line">        convert_annotation(image_id)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></table></figure><p>运行成功后会在VOCData目录下生成labels文件夹和dataSet_path文件夹</p><blockquote><p>其中 labels 中为不同图像的标注文件。每个图像对应一个txt文件，文件每一行为一个目标的信息，包括class, x_center, y_center, width, height，这种即为 yolo_txt格式</p></blockquote><blockquote><p>dataSet_path文件夹包含三个数据集的txt文件，train.txt等txt文件为划分后图像所在位置的绝对路径，如train.txt就含有所有训练集图像的绝对路径。</p></blockquote><h3 id="myvoc-yaml配置文件"><a href="#myvoc-yaml配置文件" class="headerlink" title="myvoc.yaml配置文件"></a>myvoc.yaml配置文件</h3><p>在yolov5目录下的<b><font color=red>data</font></b>文件夹下新建一个myvoc.yaml文件（可自定义命名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd data</span><br><span class="line">gedit myvoc.<span class="property">yaml</span></span><br></pre></td></tr></table></figure><blockquote><p>myvoc.yaml主要包含train.txt 和 val.txt 的路径 （可以为相对路径）<br>还有目标对象的类别数目和类别名称</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#yaml格式的文件要求非常严格</span></span><br><span class="line"> <span class="comment">#禁止使用//注释</span></span><br><span class="line"> <span class="comment">#缩进和空格不同都有可能引起报错</span></span><br><span class="line"> <span class="comment">#注意：冒号后面要加空格</span></span><br><span class="line"></span><br><span class="line"><span class="attr">train:</span> <span class="string">/home/whaltze/yolov5/VOCData/dataSet_path/train.txt</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">/home/whaltze/yolov5/VOCData/dataSet_path/val.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># number of classes</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class names</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>,<span class="string">&quot;six&quot;</span>,<span class="string">&quot;seven&quot;</span>,<span class="string">&quot;eight&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="生成anchors文件"><a href="#生成anchors文件" class="headerlink" title="生成anchors文件"></a>生成anchors文件</h3><p>在VOCData目录下创建两个程序 kmeans.py 和 clauculate_anchors.py</p><p>不要运行kmeans.py<br>运行clauculate_anchors.py即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kmeans.py 程序如下：这不需要运行，也不需要更改，报错则查看第十三行内容。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iou</span>(<span class="params">box, clusters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Calculates the Intersection over Union (IoU) between a box and k clusters.</span></span><br><span class="line"><span class="string">    :param box: tuple or array, shifted to the origin (i. e. width and height)</span></span><br><span class="line"><span class="string">    :param clusters: numpy array of shape (k, 2) where k is the number of clusters</span></span><br><span class="line"><span class="string">    :return: numpy array of shape (k, 0) where k is the number of clusters</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x = np.minimum(clusters[:, <span class="number">0</span>], box[<span class="number">0</span>])</span><br><span class="line">    y = np.minimum(clusters[:, <span class="number">1</span>], box[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> np.count_nonzero(x == <span class="number">0</span>) &gt; <span class="number">0</span> <span class="keyword">or</span> np.count_nonzero(y == <span class="number">0</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Box has no area&quot;</span>)  <span class="comment"># 如果报这个错，可以把这行改成pass即可</span></span><br><span class="line"> </span><br><span class="line">    intersection = x * y</span><br><span class="line">    box_area = box[<span class="number">0</span>] * box[<span class="number">1</span>]</span><br><span class="line">    cluster_area = clusters[:, <span class="number">0</span>] * clusters[:, <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    iou_ = intersection / (box_area + cluster_area - intersection)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> iou_</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avg_iou</span>(<span class="params">boxes, clusters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Calculates the average Intersection over Union (IoU) between a numpy array of boxes and k clusters.</span></span><br><span class="line"><span class="string">    :param boxes: numpy array of shape (r, 2), where r is the number of rows</span></span><br><span class="line"><span class="string">    :param clusters: numpy array of shape (k, 2) where k is the number of clusters</span></span><br><span class="line"><span class="string">    :return: average IoU as a single float</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> np.mean([np.<span class="built_in">max</span>(iou(boxes[i], clusters)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(boxes.shape[<span class="number">0</span>])])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate_boxes</span>(<span class="params">boxes</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Translates all the boxes to the origin.</span></span><br><span class="line"><span class="string">    :param boxes: numpy array of shape (r, 4)</span></span><br><span class="line"><span class="string">    :return: numpy array of shape (r, 2)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    new_boxes = boxes.copy()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(new_boxes.shape[<span class="number">0</span>]):</span><br><span class="line">        new_boxes[row][<span class="number">2</span>] = np.<span class="built_in">abs</span>(new_boxes[row][<span class="number">2</span>] - new_boxes[row][<span class="number">0</span>])</span><br><span class="line">        new_boxes[row][<span class="number">3</span>] = np.<span class="built_in">abs</span>(new_boxes[row][<span class="number">3</span>] - new_boxes[row][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> np.delete(new_boxes, [<span class="number">0</span>, <span class="number">1</span>], axis=<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kmeans</span>(<span class="params">boxes, k, dist=np.median</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Calculates k-means clustering with the Intersection over Union (IoU) metric.</span></span><br><span class="line"><span class="string">    :param boxes: numpy array of shape (r, 2), where r is the number of rows</span></span><br><span class="line"><span class="string">    :param k: number of clusters</span></span><br><span class="line"><span class="string">    :param dist: distance function</span></span><br><span class="line"><span class="string">    :return: numpy array of shape (k, 2)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    rows = boxes.shape[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">    distances = np.empty((rows, k))</span><br><span class="line">    last_clusters = np.zeros((rows,))</span><br><span class="line"> </span><br><span class="line">    np.random.seed()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># the Forgy method will fail if the whole array contains the same rows</span></span><br><span class="line">    clusters = boxes[np.random.choice(rows, k, replace=<span class="literal">False</span>)]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            distances[row] = <span class="number">1</span> - iou(boxes[row], clusters)</span><br><span class="line"> </span><br><span class="line">        nearest_clusters = np.argmin(distances, axis=<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (last_clusters == nearest_clusters).<span class="built_in">all</span>():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> cluster <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            clusters[cluster] = dist(boxes[nearest_clusters == cluster], axis=<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">        last_clusters = nearest_clusters</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> clusters</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>]])</span><br><span class="line">    <span class="built_in">print</span>(translate_boxes(a))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#clauculate_anchors.py</span></span><br><span class="line"><span class="comment">#运行clauculate_anchors.py会调用 kmeans.py 聚类生成新anchors的文件</span></span><br><span class="line"><span class="comment">#需要更改第 9 、13行文件路径 以及 第 16 行标注类别名称</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 根据标签文件求先验框</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> et</span><br><span class="line"><span class="keyword">from</span> kmeans <span class="keyword">import</span> kmeans, avg_iou</span><br><span class="line"> </span><br><span class="line">FILE_ROOT = <span class="string">&quot;/home/whaltze/yolov5/VOCData/&quot;</span>     <span class="comment"># 根路径</span></span><br><span class="line">ANNOTATION_ROOT = <span class="string">&quot;Annotations&quot;</span>   <span class="comment"># 数据集标签文件夹路径</span></span><br><span class="line">ANNOTATION_PATH = FILE_ROOT + ANNOTATION_ROOT</span><br><span class="line"> </span><br><span class="line">ANCHORS_TXT_PATH = <span class="string">&quot;/home/whaltze/yolov5/VOCData/anchors.txt&quot;</span>   <span class="comment">#anchors文件保存位置</span></span><br><span class="line"> </span><br><span class="line">CLUSTERS = <span class="number">9</span></span><br><span class="line">CLASS_NAMES = [<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>,<span class="string">&#x27;four&#x27;</span>,<span class="string">&#x27;five&#x27;</span>,<span class="string">&#x27;six&#x27;</span>,<span class="string">&#x27;seven&#x27;</span>,<span class="string">&#x27;eight&#x27;</span>]   <span class="comment">#类别名称</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">anno_dir, class_names</span>):</span><br><span class="line">    xml_names = os.listdir(anno_dir)</span><br><span class="line">    boxes = []</span><br><span class="line">    <span class="keyword">for</span> xml_name <span class="keyword">in</span> xml_names:</span><br><span class="line">        xml_pth = os.path.join(anno_dir, xml_name)</span><br><span class="line">        tree = et.parse(xml_pth)</span><br><span class="line"> </span><br><span class="line">        width = <span class="built_in">float</span>(tree.findtext(<span class="string">&quot;./size/width&quot;</span>))</span><br><span class="line">        height = <span class="built_in">float</span>(tree.findtext(<span class="string">&quot;./size/height&quot;</span>))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> tree.findall(<span class="string">&quot;./object&quot;</span>):</span><br><span class="line">            cls_name = obj.findtext(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> cls_name <span class="keyword">in</span> class_names:</span><br><span class="line">                xmin = <span class="built_in">float</span>(obj.findtext(<span class="string">&quot;bndbox/xmin&quot;</span>)) / width</span><br><span class="line">                ymin = <span class="built_in">float</span>(obj.findtext(<span class="string">&quot;bndbox/ymin&quot;</span>)) / height</span><br><span class="line">                xmax = <span class="built_in">float</span>(obj.findtext(<span class="string">&quot;bndbox/xmax&quot;</span>)) / width</span><br><span class="line">                ymax = <span class="built_in">float</span>(obj.findtext(<span class="string">&quot;bndbox/ymax&quot;</span>)) / height</span><br><span class="line"> </span><br><span class="line">                box = [xmax - xmin, ymax - ymin]</span><br><span class="line">                boxes.append(box)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> np.array(boxes)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    anchors_txt = <span class="built_in">open</span>(ANCHORS_TXT_PATH, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    train_boxes = load_data(ANNOTATION_PATH, CLASS_NAMES)</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    best_accuracy = <span class="number">0</span></span><br><span class="line">    best_anchors = []</span><br><span class="line">    best_ratios = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):      <span class="comment">##### 可以修改，不要太大，否则时间很长</span></span><br><span class="line">        anchors_tmp = []</span><br><span class="line">        clusters = kmeans(train_boxes, k=CLUSTERS)</span><br><span class="line">        idx = clusters[:, <span class="number">0</span>].argsort()</span><br><span class="line">        clusters = clusters[idx]</span><br><span class="line">        <span class="comment"># print(clusters)</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(CLUSTERS):</span><br><span class="line">            anchor = [<span class="built_in">round</span>(clusters[j][<span class="number">0</span>] * <span class="number">640</span>, <span class="number">2</span>), <span class="built_in">round</span>(clusters[j][<span class="number">1</span>] * <span class="number">640</span>, <span class="number">2</span>)]</span><br><span class="line">            anchors_tmp.append(anchor)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Anchors:<span class="subst">&#123;anchor&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        temp_accuracy = avg_iou(train_boxes, clusters) * <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Train_Accuracy:&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(temp_accuracy))</span><br><span class="line"> </span><br><span class="line">        ratios = np.around(clusters[:, <span class="number">0</span>] / clusters[:, <span class="number">1</span>], decimals=<span class="number">2</span>).tolist()</span><br><span class="line">        ratios.sort()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ratios:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ratios))</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">20</span> * <span class="string">&quot;*&quot;</span> + <span class="string">&quot; &#123;&#125; &quot;</span>.<span class="built_in">format</span>(count) + <span class="number">20</span> * <span class="string">&quot;*&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> temp_accuracy &gt; best_accuracy:</span><br><span class="line">            best_accuracy = temp_accuracy</span><br><span class="line">            best_anchors = anchors_tmp</span><br><span class="line">            best_ratios = ratios</span><br><span class="line"> </span><br><span class="line">    anchors_txt.write(<span class="string">&quot;Best Accuracy = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(best_accuracy, <span class="number">2</span>)) + <span class="string">&#x27;%&#x27;</span> + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    anchors_txt.write(<span class="string">&quot;Best Anchors = &quot;</span> + <span class="built_in">str</span>(best_anchors) + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    anchors_txt.write(<span class="string">&quot;Best Ratios = &quot;</span> + <span class="built_in">str</span>(best_ratios))</span><br><span class="line">    anchors_txt.close()</span><br></pre></td></tr></table></figure><p>运行后会生成anchors文件。如果生成文件为空，重新运行即可<br>anchors文件如下<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/8.png" alt=" "></p><p>第二行 Best Anchors 后面需要用到（这就是手动获取到的anchors的值）</p><h3 id="修改模型配置文件yolov5s-yaml"><a href="#修改模型配置文件yolov5s-yaml" class="headerlink" title="修改模型配置文件yolov5s.yaml"></a>修改模型配置文件yolov5s.yaml</h3><p>在yolov5目录下的model文件夹下是模型的配置文件，有n、s、m、l、x版本，逐渐增大（随着架构的增大，训练时间也是逐渐增大）<br>我们选s版本的，主要改两个参数：<br>1.把 nc：后面改成自己的标注类别数<br>2.修改anchors，根据 anchors.txt 中的 Best Anchors 修改，需要取整（四舍五入、向上、向下都可以）<br>3.保持yaml中的anchors格式不变，按顺序一对一即可，六个对应anchors的第一行6个（18个都要改），改完后如图所示</p><p><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/9.png" alt=" "></p><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><p>进入yolo5_env环境输入如下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.<span class="property">py</span> --weights weights/yolov5s.<span class="property">pt</span>  --cfg models/yolov5s.<span class="property">yaml</span>  --data data/myvoc.<span class="property">yaml</span> --epoch <span class="number">200</span> --batch-size <span class="number">8</span> --img <span class="number">640</span>   --device cpu</span><br></pre></td></tr></table></figure><p>这里我没有用CUDA，device选cpu，有GPU的可以选0&#x2F;1&#x2F;2···根据自身情况确定</p><blockquote><p>解释一下这串命令<br>python train.py &#x2F;&#x2F;运行train<br>–weights weights&#x2F;yolov5s.pt &#x2F;&#x2F;获取权重，将yolov5.pt文件放在weights里面，若不这样需要更改路径<br>–epoch 200 &#x2F;&#x2F;训练次数为200次<br>–batch-size 8 &#x2F;&#x2F;训练8张图片后进行权重更新<br>–device cpu &#x2F;&#x2F;使用CPU训练,这里device 0为gpu训练</p></blockquote><p>正常情况应该训练成功</p><blockquote><p>如图所示<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/10.png" alt=" "></p></blockquote><p>不过大概率你会遇到一些问题</p><blockquote><p>错误1 RuntimeError: PytorchStreamReader failed reading zip archive: failed finding central directory<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/11.png" alt=" "><br>这主要是weights文件内的yolov5.pt文件丢失或者损坏，可以重新下载 <em><a href="https://github.com/ultralytics/yolov5">yolov5.py</a></em> 放入weights文件夹中，无需解压,也可在终端直接’git clone <a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a>‘</p></blockquote><p>再次输入训练指令</p><blockquote><p>错误2 AssertionError: train: No labels found in &#x2F;home&#x2F;whaltze&#x2F;yolov5&#x2F;VOCData&#x2F;dataSet_path&#x2F;train.cache, can not start training<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/12.png" alt=" "><br>这主要是找不到对应的文件，博主后面发现是text_to_yolo_.py的第66行为JPG，而我图像文件格式为jpg（小写）导致的错误，修改后记得重新运行（或者手动把train.txt,val.txt里面的路径也改了，不然还是会报错。最后删除train.cache文件，重新运行训练命令。</p></blockquote><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><p>训练时间可能会有点长，博主没用GPU，大概花了60分钟，<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/13.png" alt=" "><br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/14.png" alt=" "></p><p>等待即可</p><h2 id="训练结束"><a href="#训练结束" class="headerlink" title="训练结束"></a>训练结束</h2><p>训练好的模型会保存在&#x2F;yolov5&#x2F;runs&#x2F;train&#x2F;weights&#x2F;exp8 下<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/15.png" alt=" "></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在yolov5的主目录下找到detect.py文件，修改weights和source两处，我这里以外接摄像头为例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载训练器</span></span><br><span class="line"><span class="comment">//原代码_362行</span></span><br><span class="line">parser.<span class="title function_">add_argument</span>(<span class="string">&quot;--weights&quot;</span>, nargs=<span class="string">&quot;+&quot;</span>, type=str, <span class="keyword">default</span>=<span class="variable constant_">ROOT</span> / <span class="string">&quot;yolov5s.pt&quot;</span>, help=<span class="string">&quot;model path or triton URL&quot;</span>)</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line">parser.<span class="title function_">add_argument</span>(<span class="string">&quot;--weights&quot;</span>, nargs=<span class="string">&quot;+&quot;</span>, type=str, <span class="keyword">default</span>=<span class="string">&#x27;runs/train/exp8/weights/best.pt&#x27;</span>, help=<span class="string">&#x27;model.pt path(s)&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//摄像头识别</span></span><br><span class="line"><span class="comment">//原代码_363行</span></span><br><span class="line">parser.<span class="title function_">add_argument</span>(<span class="string">&quot;--source&quot;</span>, type=str, <span class="keyword">default</span>=<span class="variable constant_">ROOT</span> / <span class="string">&quot;data/images&quot;</span>, help=<span class="string">&quot;file/dir/URL/glob/screen/0(webcam)&quot;</span>)</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line">parser.<span class="title function_">add_argument</span>(<span class="string">&quot;--source&quot;</span>, type=str, <span class="keyword">default</span>=<span class="number">1</span>, help=<span class="string">&#x27;source&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里default为你摄像头的位置<br>博主是1就是等于1，默认0为笔记本自带的摄像头<br>如果要测试图片则修改default&#x3D;’&#x2F;home&#x2F;···&#x2F;test.jpg’</p></blockquote><p>运行detect.py</p><blockquote><p>以下是博主的训练效果<br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/16.jpg" alt=" "><br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/17.jpg" alt=" "><br><img src="/./images/%E5%9F%BA%E4%BA%8Eyolov5%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/18.jpg" alt=" "></p></blockquote><p>简单试了一下，大家可以再增加一些，可能效果会更好！</p><h1 id="进阶学习"><a href="#进阶学习" class="headerlink" title="进阶学习"></a>进阶学习</h1><blockquote><p><a href="https://www.aliyun.com/search?k=YOLOv5%E6%BA%90%E7%A0%81%E9%80%90%E8%A1%8C%E8%B6%85%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E4%B8%8E%E8%A7%A3%E8%AF%BB&scene=community&page=1">YOLOv5源码逐行超详细注释与解读–阿里云</a></p></blockquote><p>至此便是基于yolov5的数字识别的全部内容，有什么问题欢迎找我！希望能一起学习进步！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> yolov5 </tag>
            
            <tag> 数字识别 </tag>
            
            <tag> ubuntu22.04 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy Environment to Anaconda3</title>
      <link href="/2024/07/15/Deploy%20Environment%20to%20Anaconda3/"/>
      <url>/2024/07/15/Deploy%20Environment%20to%20Anaconda3/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote><p>本文主要介绍了anaconda3 环境配置的相关问题，包括但不限于如何修改 ~&#x2F;.bashrc 文件，保证每次终端开启不会自启动conda，同时也避免了全盘杀死anaconda进程，导致conda无法初始化，conda找不到指令</p></blockquote><h1 id="Anaconda3-的下载"><a href="#Anaconda3-的下载" class="headerlink" title="Anaconda3 的下载"></a>Anaconda3 的下载</h1><p>官方网站 <a href="https://www.anaconda.com/download/success">Anaconda</a><br>国内网络问题 下载速度慢 不推荐 （后续内置的pip和conda也都会用国外源，还要换源 所以建议用清华镜像）</p><p>清华镜像源 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&O=D">Anaconda</a></p><p>笔者这里选择了 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Anaconda3-5.3.1-Linux-x86_64.sh637.0 MiB2025-02-14 03:40</span><br></pre></td></tr></table></figure><p>下载到本地后 赋予 sh 文件的执行权限 运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whale@UP:~/Downloads$ ./Anaconda3-5.3.1-Linux-x86_64.sh </span><br></pre></td></tr></table></figure><p>跟着提示走<br>等待下载 会自动下载到主目录</p><p>选择 不自动加载bash文件 以及 不下载vscode</p><p>下载完后 进入<code>.bashrc</code>文件内部 在最后一行加上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!! Contents within this block are managed by <span class="string">&#x27;conda init&#x27;</span> !!</span></span><br><span class="line">__conda_setup=&quot;$(&#x27;/root/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    eval &quot;$__conda_setup&quot;</span><br><span class="line">else</span><br><span class="line">    if [ -f &quot;/home/whale/anaconda3/etc/profile.d/conda.sh&quot; ]; then</span><br><span class="line">        . &quot;/home/whale/anaconda3/etc/profile.d/conda.sh&quot;</span><br><span class="line">    else</span><br><span class="line">        export PATH=&quot;/home/whale/anaconda3/bin:$PATH&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">unset __conda_setup</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; <span class="string">conda initialize &lt;&lt;&lt;</span></span></span><br></pre></td></tr></table></figure><p>此时 <code>source ./.bashrc</code> 后 就可以正常使用conda了</p><blockquote><p>注意修改文件名字和用户名字</p></blockquote><p>看看版本是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whale@UP:~$ conda --version</span><br><span class="line">conda 4.5.11</span><br></pre></td></tr></table></figure><h1 id="Anaconda3-卸载"><a href="#Anaconda3-卸载" class="headerlink" title="Anaconda3 卸载"></a>Anaconda3 卸载</h1><p><a href="https://blog.csdn.net/KIK9973/article/details/118795049">Unbuntu卸载anaconda</a></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="查看当前conda版本"><a href="#查看当前conda版本" class="headerlink" title="查看当前conda版本"></a>查看当前conda版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><h2 id="新建虚拟环境并指定包版本"><a href="#新建虚拟环境并指定包版本" class="headerlink" title="新建虚拟环境并指定包版本"></a>新建虚拟环境并指定包版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name &lt;环境名&gt; python=3.6</span><br></pre></td></tr></table></figure><h2 id="查看已有虚拟环境"><a href="#查看已有虚拟环境" class="headerlink" title="查看已有虚拟环境"></a>查看已有虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><h2 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n &lt;环境名称&gt; --all</span><br></pre></td></tr></table></figure><h2 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;环境名&gt;</span><br></pre></td></tr></table></figure><h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="环境内安装新包"><a href="#环境内安装新包" class="headerlink" title="环境内安装新包"></a>环境内安装新包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install &lt;包名&gt;</span><br></pre></td></tr></table></figure><h2 id="查看已安装库"><a href="#查看已安装库" class="headerlink" title="查看已安装库"></a>查看已安装库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure><h2 id="更新包版本"><a href="#更新包版本" class="headerlink" title="更新包版本"></a>更新包版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update &lt;包名&gt;</span><br></pre></td></tr></table></figure><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>conda install PackageName</p><h3 id="安装多个包"><a href="#安装多个包" class="headerlink" title="安装多个包"></a>安装多个包</h3><p>conda install name1 name2 …</p><h3 id="安装包并指定版本号"><a href="#安装包并指定版本号" class="headerlink" title="安装包并指定版本号"></a>安装包并指定版本号</h3><p>conda install PackageName&#x3D;版本号</p><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><p>conda remove PackageName</p><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><p>conda update PackageName</p><h3 id="更新环境中的所有包"><a href="#更新环境中的所有包" class="headerlink" title="更新环境中的所有包"></a>更新环境中的所有包</h3><p>conda update –all</p><h3 id="列出已安装的包"><a href="#列出已安装的包" class="headerlink" title="列出已安装的包"></a>列出已安装的包</h3><p>conda list</p><h3 id="搜寻包"><a href="#搜寻包" class="headerlink" title="搜寻包"></a>搜寻包</h3><p>conda search PackageName</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Environment </tag>
            
            <tag> Anaconda3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2024/07/10/Learning%20Markdown/"/>
      <url>/2024/07/10/Learning%20Markdown/</url>
      
        <content type="html"><![CDATA[<!-- <b><font face="微软雅黑" color=black size=3> [TOC] </font></b> --><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><em><b><font face="微软雅黑"><em>Hello! In this post, you will learn some basic skills about markdown-writing.</em></font></b></em></p><blockquote><p><b><font face=“仿宋”>Please click <a href="https://markdown.com.cn/basic-syntax/"><em><strong>Markdown</strong></em></a> for more informations.</font></b></p></blockquote><blockquote><p><em><b><font face="微软雅黑">The form is effect, following is md grammar.</font></b></em></p></blockquote><p><b><font size=5 color=black face="微软雅黑">Now let’s start!</font></b></p><hr><h1 id="Basic-Grammar"><a href="#Basic-Grammar" class="headerlink" title="Basic Grammar"></a>Basic Grammar</h1><h2 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h2><p><strong>The symbol  <em><strong><code>#</code></strong></em>  stands the priority</strong><br>For example</p><blockquote><h1 id="This-is-Fist-level-title"><a href="#This-is-Fist-level-title" class="headerlink" title="This is Fist-level title"></a>This is Fist-level title</h1><h2 id="This-is-Second-level-title"><a href="#This-is-Second-level-title" class="headerlink" title="This is Second-level title"></a>This is Second-level title</h2></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="title class_">This</span> is <span class="title class_">Fist</span>-level title</span><br><span class="line"></span><br><span class="line">## <span class="title class_">This</span> is <span class="title class_">Second</span>-level title</span><br></pre></td></tr></table></figure><hr><h2 id="Bold-Italic"><a href="#Bold-Italic" class="headerlink" title="Bold &amp;&amp; Italic"></a>Bold &amp;&amp; Italic</h2><blockquote><p><strong>the word is be bold</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**the word is be bold**</span><br><span class="line">__the word is be bold__</span><br></pre></td></tr></table></figure><blockquote><p><em>the word is be italicized</em></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*the word is be italicized*</span><br><span class="line">_the word is be italicized_</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>the word is be bold &amp;&amp; italic</strong></em></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***the word is be bold &amp;&amp; italic***</span><br><span class="line">___the word is be bold &amp;&amp; italic___</span><br></pre></td></tr></table></figure><hr><h2 id="Blockquote"><a href="#Blockquote" class="headerlink" title="Blockquote"></a>Blockquote</h2><blockquote><p>This is a blockquote</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">This</span> is a blockquote</span><br></pre></td></tr></table></figure><hr><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">This</span> is code block</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`This is code block`</span></span><br><span class="line"><span class="string">``</span><span class="string">`This is code block`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><blockquote><p><em><font face="仿宋">The latter can reserved spaces</font></em></p></blockquote><hr><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="Ordered-List"><a href="#Ordered-List" class="headerlink" title="Ordered List"></a>Ordered List</h3><blockquote><ol><li>First item</li><li>Second item</li><li>Third item</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="title class_">First</span> item</span><br><span class="line"><span class="number">2.</span> <span class="title class_">Second</span> item</span><br><span class="line"><span class="number">3.</span> <span class="title class_">Third</span> item</span><br></pre></td></tr></table></figure><h3 id="Unordered-List"><a href="#Unordered-List" class="headerlink" title="Unordered List"></a>Unordered List</h3><blockquote><ul><li>First item</li><li>Second item</li><li>Third item</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="title class_">First</span> item</span><br><span class="line">- <span class="title class_">Second</span> item</span><br><span class="line">- <span class="title class_">Third</span> item</span><br></pre></td></tr></table></figure><hr><h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><p><em><b><font face="微软雅黑">Using on a single line following</font></b></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*******************</span><br><span class="line">-------------------</span><br><span class="line">___________________</span><br></pre></td></tr></table></figure><hr><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><blockquote><p>This is an external link: <a href="https://www.example.com/">website</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">This</span> is an external <span class="attr">link</span>: [website](<span class="attr">https</span>:<span class="comment">//www.example.com)</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="mailto:&#x58;&#x58;&#x58;&#88;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;">XXXX@qq.com</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">This</span> is an email &lt;<span class="variable constant_">XXXX</span>@qq.<span class="property">com</span>&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a>Picture</h2><blockquote><p><img src="/imges/philly-magic-garden.jpg" alt="This is a Picture" title="Magic Gardens"></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="title class_">This</span> is a <span class="title class_">Picture</span>](<span class="title class_">Picture</span> website address <span class="string">&quot;picture title&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![<span class="title class_">This</span> is a picture](<span class="regexp">/imges/</span>shiprock.<span class="property">jpg</span> <span class="string">&quot;Shiprock&quot;</span>)](<span class="attr">https</span>:<span class="comment">//markdown.com.cn)</span></span><br></pre></td></tr></table></figure><hr><h2 id="The-Escape-Character"><a href="#The-Escape-Character" class="headerlink" title="The Escape Character"></a>The Escape Character</h2><p>The escape character is <strong><code>\</code></strong>, displaying special characters</p><p>like this</p><blockquote><p>the *</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actually \*                 </span><br></pre></td></tr></table></figure><p><em><strong>These are escapable character</strong></em></p><table><thead><tr><th align="center">Character</th><th align="center">Name</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">backslash</td></tr><tr><td align="center">&#96;</td><td align="center">backtick</td></tr><tr><td align="center">*</td><td align="center">asterisk</td></tr><tr><td align="center">_</td><td align="center">underscore</td></tr><tr><td align="center">{ }</td><td align="center">curly braces</td></tr><tr><td align="center">[ ]</td><td align="center">brackets</td></tr><tr><td align="center">( )</td><td align="center">parentheses</td></tr><tr><td align="center">#</td><td align="center">pound sign</td></tr><tr><td align="center">+</td><td align="center">plus sign</td></tr><tr><td align="center">-</td><td align="center">minus sign</td></tr><tr><td align="center">.</td><td align="center">dot</td></tr><tr><td align="center">!</td><td align="center">exclamation mark</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><hr><h2 id="Face-Size-Color-Font"><a href="#Face-Size-Color-Font" class="headerlink" title="Face &amp;&amp; Size &amp;&amp; Color &amp;&amp; Font"></a>Face &amp;&amp; Size &amp;&amp; Color &amp;&amp; Font</h2><blockquote><p><font face="黑体">I’m Boldface</font><br><font face="微软雅黑">I’m Microsoft_YaHei</font><br><font face="STCAIYUN">I’m Chinese_Clouds</font><br><font color=red>I’m Red</font><br><font color=#008000>I’m geen</font><br><font color=Blue>I’m bule</font><br><font size=5>I’m size5</font><br><font face="黑体" color=green size=5>Boldface, green, size5</font><br><b><font face="黑体" color=green size=5>Boldface, bold, green, size5</font></b><br><font size=3></p><table><thead><tr><th align="center">It can revise the size of table</th><th align="center">put in the <code>&lt;font&gt;&lt;/font&gt;</code></th></tr></thead></table></font></blockquote><font size=4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">code <span class="keyword">in</span> <span class="attr">md</span>:</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>I&#x27;m Boldface<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span>I&#x27;m Microsoft_YaHei<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span>I&#x27;m Chinese_Clouds<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>I&#x27;m Red<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#008000</span>&gt;</span>I&#x27;m geen<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">Blue</span>&gt;</span>I&#x27;m bule<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>I&#x27;m size5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>Boldface, green, size5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>Boldface, bold, green, size5<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=&gt;</span></span></span><br><span class="line"><span class="language-xml">| It can revise the size of table | put  in the <span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span>  | </span></span><br><span class="line"><span class="language-xml">|:-------------------------------:|:--------------------------:|</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure></font><hr><h2 id="Highlight-Test"><a href="#Highlight-Test" class="headerlink" title="Highlight Test"></a>Highlight Test</h2><blockquote><p>&#x3D;&#x3D;Hello&#x3D;&#x3D;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==hello==</span><br></pre></td></tr></table></figure><hr><h2 id="Generate-directory"><a href="#Generate-directory" class="headerlink" title="Generate directory"></a>Generate directory</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="variable constant_">TOC</span>]<span class="title class_">Content</span> title</span><br></pre></td></tr></table></figure><hr><h2 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h2><blockquote><p><del>Hello World !</del></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~<span class="title class_">Hello</span> <span class="title class_">World</span> ！~~</span><br></pre></td></tr></table></figure><hr><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><blockquote><p>:joy: :tent: :moon: :pig:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="attr">joy</span>: :<span class="attr">tent</span>: :<span class="attr">moon</span>: :<span class="attr">pig</span>: </span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><blockquote><p><strong style="font-family:'仿宋';">不一样代码方式添加字体</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong style=&quot;font-family:&#x27;仿宋&#x27;;&quot;&gt;不一样代码方式添加字体&lt;/strong&gt;</span><br></pre></td></tr></table></figure><blockquote><p><s style="font-family:'仿宋';">添加高级删除线</s></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s style=&quot;font-family:&#x27;仿宋&#x27;;&quot;&gt;添加高级删除线&lt;/s&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Preface</title>
      <link href="/2024/07/10/Preface/"/>
      <url>/2024/07/10/Preface/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Greetings !<br>Welcome to <a href="https://whaltze.github.io/"><em><strong>Whaltze</strong></em></a> !<br>I’m an undergraduate student from China, majoring in Robotics.<br>In my home, some experiences would be showed, which I had learned in the way.<br>All in all，the SMART knowledge will live up to your expectation.<br>Looking forward your advice.</p></blockquote><!-- hsla(213, 88.40%, 62.90%, 0.94) --><div style="background-color: hsla(213, 88.40%, 62.90%, 0.94); color: white; padding: 10px; margin: 0 auto; margin-bottom: 20px; border-left: 1px hsla(213, 88.40%, 62.90%, 0.94); border-right: 1px hsla(213, 88.40%, 62.90%, 0.94); text-align: center; font-family: 'Comic Sans MS', cursive; font-size: 17px;  color:hsl(0, 0.00%, 93.70%);">天大地大 吃饭最大 !</div><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Responsive Images</title>    <style>        .container {            display: flex;            justify-content: center; /* 使图片在容器中居中 */            gap: 100px; /* 设置图片之间的距离 */            flex-wrap: wrap; /* 允许图片在必要时换行 */        }        .container img {            width: 200px; /* 设置固定宽度 */            height: 200px; /* 设置固定高度 */            object-fit: cover; /* 保持图片的纵横比，同时填充元素的整个内容框 */        }        @media (max-width: 768px) {            .container img {                width: 50%; /* 当屏幕宽度小于768px时，每张图片占据整行 */                height: auto; /* 高度自动调整以保持图片比例 */                max-width: 200px; /* 限制最大宽度，避免图片放大 */                margin: 0 auto; /* 水平居中 */            }        }    </style></head><body>    <div class="container">        <img src="https://whaltze.github.io/img/WeChat.jpg">        <img src="https://whaltze.github.io/img/AliPay.jpg">    </div></body></html><div style="background-color: hsla(0, 0.00%, 49.00%, 0.25); color: white; padding: 10px; margin: 0 auto; margin-top: 20px; border-left: 1px hsla(213, 88.40%, 62.90%, 0.94); border-right: 1px hsla(213, 88.40%, 62.90%, 0.94); text-align: center; font-family: 'Comic Sans MS', cursive; font-size: 17px;  color:hsl(0, 0.00%, 93.70%);">家境贫寒,生活所迫 ······(此处省略 1w 字乞讨)</div><h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><blockquote><p>既然 你发现了这个页面 就说明 你对我的文章 还算颇有好感和认同 (嘿嘿) 很高兴认识你, 下面是简单的自我介绍, 请查收</p></blockquote><p><i class="fas fa-envelope"></i> : <a href="mailto:&#x57;&#104;&#x61;&#108;&#116;&#x7a;&#x65;&#46;&#x63;&#x6e;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">Whaltze.cn@gmail.com</a><br><i class="fab fa-github"></i> : <a href="https://github.com/Whaltze">@Whaltze</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
